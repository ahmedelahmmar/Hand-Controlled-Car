
R.E.M.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000031ee  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011a  00800060  000031ee  00003262  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002bbc  00000000  00000000  0000337c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001e3f  00000000  00000000  00005f38  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  00007d77  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f2  00000000  00000000  00007f17  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000240b  00000000  00000000  00008109  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001386  00000000  00000000  0000a514  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d6  00000000  00000000  0000b89a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000ca70  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f6  00000000  00000000  0000cc30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000096e  00000000  00000000  0000cf26  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000d894  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ee       	ldi	r30, 0xEE	; 238
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 2e 08 	call	0x105c	; 0x105c <main>
      7a:	0c 94 f5 18 	jmp	0x31ea	; 0x31ea <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 1d 16 	jmp	0x2c3a	; 0x2c3a <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a9 e6       	ldi	r26, 0x69	; 105
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 39 16 	jmp	0x2c72	; 0x2c72 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 29 16 	jmp	0x2c52	; 0x2c52 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 45 16 	jmp	0x2c8a	; 0x2c8a <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 29 16 	jmp	0x2c52	; 0x2c52 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 45 16 	jmp	0x2c8a	; 0x2c8a <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 1d 16 	jmp	0x2c3a	; 0x2c3a <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	89 e6       	ldi	r24, 0x69	; 105
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 39 16 	jmp	0x2c72	; 0x2c72 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 25 16 	jmp	0x2c4a	; 0x2c4a <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	69 e6       	ldi	r22, 0x69	; 105
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 41 16 	jmp	0x2c82	; 0x2c82 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 29 16 	jmp	0x2c52	; 0x2c52 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 45 16 	jmp	0x2c8a	; 0x2c8a <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 29 16 	jmp	0x2c52	; 0x2c52 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 45 16 	jmp	0x2c8a	; 0x2c8a <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 29 16 	jmp	0x2c52	; 0x2c52 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 45 16 	jmp	0x2c8a	; 0x2c8a <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 2d 16 	jmp	0x2c5a	; 0x2c5a <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 49 16 	jmp	0x2c92	; 0x2c92 <__epilogue_restores__+0x20>

00000942 <__floatunsisf>:
     942:	a8 e0       	ldi	r26, 0x08	; 8
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e7 ea       	ldi	r30, 0xA7	; 167
     948:	f4 e0       	ldi	r31, 0x04	; 4
     94a:	0c 94 25 16 	jmp	0x2c4a	; 0x2c4a <__prologue_saves__+0x10>
     94e:	7b 01       	movw	r14, r22
     950:	8c 01       	movw	r16, r24
     952:	61 15       	cp	r22, r1
     954:	71 05       	cpc	r23, r1
     956:	81 05       	cpc	r24, r1
     958:	91 05       	cpc	r25, r1
     95a:	19 f4       	brne	.+6      	; 0x962 <__floatunsisf+0x20>
     95c:	82 e0       	ldi	r24, 0x02	; 2
     95e:	89 83       	std	Y+1, r24	; 0x01
     960:	60 c0       	rjmp	.+192    	; 0xa22 <__floatunsisf+0xe0>
     962:	83 e0       	ldi	r24, 0x03	; 3
     964:	89 83       	std	Y+1, r24	; 0x01
     966:	8e e1       	ldi	r24, 0x1E	; 30
     968:	c8 2e       	mov	r12, r24
     96a:	d1 2c       	mov	r13, r1
     96c:	dc 82       	std	Y+4, r13	; 0x04
     96e:	cb 82       	std	Y+3, r12	; 0x03
     970:	ed 82       	std	Y+5, r14	; 0x05
     972:	fe 82       	std	Y+6, r15	; 0x06
     974:	0f 83       	std	Y+7, r16	; 0x07
     976:	18 87       	std	Y+8, r17	; 0x08
     978:	c8 01       	movw	r24, r16
     97a:	b7 01       	movw	r22, r14
     97c:	0e 94 1a 05 	call	0xa34	; 0xa34 <__clzsi2>
     980:	fc 01       	movw	r30, r24
     982:	31 97       	sbiw	r30, 0x01	; 1
     984:	f7 ff       	sbrs	r31, 7
     986:	3b c0       	rjmp	.+118    	; 0x9fe <__floatunsisf+0xbc>
     988:	22 27       	eor	r18, r18
     98a:	33 27       	eor	r19, r19
     98c:	2e 1b       	sub	r18, r30
     98e:	3f 0b       	sbc	r19, r31
     990:	57 01       	movw	r10, r14
     992:	68 01       	movw	r12, r16
     994:	02 2e       	mov	r0, r18
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatunsisf+0x5e>
     998:	d6 94       	lsr	r13
     99a:	c7 94       	ror	r12
     99c:	b7 94       	ror	r11
     99e:	a7 94       	ror	r10
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatunsisf+0x56>
     9a4:	40 e0       	ldi	r20, 0x00	; 0
     9a6:	50 e0       	ldi	r21, 0x00	; 0
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	a0 e0       	ldi	r26, 0x00	; 0
     9b2:	b0 e0       	ldi	r27, 0x00	; 0
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__floatunsisf+0x7c>
     9b6:	88 0f       	add	r24, r24
     9b8:	99 1f       	adc	r25, r25
     9ba:	aa 1f       	adc	r26, r26
     9bc:	bb 1f       	adc	r27, r27
     9be:	2a 95       	dec	r18
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__floatunsisf+0x74>
     9c2:	01 97       	sbiw	r24, 0x01	; 1
     9c4:	a1 09       	sbc	r26, r1
     9c6:	b1 09       	sbc	r27, r1
     9c8:	8e 21       	and	r24, r14
     9ca:	9f 21       	and	r25, r15
     9cc:	a0 23       	and	r26, r16
     9ce:	b1 23       	and	r27, r17
     9d0:	00 97       	sbiw	r24, 0x00	; 0
     9d2:	a1 05       	cpc	r26, r1
     9d4:	b1 05       	cpc	r27, r1
     9d6:	21 f0       	breq	.+8      	; 0x9e0 <__floatunsisf+0x9e>
     9d8:	41 e0       	ldi	r20, 0x01	; 1
     9da:	50 e0       	ldi	r21, 0x00	; 0
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	70 e0       	ldi	r23, 0x00	; 0
     9e0:	4a 29       	or	r20, r10
     9e2:	5b 29       	or	r21, r11
     9e4:	6c 29       	or	r22, r12
     9e6:	7d 29       	or	r23, r13
     9e8:	4d 83       	std	Y+5, r20	; 0x05
     9ea:	5e 83       	std	Y+6, r21	; 0x06
     9ec:	6f 83       	std	Y+7, r22	; 0x07
     9ee:	78 87       	std	Y+8, r23	; 0x08
     9f0:	8e e1       	ldi	r24, 0x1E	; 30
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	8e 1b       	sub	r24, r30
     9f6:	9f 0b       	sbc	r25, r31
     9f8:	9c 83       	std	Y+4, r25	; 0x04
     9fa:	8b 83       	std	Y+3, r24	; 0x03
     9fc:	12 c0       	rjmp	.+36     	; 0xa22 <__floatunsisf+0xe0>
     9fe:	30 97       	sbiw	r30, 0x00	; 0
     a00:	81 f0       	breq	.+32     	; 0xa22 <__floatunsisf+0xe0>
     a02:	0e 2e       	mov	r0, r30
     a04:	04 c0       	rjmp	.+8      	; 0xa0e <__floatunsisf+0xcc>
     a06:	ee 0c       	add	r14, r14
     a08:	ff 1c       	adc	r15, r15
     a0a:	00 1f       	adc	r16, r16
     a0c:	11 1f       	adc	r17, r17
     a0e:	0a 94       	dec	r0
     a10:	d2 f7       	brpl	.-12     	; 0xa06 <__floatunsisf+0xc4>
     a12:	ed 82       	std	Y+5, r14	; 0x05
     a14:	fe 82       	std	Y+6, r15	; 0x06
     a16:	0f 83       	std	Y+7, r16	; 0x07
     a18:	18 87       	std	Y+8, r17	; 0x08
     a1a:	ce 1a       	sub	r12, r30
     a1c:	df 0a       	sbc	r13, r31
     a1e:	dc 82       	std	Y+4, r13	; 0x04
     a20:	cb 82       	std	Y+3, r12	; 0x03
     a22:	1a 82       	std	Y+2, r1	; 0x02
     a24:	ce 01       	movw	r24, r28
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     a2c:	28 96       	adiw	r28, 0x08	; 8
     a2e:	ea e0       	ldi	r30, 0x0A	; 10
     a30:	0c 94 41 16 	jmp	0x2c82	; 0x2c82 <__epilogue_restores__+0x10>

00000a34 <__clzsi2>:
     a34:	ef 92       	push	r14
     a36:	ff 92       	push	r15
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	7b 01       	movw	r14, r22
     a3e:	8c 01       	movw	r16, r24
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	e8 16       	cp	r14, r24
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	f8 06       	cpc	r15, r24
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	08 07       	cpc	r16, r24
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	18 07       	cpc	r17, r24
     a50:	88 f4       	brcc	.+34     	; 0xa74 <__clzsi2+0x40>
     a52:	8f ef       	ldi	r24, 0xFF	; 255
     a54:	e8 16       	cp	r14, r24
     a56:	f1 04       	cpc	r15, r1
     a58:	01 05       	cpc	r16, r1
     a5a:	11 05       	cpc	r17, r1
     a5c:	31 f0       	breq	.+12     	; 0xa6a <__clzsi2+0x36>
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x36>
     a60:	88 e0       	ldi	r24, 0x08	; 8
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	17 c0       	rjmp	.+46     	; 0xa98 <__clzsi2+0x64>
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	12 c0       	rjmp	.+36     	; 0xa98 <__clzsi2+0x64>
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	e8 16       	cp	r14, r24
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	f8 06       	cpc	r15, r24
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	08 07       	cpc	r16, r24
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	18 07       	cpc	r17, r24
     a84:	28 f0       	brcs	.+10     	; 0xa90 <__clzsi2+0x5c>
     a86:	88 e1       	ldi	r24, 0x18	; 24
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	04 c0       	rjmp	.+8      	; 0xa98 <__clzsi2+0x64>
     a90:	80 e1       	ldi	r24, 0x10	; 16
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	a0 e0       	ldi	r26, 0x00	; 0
     a96:	b0 e0       	ldi	r27, 0x00	; 0
     a98:	20 e2       	ldi	r18, 0x20	; 32
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	40 e0       	ldi	r20, 0x00	; 0
     a9e:	50 e0       	ldi	r21, 0x00	; 0
     aa0:	28 1b       	sub	r18, r24
     aa2:	39 0b       	sbc	r19, r25
     aa4:	4a 0b       	sbc	r20, r26
     aa6:	5b 0b       	sbc	r21, r27
     aa8:	04 c0       	rjmp	.+8      	; 0xab2 <__clzsi2+0x7e>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	8a 95       	dec	r24
     ab4:	d2 f7       	brpl	.-12     	; 0xaaa <__clzsi2+0x76>
     ab6:	f7 01       	movw	r30, r14
     ab8:	ef 58       	subi	r30, 0x8F	; 143
     aba:	ff 4f       	sbci	r31, 0xFF	; 255
     abc:	80 81       	ld	r24, Z
     abe:	28 1b       	sub	r18, r24
     ac0:	31 09       	sbc	r19, r1
     ac2:	41 09       	sbc	r20, r1
     ac4:	51 09       	sbc	r21, r1
     ac6:	c9 01       	movw	r24, r18
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	ff 90       	pop	r15
     ace:	ef 90       	pop	r14
     ad0:	08 95       	ret

00000ad2 <__pack_f>:
     ad2:	df 92       	push	r13
     ad4:	ef 92       	push	r14
     ad6:	ff 92       	push	r15
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	fc 01       	movw	r30, r24
     ade:	e4 80       	ldd	r14, Z+4	; 0x04
     ae0:	f5 80       	ldd	r15, Z+5	; 0x05
     ae2:	06 81       	ldd	r16, Z+6	; 0x06
     ae4:	17 81       	ldd	r17, Z+7	; 0x07
     ae6:	d1 80       	ldd	r13, Z+1	; 0x01
     ae8:	80 81       	ld	r24, Z
     aea:	82 30       	cpi	r24, 0x02	; 2
     aec:	48 f4       	brcc	.+18     	; 0xb00 <__pack_f+0x2e>
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	a0 e1       	ldi	r26, 0x10	; 16
     af4:	b0 e0       	ldi	r27, 0x00	; 0
     af6:	e8 2a       	or	r14, r24
     af8:	f9 2a       	or	r15, r25
     afa:	0a 2b       	or	r16, r26
     afc:	1b 2b       	or	r17, r27
     afe:	a5 c0       	rjmp	.+330    	; 0xc4a <__pack_f+0x178>
     b00:	84 30       	cpi	r24, 0x04	; 4
     b02:	09 f4       	brne	.+2      	; 0xb06 <__pack_f+0x34>
     b04:	9f c0       	rjmp	.+318    	; 0xc44 <__pack_f+0x172>
     b06:	82 30       	cpi	r24, 0x02	; 2
     b08:	21 f4       	brne	.+8      	; 0xb12 <__pack_f+0x40>
     b0a:	ee 24       	eor	r14, r14
     b0c:	ff 24       	eor	r15, r15
     b0e:	87 01       	movw	r16, r14
     b10:	05 c0       	rjmp	.+10     	; 0xb1c <__pack_f+0x4a>
     b12:	e1 14       	cp	r14, r1
     b14:	f1 04       	cpc	r15, r1
     b16:	01 05       	cpc	r16, r1
     b18:	11 05       	cpc	r17, r1
     b1a:	19 f4       	brne	.+6      	; 0xb22 <__pack_f+0x50>
     b1c:	e0 e0       	ldi	r30, 0x00	; 0
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	96 c0       	rjmp	.+300    	; 0xc4e <__pack_f+0x17c>
     b22:	62 81       	ldd	r22, Z+2	; 0x02
     b24:	73 81       	ldd	r23, Z+3	; 0x03
     b26:	9f ef       	ldi	r25, 0xFF	; 255
     b28:	62 38       	cpi	r22, 0x82	; 130
     b2a:	79 07       	cpc	r23, r25
     b2c:	0c f0       	brlt	.+2      	; 0xb30 <__pack_f+0x5e>
     b2e:	5b c0       	rjmp	.+182    	; 0xbe6 <__pack_f+0x114>
     b30:	22 e8       	ldi	r18, 0x82	; 130
     b32:	3f ef       	ldi	r19, 0xFF	; 255
     b34:	26 1b       	sub	r18, r22
     b36:	37 0b       	sbc	r19, r23
     b38:	2a 31       	cpi	r18, 0x1A	; 26
     b3a:	31 05       	cpc	r19, r1
     b3c:	2c f0       	brlt	.+10     	; 0xb48 <__pack_f+0x76>
     b3e:	20 e0       	ldi	r18, 0x00	; 0
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	40 e0       	ldi	r20, 0x00	; 0
     b44:	50 e0       	ldi	r21, 0x00	; 0
     b46:	2a c0       	rjmp	.+84     	; 0xb9c <__pack_f+0xca>
     b48:	b8 01       	movw	r22, r16
     b4a:	a7 01       	movw	r20, r14
     b4c:	02 2e       	mov	r0, r18
     b4e:	04 c0       	rjmp	.+8      	; 0xb58 <__pack_f+0x86>
     b50:	76 95       	lsr	r23
     b52:	67 95       	ror	r22
     b54:	57 95       	ror	r21
     b56:	47 95       	ror	r20
     b58:	0a 94       	dec	r0
     b5a:	d2 f7       	brpl	.-12     	; 0xb50 <__pack_f+0x7e>
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x9c>
     b66:	88 0f       	add	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	aa 1f       	adc	r26, r26
     b6c:	bb 1f       	adc	r27, r27
     b6e:	2a 95       	dec	r18
     b70:	d2 f7       	brpl	.-12     	; 0xb66 <__pack_f+0x94>
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	a1 09       	sbc	r26, r1
     b76:	b1 09       	sbc	r27, r1
     b78:	8e 21       	and	r24, r14
     b7a:	9f 21       	and	r25, r15
     b7c:	a0 23       	and	r26, r16
     b7e:	b1 23       	and	r27, r17
     b80:	00 97       	sbiw	r24, 0x00	; 0
     b82:	a1 05       	cpc	r26, r1
     b84:	b1 05       	cpc	r27, r1
     b86:	21 f0       	breq	.+8      	; 0xb90 <__pack_f+0xbe>
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	a0 e0       	ldi	r26, 0x00	; 0
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	9a 01       	movw	r18, r20
     b92:	ab 01       	movw	r20, r22
     b94:	28 2b       	or	r18, r24
     b96:	39 2b       	or	r19, r25
     b98:	4a 2b       	or	r20, r26
     b9a:	5b 2b       	or	r21, r27
     b9c:	da 01       	movw	r26, r20
     b9e:	c9 01       	movw	r24, r18
     ba0:	8f 77       	andi	r24, 0x7F	; 127
     ba2:	90 70       	andi	r25, 0x00	; 0
     ba4:	a0 70       	andi	r26, 0x00	; 0
     ba6:	b0 70       	andi	r27, 0x00	; 0
     ba8:	80 34       	cpi	r24, 0x40	; 64
     baa:	91 05       	cpc	r25, r1
     bac:	a1 05       	cpc	r26, r1
     bae:	b1 05       	cpc	r27, r1
     bb0:	39 f4       	brne	.+14     	; 0xbc0 <__pack_f+0xee>
     bb2:	27 ff       	sbrs	r18, 7
     bb4:	09 c0       	rjmp	.+18     	; 0xbc8 <__pack_f+0xf6>
     bb6:	20 5c       	subi	r18, 0xC0	; 192
     bb8:	3f 4f       	sbci	r19, 0xFF	; 255
     bba:	4f 4f       	sbci	r20, 0xFF	; 255
     bbc:	5f 4f       	sbci	r21, 0xFF	; 255
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0xf6>
     bc0:	21 5c       	subi	r18, 0xC1	; 193
     bc2:	3f 4f       	sbci	r19, 0xFF	; 255
     bc4:	4f 4f       	sbci	r20, 0xFF	; 255
     bc6:	5f 4f       	sbci	r21, 0xFF	; 255
     bc8:	e0 e0       	ldi	r30, 0x00	; 0
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	20 30       	cpi	r18, 0x00	; 0
     bce:	a0 e0       	ldi	r26, 0x00	; 0
     bd0:	3a 07       	cpc	r19, r26
     bd2:	a0 e0       	ldi	r26, 0x00	; 0
     bd4:	4a 07       	cpc	r20, r26
     bd6:	a0 e4       	ldi	r26, 0x40	; 64
     bd8:	5a 07       	cpc	r21, r26
     bda:	10 f0       	brcs	.+4      	; 0xbe0 <__pack_f+0x10e>
     bdc:	e1 e0       	ldi	r30, 0x01	; 1
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	79 01       	movw	r14, r18
     be2:	8a 01       	movw	r16, r20
     be4:	27 c0       	rjmp	.+78     	; 0xc34 <__pack_f+0x162>
     be6:	60 38       	cpi	r22, 0x80	; 128
     be8:	71 05       	cpc	r23, r1
     bea:	64 f5       	brge	.+88     	; 0xc44 <__pack_f+0x172>
     bec:	fb 01       	movw	r30, r22
     bee:	e1 58       	subi	r30, 0x81	; 129
     bf0:	ff 4f       	sbci	r31, 0xFF	; 255
     bf2:	d8 01       	movw	r26, r16
     bf4:	c7 01       	movw	r24, r14
     bf6:	8f 77       	andi	r24, 0x7F	; 127
     bf8:	90 70       	andi	r25, 0x00	; 0
     bfa:	a0 70       	andi	r26, 0x00	; 0
     bfc:	b0 70       	andi	r27, 0x00	; 0
     bfe:	80 34       	cpi	r24, 0x40	; 64
     c00:	91 05       	cpc	r25, r1
     c02:	a1 05       	cpc	r26, r1
     c04:	b1 05       	cpc	r27, r1
     c06:	39 f4       	brne	.+14     	; 0xc16 <__pack_f+0x144>
     c08:	e7 fe       	sbrs	r14, 7
     c0a:	0d c0       	rjmp	.+26     	; 0xc26 <__pack_f+0x154>
     c0c:	80 e4       	ldi	r24, 0x40	; 64
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	a0 e0       	ldi	r26, 0x00	; 0
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	04 c0       	rjmp	.+8      	; 0xc1e <__pack_f+0x14c>
     c16:	8f e3       	ldi	r24, 0x3F	; 63
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	a0 e0       	ldi	r26, 0x00	; 0
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e8 0e       	add	r14, r24
     c20:	f9 1e       	adc	r15, r25
     c22:	0a 1f       	adc	r16, r26
     c24:	1b 1f       	adc	r17, r27
     c26:	17 ff       	sbrs	r17, 7
     c28:	05 c0       	rjmp	.+10     	; 0xc34 <__pack_f+0x162>
     c2a:	16 95       	lsr	r17
     c2c:	07 95       	ror	r16
     c2e:	f7 94       	ror	r15
     c30:	e7 94       	ror	r14
     c32:	31 96       	adiw	r30, 0x01	; 1
     c34:	87 e0       	ldi	r24, 0x07	; 7
     c36:	16 95       	lsr	r17
     c38:	07 95       	ror	r16
     c3a:	f7 94       	ror	r15
     c3c:	e7 94       	ror	r14
     c3e:	8a 95       	dec	r24
     c40:	d1 f7       	brne	.-12     	; 0xc36 <__pack_f+0x164>
     c42:	05 c0       	rjmp	.+10     	; 0xc4e <__pack_f+0x17c>
     c44:	ee 24       	eor	r14, r14
     c46:	ff 24       	eor	r15, r15
     c48:	87 01       	movw	r16, r14
     c4a:	ef ef       	ldi	r30, 0xFF	; 255
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	6e 2f       	mov	r22, r30
     c50:	67 95       	ror	r22
     c52:	66 27       	eor	r22, r22
     c54:	67 95       	ror	r22
     c56:	90 2f       	mov	r25, r16
     c58:	9f 77       	andi	r25, 0x7F	; 127
     c5a:	d7 94       	ror	r13
     c5c:	dd 24       	eor	r13, r13
     c5e:	d7 94       	ror	r13
     c60:	8e 2f       	mov	r24, r30
     c62:	86 95       	lsr	r24
     c64:	49 2f       	mov	r20, r25
     c66:	46 2b       	or	r20, r22
     c68:	58 2f       	mov	r21, r24
     c6a:	5d 29       	or	r21, r13
     c6c:	b7 01       	movw	r22, r14
     c6e:	ca 01       	movw	r24, r20
     c70:	1f 91       	pop	r17
     c72:	0f 91       	pop	r16
     c74:	ff 90       	pop	r15
     c76:	ef 90       	pop	r14
     c78:	df 90       	pop	r13
     c7a:	08 95       	ret

00000c7c <__unpack_f>:
     c7c:	fc 01       	movw	r30, r24
     c7e:	db 01       	movw	r26, r22
     c80:	40 81       	ld	r20, Z
     c82:	51 81       	ldd	r21, Z+1	; 0x01
     c84:	22 81       	ldd	r18, Z+2	; 0x02
     c86:	62 2f       	mov	r22, r18
     c88:	6f 77       	andi	r22, 0x7F	; 127
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	22 1f       	adc	r18, r18
     c8e:	22 27       	eor	r18, r18
     c90:	22 1f       	adc	r18, r18
     c92:	93 81       	ldd	r25, Z+3	; 0x03
     c94:	89 2f       	mov	r24, r25
     c96:	88 0f       	add	r24, r24
     c98:	82 2b       	or	r24, r18
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	99 1f       	adc	r25, r25
     ca0:	99 27       	eor	r25, r25
     ca2:	99 1f       	adc	r25, r25
     ca4:	11 96       	adiw	r26, 0x01	; 1
     ca6:	9c 93       	st	X, r25
     ca8:	11 97       	sbiw	r26, 0x01	; 1
     caa:	21 15       	cp	r18, r1
     cac:	31 05       	cpc	r19, r1
     cae:	a9 f5       	brne	.+106    	; 0xd1a <__unpack_f+0x9e>
     cb0:	41 15       	cp	r20, r1
     cb2:	51 05       	cpc	r21, r1
     cb4:	61 05       	cpc	r22, r1
     cb6:	71 05       	cpc	r23, r1
     cb8:	11 f4       	brne	.+4      	; 0xcbe <__unpack_f+0x42>
     cba:	82 e0       	ldi	r24, 0x02	; 2
     cbc:	37 c0       	rjmp	.+110    	; 0xd2c <__unpack_f+0xb0>
     cbe:	82 e8       	ldi	r24, 0x82	; 130
     cc0:	9f ef       	ldi	r25, 0xFF	; 255
     cc2:	13 96       	adiw	r26, 0x03	; 3
     cc4:	9c 93       	st	X, r25
     cc6:	8e 93       	st	-X, r24
     cc8:	12 97       	sbiw	r26, 0x02	; 2
     cca:	9a 01       	movw	r18, r20
     ccc:	ab 01       	movw	r20, r22
     cce:	67 e0       	ldi	r22, 0x07	; 7
     cd0:	22 0f       	add	r18, r18
     cd2:	33 1f       	adc	r19, r19
     cd4:	44 1f       	adc	r20, r20
     cd6:	55 1f       	adc	r21, r21
     cd8:	6a 95       	dec	r22
     cda:	d1 f7       	brne	.-12     	; 0xcd0 <__unpack_f+0x54>
     cdc:	83 e0       	ldi	r24, 0x03	; 3
     cde:	8c 93       	st	X, r24
     ce0:	0d c0       	rjmp	.+26     	; 0xcfc <__unpack_f+0x80>
     ce2:	22 0f       	add	r18, r18
     ce4:	33 1f       	adc	r19, r19
     ce6:	44 1f       	adc	r20, r20
     ce8:	55 1f       	adc	r21, r21
     cea:	12 96       	adiw	r26, 0x02	; 2
     cec:	8d 91       	ld	r24, X+
     cee:	9c 91       	ld	r25, X
     cf0:	13 97       	sbiw	r26, 0x03	; 3
     cf2:	01 97       	sbiw	r24, 0x01	; 1
     cf4:	13 96       	adiw	r26, 0x03	; 3
     cf6:	9c 93       	st	X, r25
     cf8:	8e 93       	st	-X, r24
     cfa:	12 97       	sbiw	r26, 0x02	; 2
     cfc:	20 30       	cpi	r18, 0x00	; 0
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	38 07       	cpc	r19, r24
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	48 07       	cpc	r20, r24
     d06:	80 e4       	ldi	r24, 0x40	; 64
     d08:	58 07       	cpc	r21, r24
     d0a:	58 f3       	brcs	.-42     	; 0xce2 <__unpack_f+0x66>
     d0c:	14 96       	adiw	r26, 0x04	; 4
     d0e:	2d 93       	st	X+, r18
     d10:	3d 93       	st	X+, r19
     d12:	4d 93       	st	X+, r20
     d14:	5c 93       	st	X, r21
     d16:	17 97       	sbiw	r26, 0x07	; 7
     d18:	08 95       	ret
     d1a:	2f 3f       	cpi	r18, 0xFF	; 255
     d1c:	31 05       	cpc	r19, r1
     d1e:	79 f4       	brne	.+30     	; 0xd3e <__unpack_f+0xc2>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	19 f4       	brne	.+6      	; 0xd30 <__unpack_f+0xb4>
     d2a:	84 e0       	ldi	r24, 0x04	; 4
     d2c:	8c 93       	st	X, r24
     d2e:	08 95       	ret
     d30:	64 ff       	sbrs	r22, 4
     d32:	03 c0       	rjmp	.+6      	; 0xd3a <__unpack_f+0xbe>
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	8c 93       	st	X, r24
     d38:	12 c0       	rjmp	.+36     	; 0xd5e <__unpack_f+0xe2>
     d3a:	1c 92       	st	X, r1
     d3c:	10 c0       	rjmp	.+32     	; 0xd5e <__unpack_f+0xe2>
     d3e:	2f 57       	subi	r18, 0x7F	; 127
     d40:	30 40       	sbci	r19, 0x00	; 0
     d42:	13 96       	adiw	r26, 0x03	; 3
     d44:	3c 93       	st	X, r19
     d46:	2e 93       	st	-X, r18
     d48:	12 97       	sbiw	r26, 0x02	; 2
     d4a:	83 e0       	ldi	r24, 0x03	; 3
     d4c:	8c 93       	st	X, r24
     d4e:	87 e0       	ldi	r24, 0x07	; 7
     d50:	44 0f       	add	r20, r20
     d52:	55 1f       	adc	r21, r21
     d54:	66 1f       	adc	r22, r22
     d56:	77 1f       	adc	r23, r23
     d58:	8a 95       	dec	r24
     d5a:	d1 f7       	brne	.-12     	; 0xd50 <__unpack_f+0xd4>
     d5c:	70 64       	ori	r23, 0x40	; 64
     d5e:	14 96       	adiw	r26, 0x04	; 4
     d60:	4d 93       	st	X+, r20
     d62:	5d 93       	st	X+, r21
     d64:	6d 93       	st	X+, r22
     d66:	7c 93       	st	X, r23
     d68:	17 97       	sbiw	r26, 0x07	; 7
     d6a:	08 95       	ret

00000d6c <__fpcmp_parts_f>:
     d6c:	1f 93       	push	r17
     d6e:	dc 01       	movw	r26, r24
     d70:	fb 01       	movw	r30, r22
     d72:	9c 91       	ld	r25, X
     d74:	92 30       	cpi	r25, 0x02	; 2
     d76:	08 f4       	brcc	.+2      	; 0xd7a <__fpcmp_parts_f+0xe>
     d78:	47 c0       	rjmp	.+142    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d7a:	80 81       	ld	r24, Z
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	08 f4       	brcc	.+2      	; 0xd82 <__fpcmp_parts_f+0x16>
     d80:	43 c0       	rjmp	.+134    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d82:	94 30       	cpi	r25, 0x04	; 4
     d84:	51 f4       	brne	.+20     	; 0xd9a <__fpcmp_parts_f+0x2e>
     d86:	11 96       	adiw	r26, 0x01	; 1
     d88:	1c 91       	ld	r17, X
     d8a:	84 30       	cpi	r24, 0x04	; 4
     d8c:	99 f5       	brne	.+102    	; 0xdf4 <__fpcmp_parts_f+0x88>
     d8e:	81 81       	ldd	r24, Z+1	; 0x01
     d90:	68 2f       	mov	r22, r24
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	61 1b       	sub	r22, r17
     d96:	71 09       	sbc	r23, r1
     d98:	3f c0       	rjmp	.+126    	; 0xe18 <__fpcmp_parts_f+0xac>
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	21 f0       	breq	.+8      	; 0xda6 <__fpcmp_parts_f+0x3a>
     d9e:	92 30       	cpi	r25, 0x02	; 2
     da0:	31 f4       	brne	.+12     	; 0xdae <__fpcmp_parts_f+0x42>
     da2:	82 30       	cpi	r24, 0x02	; 2
     da4:	b9 f1       	breq	.+110    	; 0xe14 <__fpcmp_parts_f+0xa8>
     da6:	81 81       	ldd	r24, Z+1	; 0x01
     da8:	88 23       	and	r24, r24
     daa:	89 f1       	breq	.+98     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dac:	2d c0       	rjmp	.+90     	; 0xe08 <__fpcmp_parts_f+0x9c>
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	1c 91       	ld	r17, X
     db2:	11 97       	sbiw	r26, 0x01	; 1
     db4:	82 30       	cpi	r24, 0x02	; 2
     db6:	f1 f0       	breq	.+60     	; 0xdf4 <__fpcmp_parts_f+0x88>
     db8:	81 81       	ldd	r24, Z+1	; 0x01
     dba:	18 17       	cp	r17, r24
     dbc:	d9 f4       	brne	.+54     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dbe:	12 96       	adiw	r26, 0x02	; 2
     dc0:	2d 91       	ld	r18, X+
     dc2:	3c 91       	ld	r19, X
     dc4:	13 97       	sbiw	r26, 0x03	; 3
     dc6:	82 81       	ldd	r24, Z+2	; 0x02
     dc8:	93 81       	ldd	r25, Z+3	; 0x03
     dca:	82 17       	cp	r24, r18
     dcc:	93 07       	cpc	r25, r19
     dce:	94 f0       	brlt	.+36     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dd0:	28 17       	cp	r18, r24
     dd2:	39 07       	cpc	r19, r25
     dd4:	bc f0       	brlt	.+46     	; 0xe04 <__fpcmp_parts_f+0x98>
     dd6:	14 96       	adiw	r26, 0x04	; 4
     dd8:	8d 91       	ld	r24, X+
     dda:	9d 91       	ld	r25, X+
     ddc:	0d 90       	ld	r0, X+
     dde:	bc 91       	ld	r27, X
     de0:	a0 2d       	mov	r26, r0
     de2:	24 81       	ldd	r18, Z+4	; 0x04
     de4:	35 81       	ldd	r19, Z+5	; 0x05
     de6:	46 81       	ldd	r20, Z+6	; 0x06
     de8:	57 81       	ldd	r21, Z+7	; 0x07
     dea:	28 17       	cp	r18, r24
     dec:	39 07       	cpc	r19, r25
     dee:	4a 07       	cpc	r20, r26
     df0:	5b 07       	cpc	r21, r27
     df2:	18 f4       	brcc	.+6      	; 0xdfa <__fpcmp_parts_f+0x8e>
     df4:	11 23       	and	r17, r17
     df6:	41 f0       	breq	.+16     	; 0xe08 <__fpcmp_parts_f+0x9c>
     df8:	0a c0       	rjmp	.+20     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dfa:	82 17       	cp	r24, r18
     dfc:	93 07       	cpc	r25, r19
     dfe:	a4 07       	cpc	r26, r20
     e00:	b5 07       	cpc	r27, r21
     e02:	40 f4       	brcc	.+16     	; 0xe14 <__fpcmp_parts_f+0xa8>
     e04:	11 23       	and	r17, r17
     e06:	19 f0       	breq	.+6      	; 0xe0e <__fpcmp_parts_f+0xa2>
     e08:	61 e0       	ldi	r22, 0x01	; 1
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	05 c0       	rjmp	.+10     	; 0xe18 <__fpcmp_parts_f+0xac>
     e0e:	6f ef       	ldi	r22, 0xFF	; 255
     e10:	7f ef       	ldi	r23, 0xFF	; 255
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <__fpcmp_parts_f+0xac>
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	cb 01       	movw	r24, r22
     e1a:	1f 91       	pop	r17
     e1c:	08 95       	ret

00000e1e <ReadySteadyGo>:
#define thumb ADC_u16ReadSteps(ADC_ADC4)
#define index_finger ADC_u16ReadSteps(ADC_ADC5)
#define middle_finger ADC_u16ReadSteps(ADC_ADC6)

void ReadySteadyGo(void)
{
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	cd b7       	in	r28, 0x3d	; 61
     e24:	de b7       	in	r29, 0x3e	; 62
//
//	LCD_voidCMD(_LCD_CLEAR);
//	LCD_voidMatrix(0,0);
//	LCD_voidDisplayStr("GO!!!!");

}
     e26:	cf 91       	pop	r28
     e28:	df 91       	pop	r29
     e2a:	08 95       	ret

00000e2c <GloveSendInit>:

void GloveSendInit(void)
{
     e2c:	0f 93       	push	r16
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	UART_voidInit(9600,UART_PARITY_DISABLED,UART_AsynchronousOperation,UART_STOP_2_BIT);
     e36:	60 e8       	ldi	r22, 0x80	; 128
     e38:	75 e2       	ldi	r23, 0x25	; 37
     e3a:	80 e0       	ldi	r24, 0x00	; 0
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	40 e0       	ldi	r20, 0x00	; 0
     e40:	20 e0       	ldi	r18, 0x00	; 0
     e42:	01 e0       	ldi	r16, 0x01	; 1
     e44:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <UART_voidInit>
//	UART_Init(9600);
//	DC_Motor_voidInit();
	//ADC_voidInit();
	ADC_voidInit(ADC_AVCC);
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <ADC_voidInit>

}
     e4e:	cf 91       	pop	r28
     e50:	df 91       	pop	r29
     e52:	0f 91       	pop	r16
     e54:	08 95       	ret

00000e56 <CarForward_Send>:
void CarForward_Send(void)
{
     e56:	df 93       	push	r29
     e58:	cf 93       	push	r28
     e5a:	cd b7       	in	r28, 0x3d	; 61
     e5c:	de b7       	in	r29, 0x3e	; 62
	UART_voidSendByte('q');
     e5e:	81 e7       	ldi	r24, 0x71	; 113
     e60:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <UART_voidSendByte>
}
     e64:	cf 91       	pop	r28
     e66:	df 91       	pop	r29
     e68:	08 95       	ret

00000e6a <CarForwardFullSpeed_Send>:
void CarForwardFullSpeed_Send(void)
{
     e6a:	df 93       	push	r29
     e6c:	cf 93       	push	r28
     e6e:	cd b7       	in	r28, 0x3d	; 61
     e70:	de b7       	in	r29, 0x3e	; 62
	UART_voidSendByte('w');
     e72:	87 e7       	ldi	r24, 0x77	; 119
     e74:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <UART_voidSendByte>
}
     e78:	cf 91       	pop	r28
     e7a:	df 91       	pop	r29
     e7c:	08 95       	ret

00000e7e <CarBackward_Send>:
void CarBackward_Send(void)
{
     e7e:	df 93       	push	r29
     e80:	cf 93       	push	r28
     e82:	cd b7       	in	r28, 0x3d	; 61
     e84:	de b7       	in	r29, 0x3e	; 62
	UART_voidSendByte('s');
     e86:	83 e7       	ldi	r24, 0x73	; 115
     e88:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <UART_voidSendByte>
}
     e8c:	cf 91       	pop	r28
     e8e:	df 91       	pop	r29
     e90:	08 95       	ret

00000e92 <CarSteerRight_Send>:
void CarSteerRight_Send(void)
{
     e92:	df 93       	push	r29
     e94:	cf 93       	push	r28
     e96:	cd b7       	in	r28, 0x3d	; 61
     e98:	de b7       	in	r29, 0x3e	; 62
	UART_voidSendByte('d');
     e9a:	84 e6       	ldi	r24, 0x64	; 100
     e9c:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <UART_voidSendByte>
}
     ea0:	cf 91       	pop	r28
     ea2:	df 91       	pop	r29
     ea4:	08 95       	ret

00000ea6 <CarSteerLeft_Send>:
void CarSteerLeft_Send(void)
{
     ea6:	df 93       	push	r29
     ea8:	cf 93       	push	r28
     eaa:	cd b7       	in	r28, 0x3d	; 61
     eac:	de b7       	in	r29, 0x3e	; 62
	UART_voidSendByte('a');
     eae:	81 e6       	ldi	r24, 0x61	; 97
     eb0:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <UART_voidSendByte>
}
     eb4:	cf 91       	pop	r28
     eb6:	df 91       	pop	r29
     eb8:	08 95       	ret

00000eba <CarStop_Send>:
void CarStop_Send(void)
{
     eba:	df 93       	push	r29
     ebc:	cf 93       	push	r28
     ebe:	cd b7       	in	r28, 0x3d	; 61
     ec0:	de b7       	in	r29, 0x3e	; 62
	UART_voidSendByte('x');
     ec2:	88 e7       	ldi	r24, 0x78	; 120
     ec4:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <UART_voidSendByte>
}
     ec8:	cf 91       	pop	r28
     eca:	df 91       	pop	r29
     ecc:	08 95       	ret

00000ece <Thumb_IsBent>:

boolean Thumb_IsBent(){
     ece:	df 93       	push	r29
     ed0:	cf 93       	push	r28
     ed2:	0f 92       	push	r0
     ed4:	cd b7       	in	r28, 0x3d	; 61
     ed6:	de b7       	in	r29, 0x3e	; 62
	if(thumb<=min_low_speed && thumb>=max_full_speed){
     ed8:	84 e0       	ldi	r24, 0x04	; 4
     eda:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <ADC_u16ReadSteps>
     ede:	22 e0       	ldi	r18, 0x02	; 2
     ee0:	89 35       	cpi	r24, 0x59	; 89
     ee2:	92 07       	cpc	r25, r18
     ee4:	48 f4       	brcc	.+18     	; 0xef8 <Thumb_IsBent+0x2a>
     ee6:	84 e0       	ldi	r24, 0x04	; 4
     ee8:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <ADC_u16ReadSteps>
     eec:	88 37       	cpi	r24, 0x78	; 120
     eee:	91 05       	cpc	r25, r1
     ef0:	18 f0       	brcs	.+6      	; 0xef8 <Thumb_IsBent+0x2a>
		return 1;
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	89 83       	std	Y+1, r24	; 0x01
     ef6:	01 c0       	rjmp	.+2      	; 0xefa <Thumb_IsBent+0x2c>
	}
	else return 0;
     ef8:	19 82       	std	Y+1, r1	; 0x01
     efa:	89 81       	ldd	r24, Y+1	; 0x01
}
     efc:	0f 90       	pop	r0
     efe:	cf 91       	pop	r28
     f00:	df 91       	pop	r29
     f02:	08 95       	ret

00000f04 <MiddleFinger_IsBent>:

boolean MiddleFinger_IsBent(){
     f04:	df 93       	push	r29
     f06:	cf 93       	push	r28
     f08:	0f 92       	push	r0
     f0a:	cd b7       	in	r28, 0x3d	; 61
     f0c:	de b7       	in	r29, 0x3e	; 62
	if(middle_finger>=min_bent && middle_finger<=max_bent){
     f0e:	86 e0       	ldi	r24, 0x06	; 6
     f10:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <ADC_u16ReadSteps>
     f14:	88 37       	cpi	r24, 0x78	; 120
     f16:	91 05       	cpc	r25, r1
     f18:	50 f0       	brcs	.+20     	; 0xf2e <MiddleFinger_IsBent+0x2a>
     f1a:	86 e0       	ldi	r24, 0x06	; 6
     f1c:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <ADC_u16ReadSteps>
     f20:	22 e0       	ldi	r18, 0x02	; 2
     f22:	89 35       	cpi	r24, 0x59	; 89
     f24:	92 07       	cpc	r25, r18
     f26:	18 f4       	brcc	.+6      	; 0xf2e <MiddleFinger_IsBent+0x2a>
		return 1;
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	89 83       	std	Y+1, r24	; 0x01
     f2c:	01 c0       	rjmp	.+2      	; 0xf30 <MiddleFinger_IsBent+0x2c>
	}
	else return 0;
     f2e:	19 82       	std	Y+1, r1	; 0x01
     f30:	89 81       	ldd	r24, Y+1	; 0x01
}
     f32:	0f 90       	pop	r0
     f34:	cf 91       	pop	r28
     f36:	df 91       	pop	r29
     f38:	08 95       	ret

00000f3a <IndexFinger_IsBent>:

boolean IndexFinger_IsBent(){
     f3a:	df 93       	push	r29
     f3c:	cf 93       	push	r28
     f3e:	0f 92       	push	r0
     f40:	cd b7       	in	r28, 0x3d	; 61
     f42:	de b7       	in	r29, 0x3e	; 62
	if(index_finger>=min_bent && index_finger<=max_bent){
     f44:	85 e0       	ldi	r24, 0x05	; 5
     f46:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <ADC_u16ReadSteps>
     f4a:	88 37       	cpi	r24, 0x78	; 120
     f4c:	91 05       	cpc	r25, r1
     f4e:	50 f0       	brcs	.+20     	; 0xf64 <IndexFinger_IsBent+0x2a>
     f50:	85 e0       	ldi	r24, 0x05	; 5
     f52:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <ADC_u16ReadSteps>
     f56:	22 e0       	ldi	r18, 0x02	; 2
     f58:	89 35       	cpi	r24, 0x59	; 89
     f5a:	92 07       	cpc	r25, r18
     f5c:	18 f4       	brcc	.+6      	; 0xf64 <IndexFinger_IsBent+0x2a>
		return 1;
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	89 83       	std	Y+1, r24	; 0x01
     f62:	01 c0       	rjmp	.+2      	; 0xf66 <IndexFinger_IsBent+0x2c>
	}
	else return 0;
     f64:	19 82       	std	Y+1, r1	; 0x01
     f66:	89 81       	ldd	r24, Y+1	; 0x01
}
     f68:	0f 90       	pop	r0
     f6a:	cf 91       	pop	r28
     f6c:	df 91       	pop	r29
     f6e:	08 95       	ret

00000f70 <Thumb_IsLowSpeed>:

boolean Thumb_IsLowSpeed(){
     f70:	df 93       	push	r29
     f72:	cf 93       	push	r28
     f74:	0f 92       	push	r0
     f76:	cd b7       	in	r28, 0x3d	; 61
     f78:	de b7       	in	r29, 0x3e	; 62
	if(thumb<=min_low_speed && thumb>max_low_speed){
     f7a:	84 e0       	ldi	r24, 0x04	; 4
     f7c:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <ADC_u16ReadSteps>
     f80:	22 e0       	ldi	r18, 0x02	; 2
     f82:	89 35       	cpi	r24, 0x59	; 89
     f84:	92 07       	cpc	r25, r18
     f86:	48 f4       	brcc	.+18     	; 0xf9a <Thumb_IsLowSpeed+0x2a>
     f88:	84 e0       	ldi	r24, 0x04	; 4
     f8a:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <ADC_u16ReadSteps>
     f8e:	89 3c       	cpi	r24, 0xC9	; 201
     f90:	91 05       	cpc	r25, r1
     f92:	18 f0       	brcs	.+6      	; 0xf9a <Thumb_IsLowSpeed+0x2a>
		return 1;
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	89 83       	std	Y+1, r24	; 0x01
     f98:	01 c0       	rjmp	.+2      	; 0xf9c <Thumb_IsLowSpeed+0x2c>
	}
	else return 0;
     f9a:	19 82       	std	Y+1, r1	; 0x01
     f9c:	89 81       	ldd	r24, Y+1	; 0x01
}
     f9e:	0f 90       	pop	r0
     fa0:	cf 91       	pop	r28
     fa2:	df 91       	pop	r29
     fa4:	08 95       	ret

00000fa6 <Thumb_IsFullSpeed>:

boolean Thumb_IsFullSpeed(){
     fa6:	df 93       	push	r29
     fa8:	cf 93       	push	r28
     faa:	0f 92       	push	r0
     fac:	cd b7       	in	r28, 0x3d	; 61
     fae:	de b7       	in	r29, 0x3e	; 62
	if(thumb<=min_full_speed && thumb>max_full_speed){
     fb0:	84 e0       	ldi	r24, 0x04	; 4
     fb2:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <ADC_u16ReadSteps>
     fb6:	21 e0       	ldi	r18, 0x01	; 1
     fb8:	8c 32       	cpi	r24, 0x2C	; 44
     fba:	92 07       	cpc	r25, r18
     fbc:	48 f4       	brcc	.+18     	; 0xfd0 <Thumb_IsFullSpeed+0x2a>
     fbe:	84 e0       	ldi	r24, 0x04	; 4
     fc0:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <ADC_u16ReadSteps>
     fc4:	89 37       	cpi	r24, 0x79	; 121
     fc6:	91 05       	cpc	r25, r1
     fc8:	18 f0       	brcs	.+6      	; 0xfd0 <Thumb_IsFullSpeed+0x2a>
		return 1;
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	89 83       	std	Y+1, r24	; 0x01
     fce:	01 c0       	rjmp	.+2      	; 0xfd2 <Thumb_IsFullSpeed+0x2c>
	}
	else return 0;
     fd0:	19 82       	std	Y+1, r1	; 0x01
     fd2:	89 81       	ldd	r24, Y+1	; 0x01
}
     fd4:	0f 90       	pop	r0
     fd6:	cf 91       	pop	r28
     fd8:	df 91       	pop	r29
     fda:	08 95       	ret

00000fdc <Execute_glove_sender>:

void Execute_glove_sender()
{
     fdc:	df 93       	push	r29
     fde:	cf 93       	push	r28
     fe0:	cd b7       	in	r28, 0x3d	; 61
     fe2:	de b7       	in	r29, 0x3e	; 62
	if(Thumb_IsBent()){
     fe4:	0e 94 67 07 	call	0xece	; 0xece <Thumb_IsBent>
     fe8:	88 23       	and	r24, r24
     fea:	e1 f0       	breq	.+56     	; 0x1024 <Execute_glove_sender+0x48>
		if(MiddleFinger_IsBent())
     fec:	0e 94 82 07 	call	0xf04	; 0xf04 <MiddleFinger_IsBent>
     ff0:	88 23       	and	r24, r24
     ff2:	19 f0       	breq	.+6      	; 0xffa <Execute_glove_sender+0x1e>
		{
			//steer right
			CarSteerRight_Send();
     ff4:	0e 94 49 07 	call	0xe92	; 0xe92 <CarSteerRight_Send>
     ff8:	2e c0       	rjmp	.+92     	; 0x1056 <Execute_glove_sender+0x7a>
			return;
		}
		else if(IndexFinger_IsBent()){
     ffa:	0e 94 9d 07 	call	0xf3a	; 0xf3a <IndexFinger_IsBent>
     ffe:	88 23       	and	r24, r24
    1000:	19 f0       	breq	.+6      	; 0x1008 <Execute_glove_sender+0x2c>
			//steer left
			CarSteerLeft_Send();
    1002:	0e 94 53 07 	call	0xea6	; 0xea6 <CarSteerLeft_Send>
    1006:	27 c0       	rjmp	.+78     	; 0x1056 <Execute_glove_sender+0x7a>
			return;
		}
		else {
			if(Thumb_IsLowSpeed()){
    1008:	0e 94 b8 07 	call	0xf70	; 0xf70 <Thumb_IsLowSpeed>
    100c:	88 23       	and	r24, r24
    100e:	19 f0       	breq	.+6      	; 0x1016 <Execute_glove_sender+0x3a>
				//move forward low speed
				CarForward_Send();
    1010:	0e 94 2b 07 	call	0xe56	; 0xe56 <CarForward_Send>
    1014:	20 c0       	rjmp	.+64     	; 0x1056 <Execute_glove_sender+0x7a>
				return;
			}
			else if(Thumb_IsFullSpeed()){
    1016:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <Thumb_IsFullSpeed>
    101a:	88 23       	and	r24, r24
    101c:	e1 f0       	breq	.+56     	; 0x1056 <Execute_glove_sender+0x7a>
				//move forward full speed
				CarForwardFullSpeed_Send();
    101e:	0e 94 35 07 	call	0xe6a	; 0xe6a <CarForwardFullSpeed_Send>
    1022:	19 c0       	rjmp	.+50     	; 0x1056 <Execute_glove_sender+0x7a>
				return;
			}
		}
	}

	else if(IndexFinger_IsBent()){
    1024:	0e 94 9d 07 	call	0xf3a	; 0xf3a <IndexFinger_IsBent>
    1028:	88 23       	and	r24, r24
    102a:	39 f0       	breq	.+14     	; 0x103a <Execute_glove_sender+0x5e>
		if(MiddleFinger_IsBent()){
    102c:	0e 94 82 07 	call	0xf04	; 0xf04 <MiddleFinger_IsBent>
    1030:	88 23       	and	r24, r24
    1032:	89 f4       	brne	.+34     	; 0x1056 <Execute_glove_sender+0x7a>
//			LED_voidFLASH(LED2);
			return;
		}
		else{
			//backward
			CarBackward_Send();
    1034:	0e 94 3f 07 	call	0xe7e	; 0xe7e <CarBackward_Send>
    1038:	0e c0       	rjmp	.+28     	; 0x1056 <Execute_glove_sender+0x7a>
			return;
		}
	}
	else if(MiddleFinger_IsBent() && (!Thumb_IsBent() && !IndexFinger_IsBent())){
    103a:	0e 94 82 07 	call	0xf04	; 0xf04 <MiddleFinger_IsBent>
    103e:	88 23       	and	r24, r24
    1040:	51 f0       	breq	.+20     	; 0x1056 <Execute_glove_sender+0x7a>
    1042:	0e 94 67 07 	call	0xece	; 0xece <Thumb_IsBent>
    1046:	88 23       	and	r24, r24
    1048:	31 f4       	brne	.+12     	; 0x1056 <Execute_glove_sender+0x7a>
    104a:	0e 94 9d 07 	call	0xf3a	; 0xf3a <IndexFinger_IsBent>
    104e:	88 23       	and	r24, r24
    1050:	11 f4       	brne	.+4      	; 0x1056 <Execute_glove_sender+0x7a>
		//break
		CarStop_Send();
    1052:	0e 94 5d 07 	call	0xeba	; 0xeba <CarStop_Send>
		return;
	}
}
    1056:	cf 91       	pop	r28
    1058:	df 91       	pop	r29
    105a:	08 95       	ret

0000105c <main>:
	 *  Author: Eng_Fawzi
	 ***************************************/
#include "All_includes.h"

int main(void)
{
    105c:	0f 93       	push	r16
    105e:	df 93       	push	r29
    1060:	cf 93       	push	r28
    1062:	cd b7       	in	r28, 0x3d	; 61
    1064:	de b7       	in	r29, 0x3e	; 62
		//initialize needed drivers
		WakeUp_Call();
    1066:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <WakeUp_Call>
		UART_voidInit(9600,UART_PARITY_DISABLED,UART_AsynchronousOperation,UART_STOP_1_BIT);
    106a:	60 e8       	ldi	r22, 0x80	; 128
    106c:	75 e2       	ldi	r23, 0x25	; 37
    106e:	80 e0       	ldi	r24, 0x00	; 0
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	40 e0       	ldi	r20, 0x00	; 0
    1074:	20 e0       	ldi	r18, 0x00	; 0
    1076:	00 e0       	ldi	r16, 0x00	; 0
    1078:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <UART_voidInit>
//		UART_Init(9600);
//		ReadySteadyGo();

		while(1)
		{
			Execute_glove_sender();
    107c:	0e 94 ee 07 	call	0xfdc	; 0xfdc <Execute_glove_sender>
    1080:	fd cf       	rjmp	.-6      	; 0x107c <main+0x20>

00001082 <LCD_voidInit>:




void LCD_voidInit(void)
{
    1082:	df 93       	push	r29
    1084:	cf 93       	push	r28
    1086:	cd b7       	in	r28, 0x3d	; 61
    1088:	de b7       	in	r29, 0x3e	; 62
    108a:	e4 97       	sbiw	r28, 0x34	; 52
    108c:	0f b6       	in	r0, 0x3f	; 63
    108e:	f8 94       	cli
    1090:	de bf       	out	0x3e, r29	; 62
    1092:	0f be       	out	0x3f, r0	; 63
    1094:	cd bf       	out	0x3d, r28	; 61
	//Initialise COntrol Lines
	DIO_voidconfigureChannel(DIO_PORTB,DIO_PIN1,DIO_OUTPUT);
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	61 e0       	ldi	r22, 0x01	; 1
    109a:	41 e0       	ldi	r20, 0x01	; 1
    109c:	0e 94 85 11 	call	0x230a	; 0x230a <DIO_voidconfigureChannel>
	DIO_voidconfigureChannel(DIO_PORTB,DIO_PIN2,DIO_OUTPUT);
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	62 e0       	ldi	r22, 0x02	; 2
    10a4:	41 e0       	ldi	r20, 0x01	; 1
    10a6:	0e 94 85 11 	call	0x230a	; 0x230a <DIO_voidconfigureChannel>
	DIO_voidconfigureChannel(DIO_PORTB,DIO_PIN3,DIO_OUTPUT);
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	63 e0       	ldi	r22, 0x03	; 3
    10ae:	41 e0       	ldi	r20, 0x01	; 1
    10b0:	0e 94 85 11 	call	0x230a	; 0x230a <DIO_voidconfigureChannel>
	//Initialise Data Lines
	DIO_voidconfigureChannel(DIO_PORTA,DIO_PIN4,DIO_OUTPUT);
    10b4:	80 e0       	ldi	r24, 0x00	; 0
    10b6:	64 e0       	ldi	r22, 0x04	; 4
    10b8:	41 e0       	ldi	r20, 0x01	; 1
    10ba:	0e 94 85 11 	call	0x230a	; 0x230a <DIO_voidconfigureChannel>
	DIO_voidconfigureChannel(DIO_PORTA,DIO_PIN5,DIO_OUTPUT);
    10be:	80 e0       	ldi	r24, 0x00	; 0
    10c0:	65 e0       	ldi	r22, 0x05	; 5
    10c2:	41 e0       	ldi	r20, 0x01	; 1
    10c4:	0e 94 85 11 	call	0x230a	; 0x230a <DIO_voidconfigureChannel>
	DIO_voidconfigureChannel(DIO_PORTA,DIO_PIN6,DIO_OUTPUT);
    10c8:	80 e0       	ldi	r24, 0x00	; 0
    10ca:	66 e0       	ldi	r22, 0x06	; 6
    10cc:	41 e0       	ldi	r20, 0x01	; 1
    10ce:	0e 94 85 11 	call	0x230a	; 0x230a <DIO_voidconfigureChannel>
	DIO_voidconfigureChannel(DIO_PORTA,DIO_PIN7,DIO_OUTPUT);
    10d2:	80 e0       	ldi	r24, 0x00	; 0
    10d4:	67 e0       	ldi	r22, 0x07	; 7
    10d6:	41 e0       	ldi	r20, 0x01	; 1
    10d8:	0e 94 85 11 	call	0x230a	; 0x230a <DIO_voidconfigureChannel>
	//RW = 0
	DIO_voidWRITEChannel(DIO_PORTB,DIO_PIN2,DIO_LOW);
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	62 e0       	ldi	r22, 0x02	; 2
    10e0:	40 e0       	ldi	r20, 0x00	; 0
    10e2:	0e 94 68 12 	call	0x24d0	; 0x24d0 <DIO_voidWRITEChannel>
    10e6:	80 e0       	ldi	r24, 0x00	; 0
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	a0 e7       	ldi	r26, 0x70	; 112
    10ec:	b1 e4       	ldi	r27, 0x41	; 65
    10ee:	89 ab       	std	Y+49, r24	; 0x31
    10f0:	9a ab       	std	Y+50, r25	; 0x32
    10f2:	ab ab       	std	Y+51, r26	; 0x33
    10f4:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10f6:	69 a9       	ldd	r22, Y+49	; 0x31
    10f8:	7a a9       	ldd	r23, Y+50	; 0x32
    10fa:	8b a9       	ldd	r24, Y+51	; 0x33
    10fc:	9c a9       	ldd	r25, Y+52	; 0x34
    10fe:	20 e0       	ldi	r18, 0x00	; 0
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	4a e7       	ldi	r20, 0x7A	; 122
    1104:	55 e4       	ldi	r21, 0x45	; 69
    1106:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    110a:	dc 01       	movw	r26, r24
    110c:	cb 01       	movw	r24, r22
    110e:	8d a7       	std	Y+45, r24	; 0x2d
    1110:	9e a7       	std	Y+46, r25	; 0x2e
    1112:	af a7       	std	Y+47, r26	; 0x2f
    1114:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    1116:	6d a5       	ldd	r22, Y+45	; 0x2d
    1118:	7e a5       	ldd	r23, Y+46	; 0x2e
    111a:	8f a5       	ldd	r24, Y+47	; 0x2f
    111c:	98 a9       	ldd	r25, Y+48	; 0x30
    111e:	20 e0       	ldi	r18, 0x00	; 0
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	40 e8       	ldi	r20, 0x80	; 128
    1124:	5f e3       	ldi	r21, 0x3F	; 63
    1126:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    112a:	88 23       	and	r24, r24
    112c:	2c f4       	brge	.+10     	; 0x1138 <LCD_voidInit+0xb6>
		__ticks = 1;
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	9c a7       	std	Y+44, r25	; 0x2c
    1134:	8b a7       	std	Y+43, r24	; 0x2b
    1136:	3f c0       	rjmp	.+126    	; 0x11b6 <LCD_voidInit+0x134>
	else if (__tmp > 65535)
    1138:	6d a5       	ldd	r22, Y+45	; 0x2d
    113a:	7e a5       	ldd	r23, Y+46	; 0x2e
    113c:	8f a5       	ldd	r24, Y+47	; 0x2f
    113e:	98 a9       	ldd	r25, Y+48	; 0x30
    1140:	20 e0       	ldi	r18, 0x00	; 0
    1142:	3f ef       	ldi	r19, 0xFF	; 255
    1144:	4f e7       	ldi	r20, 0x7F	; 127
    1146:	57 e4       	ldi	r21, 0x47	; 71
    1148:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    114c:	18 16       	cp	r1, r24
    114e:	4c f5       	brge	.+82     	; 0x11a2 <LCD_voidInit+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1150:	69 a9       	ldd	r22, Y+49	; 0x31
    1152:	7a a9       	ldd	r23, Y+50	; 0x32
    1154:	8b a9       	ldd	r24, Y+51	; 0x33
    1156:	9c a9       	ldd	r25, Y+52	; 0x34
    1158:	20 e0       	ldi	r18, 0x00	; 0
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	40 e2       	ldi	r20, 0x20	; 32
    115e:	51 e4       	ldi	r21, 0x41	; 65
    1160:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1164:	dc 01       	movw	r26, r24
    1166:	cb 01       	movw	r24, r22
    1168:	bc 01       	movw	r22, r24
    116a:	cd 01       	movw	r24, r26
    116c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1170:	dc 01       	movw	r26, r24
    1172:	cb 01       	movw	r24, r22
    1174:	9c a7       	std	Y+44, r25	; 0x2c
    1176:	8b a7       	std	Y+43, r24	; 0x2b
    1178:	0f c0       	rjmp	.+30     	; 0x1198 <LCD_voidInit+0x116>
    117a:	80 e9       	ldi	r24, 0x90	; 144
    117c:	91 e0       	ldi	r25, 0x01	; 1
    117e:	9a a7       	std	Y+42, r25	; 0x2a
    1180:	89 a7       	std	Y+41, r24	; 0x29
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1182:	89 a5       	ldd	r24, Y+41	; 0x29
    1184:	9a a5       	ldd	r25, Y+42	; 0x2a
    1186:	01 97       	sbiw	r24, 0x01	; 1
    1188:	f1 f7       	brne	.-4      	; 0x1186 <LCD_voidInit+0x104>
    118a:	9a a7       	std	Y+42, r25	; 0x2a
    118c:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    118e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1190:	9c a5       	ldd	r25, Y+44	; 0x2c
    1192:	01 97       	sbiw	r24, 0x01	; 1
    1194:	9c a7       	std	Y+44, r25	; 0x2c
    1196:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1198:	8b a5       	ldd	r24, Y+43	; 0x2b
    119a:	9c a5       	ldd	r25, Y+44	; 0x2c
    119c:	00 97       	sbiw	r24, 0x00	; 0
    119e:	69 f7       	brne	.-38     	; 0x117a <LCD_voidInit+0xf8>
    11a0:	14 c0       	rjmp	.+40     	; 0x11ca <LCD_voidInit+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11a2:	6d a5       	ldd	r22, Y+45	; 0x2d
    11a4:	7e a5       	ldd	r23, Y+46	; 0x2e
    11a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    11a8:	98 a9       	ldd	r25, Y+48	; 0x30
    11aa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11ae:	dc 01       	movw	r26, r24
    11b0:	cb 01       	movw	r24, r22
    11b2:	9c a7       	std	Y+44, r25	; 0x2c
    11b4:	8b a7       	std	Y+43, r24	; 0x2b
    11b6:	8b a5       	ldd	r24, Y+43	; 0x2b
    11b8:	9c a5       	ldd	r25, Y+44	; 0x2c
    11ba:	98 a7       	std	Y+40, r25	; 0x28
    11bc:	8f a3       	std	Y+39, r24	; 0x27
    11be:	8f a1       	ldd	r24, Y+39	; 0x27
    11c0:	98 a5       	ldd	r25, Y+40	; 0x28
    11c2:	01 97       	sbiw	r24, 0x01	; 1
    11c4:	f1 f7       	brne	.-4      	; 0x11c2 <LCD_voidInit+0x140>
    11c6:	98 a7       	std	Y+40, r25	; 0x28
    11c8:	8f a3       	std	Y+39, r24	; 0x27

	//initialisation steps on data sheet
	_delay_ms(15);
	LCD_voidCMD(0x30);
    11ca:	80 e3       	ldi	r24, 0x30	; 48
    11cc:	0e 94 1a 0c 	call	0x1834	; 0x1834 <LCD_voidCMD>
    11d0:	80 e0       	ldi	r24, 0x00	; 0
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	a0 ea       	ldi	r26, 0xA0	; 160
    11d6:	b0 e4       	ldi	r27, 0x40	; 64
    11d8:	8b a3       	std	Y+35, r24	; 0x23
    11da:	9c a3       	std	Y+36, r25	; 0x24
    11dc:	ad a3       	std	Y+37, r26	; 0x25
    11de:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11e0:	6b a1       	ldd	r22, Y+35	; 0x23
    11e2:	7c a1       	ldd	r23, Y+36	; 0x24
    11e4:	8d a1       	ldd	r24, Y+37	; 0x25
    11e6:	9e a1       	ldd	r25, Y+38	; 0x26
    11e8:	20 e0       	ldi	r18, 0x00	; 0
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	4a e7       	ldi	r20, 0x7A	; 122
    11ee:	55 e4       	ldi	r21, 0x45	; 69
    11f0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11f4:	dc 01       	movw	r26, r24
    11f6:	cb 01       	movw	r24, r22
    11f8:	8f 8f       	std	Y+31, r24	; 0x1f
    11fa:	98 a3       	std	Y+32, r25	; 0x20
    11fc:	a9 a3       	std	Y+33, r26	; 0x21
    11fe:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1200:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1202:	78 a1       	ldd	r23, Y+32	; 0x20
    1204:	89 a1       	ldd	r24, Y+33	; 0x21
    1206:	9a a1       	ldd	r25, Y+34	; 0x22
    1208:	20 e0       	ldi	r18, 0x00	; 0
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	40 e8       	ldi	r20, 0x80	; 128
    120e:	5f e3       	ldi	r21, 0x3F	; 63
    1210:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1214:	88 23       	and	r24, r24
    1216:	2c f4       	brge	.+10     	; 0x1222 <LCD_voidInit+0x1a0>
		__ticks = 1;
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	9e 8f       	std	Y+30, r25	; 0x1e
    121e:	8d 8f       	std	Y+29, r24	; 0x1d
    1220:	3f c0       	rjmp	.+126    	; 0x12a0 <LCD_voidInit+0x21e>
	else if (__tmp > 65535)
    1222:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1224:	78 a1       	ldd	r23, Y+32	; 0x20
    1226:	89 a1       	ldd	r24, Y+33	; 0x21
    1228:	9a a1       	ldd	r25, Y+34	; 0x22
    122a:	20 e0       	ldi	r18, 0x00	; 0
    122c:	3f ef       	ldi	r19, 0xFF	; 255
    122e:	4f e7       	ldi	r20, 0x7F	; 127
    1230:	57 e4       	ldi	r21, 0x47	; 71
    1232:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1236:	18 16       	cp	r1, r24
    1238:	4c f5       	brge	.+82     	; 0x128c <LCD_voidInit+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    123a:	6b a1       	ldd	r22, Y+35	; 0x23
    123c:	7c a1       	ldd	r23, Y+36	; 0x24
    123e:	8d a1       	ldd	r24, Y+37	; 0x25
    1240:	9e a1       	ldd	r25, Y+38	; 0x26
    1242:	20 e0       	ldi	r18, 0x00	; 0
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	40 e2       	ldi	r20, 0x20	; 32
    1248:	51 e4       	ldi	r21, 0x41	; 65
    124a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    124e:	dc 01       	movw	r26, r24
    1250:	cb 01       	movw	r24, r22
    1252:	bc 01       	movw	r22, r24
    1254:	cd 01       	movw	r24, r26
    1256:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    125a:	dc 01       	movw	r26, r24
    125c:	cb 01       	movw	r24, r22
    125e:	9e 8f       	std	Y+30, r25	; 0x1e
    1260:	8d 8f       	std	Y+29, r24	; 0x1d
    1262:	0f c0       	rjmp	.+30     	; 0x1282 <LCD_voidInit+0x200>
    1264:	80 e9       	ldi	r24, 0x90	; 144
    1266:	91 e0       	ldi	r25, 0x01	; 1
    1268:	9c 8f       	std	Y+28, r25	; 0x1c
    126a:	8b 8f       	std	Y+27, r24	; 0x1b
    126c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    126e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1270:	01 97       	sbiw	r24, 0x01	; 1
    1272:	f1 f7       	brne	.-4      	; 0x1270 <LCD_voidInit+0x1ee>
    1274:	9c 8f       	std	Y+28, r25	; 0x1c
    1276:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1278:	8d 8d       	ldd	r24, Y+29	; 0x1d
    127a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    127c:	01 97       	sbiw	r24, 0x01	; 1
    127e:	9e 8f       	std	Y+30, r25	; 0x1e
    1280:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1282:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1284:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1286:	00 97       	sbiw	r24, 0x00	; 0
    1288:	69 f7       	brne	.-38     	; 0x1264 <LCD_voidInit+0x1e2>
    128a:	14 c0       	rjmp	.+40     	; 0x12b4 <LCD_voidInit+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    128c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    128e:	78 a1       	ldd	r23, Y+32	; 0x20
    1290:	89 a1       	ldd	r24, Y+33	; 0x21
    1292:	9a a1       	ldd	r25, Y+34	; 0x22
    1294:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1298:	dc 01       	movw	r26, r24
    129a:	cb 01       	movw	r24, r22
    129c:	9e 8f       	std	Y+30, r25	; 0x1e
    129e:	8d 8f       	std	Y+29, r24	; 0x1d
    12a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12a2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    12a4:	9a 8f       	std	Y+26, r25	; 0x1a
    12a6:	89 8f       	std	Y+25, r24	; 0x19
    12a8:	89 8d       	ldd	r24, Y+25	; 0x19
    12aa:	9a 8d       	ldd	r25, Y+26	; 0x1a
    12ac:	01 97       	sbiw	r24, 0x01	; 1
    12ae:	f1 f7       	brne	.-4      	; 0x12ac <LCD_voidInit+0x22a>
    12b0:	9a 8f       	std	Y+26, r25	; 0x1a
    12b2:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms(5);
	LCD_voidCMD(0x30);
    12b4:	80 e3       	ldi	r24, 0x30	; 48
    12b6:	0e 94 1a 0c 	call	0x1834	; 0x1834 <LCD_voidCMD>
    12ba:	80 e0       	ldi	r24, 0x00	; 0
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	a8 ec       	ldi	r26, 0xC8	; 200
    12c0:	b2 e4       	ldi	r27, 0x42	; 66
    12c2:	8d 8b       	std	Y+21, r24	; 0x15
    12c4:	9e 8b       	std	Y+22, r25	; 0x16
    12c6:	af 8b       	std	Y+23, r26	; 0x17
    12c8:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    12ca:	6d 89       	ldd	r22, Y+21	; 0x15
    12cc:	7e 89       	ldd	r23, Y+22	; 0x16
    12ce:	8f 89       	ldd	r24, Y+23	; 0x17
    12d0:	98 8d       	ldd	r25, Y+24	; 0x18
    12d2:	2b ea       	ldi	r18, 0xAB	; 171
    12d4:	3a ea       	ldi	r19, 0xAA	; 170
    12d6:	4a ea       	ldi	r20, 0xAA	; 170
    12d8:	50 e4       	ldi	r21, 0x40	; 64
    12da:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12de:	dc 01       	movw	r26, r24
    12e0:	cb 01       	movw	r24, r22
    12e2:	89 8b       	std	Y+17, r24	; 0x11
    12e4:	9a 8b       	std	Y+18, r25	; 0x12
    12e6:	ab 8b       	std	Y+19, r26	; 0x13
    12e8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    12ea:	69 89       	ldd	r22, Y+17	; 0x11
    12ec:	7a 89       	ldd	r23, Y+18	; 0x12
    12ee:	8b 89       	ldd	r24, Y+19	; 0x13
    12f0:	9c 89       	ldd	r25, Y+20	; 0x14
    12f2:	20 e0       	ldi	r18, 0x00	; 0
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	40 e8       	ldi	r20, 0x80	; 128
    12f8:	5f e3       	ldi	r21, 0x3F	; 63
    12fa:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    12fe:	88 23       	and	r24, r24
    1300:	1c f4       	brge	.+6      	; 0x1308 <LCD_voidInit+0x286>
		__ticks = 1;
    1302:	81 e0       	ldi	r24, 0x01	; 1
    1304:	88 8b       	std	Y+16, r24	; 0x10
    1306:	91 c0       	rjmp	.+290    	; 0x142a <LCD_voidInit+0x3a8>
	else if (__tmp > 255)
    1308:	69 89       	ldd	r22, Y+17	; 0x11
    130a:	7a 89       	ldd	r23, Y+18	; 0x12
    130c:	8b 89       	ldd	r24, Y+19	; 0x13
    130e:	9c 89       	ldd	r25, Y+20	; 0x14
    1310:	20 e0       	ldi	r18, 0x00	; 0
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	4f e7       	ldi	r20, 0x7F	; 127
    1316:	53 e4       	ldi	r21, 0x43	; 67
    1318:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    131c:	18 16       	cp	r1, r24
    131e:	0c f0       	brlt	.+2      	; 0x1322 <LCD_voidInit+0x2a0>
    1320:	7b c0       	rjmp	.+246    	; 0x1418 <LCD_voidInit+0x396>
	{
		_delay_ms(__us / 1000.0);
    1322:	6d 89       	ldd	r22, Y+21	; 0x15
    1324:	7e 89       	ldd	r23, Y+22	; 0x16
    1326:	8f 89       	ldd	r24, Y+23	; 0x17
    1328:	98 8d       	ldd	r25, Y+24	; 0x18
    132a:	20 e0       	ldi	r18, 0x00	; 0
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	4a e7       	ldi	r20, 0x7A	; 122
    1330:	54 e4       	ldi	r21, 0x44	; 68
    1332:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1336:	dc 01       	movw	r26, r24
    1338:	cb 01       	movw	r24, r22
    133a:	8c 87       	std	Y+12, r24	; 0x0c
    133c:	9d 87       	std	Y+13, r25	; 0x0d
    133e:	ae 87       	std	Y+14, r26	; 0x0e
    1340:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1342:	6c 85       	ldd	r22, Y+12	; 0x0c
    1344:	7d 85       	ldd	r23, Y+13	; 0x0d
    1346:	8e 85       	ldd	r24, Y+14	; 0x0e
    1348:	9f 85       	ldd	r25, Y+15	; 0x0f
    134a:	20 e0       	ldi	r18, 0x00	; 0
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	4a e7       	ldi	r20, 0x7A	; 122
    1350:	55 e4       	ldi	r21, 0x45	; 69
    1352:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1356:	dc 01       	movw	r26, r24
    1358:	cb 01       	movw	r24, r22
    135a:	88 87       	std	Y+8, r24	; 0x08
    135c:	99 87       	std	Y+9, r25	; 0x09
    135e:	aa 87       	std	Y+10, r26	; 0x0a
    1360:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1362:	68 85       	ldd	r22, Y+8	; 0x08
    1364:	79 85       	ldd	r23, Y+9	; 0x09
    1366:	8a 85       	ldd	r24, Y+10	; 0x0a
    1368:	9b 85       	ldd	r25, Y+11	; 0x0b
    136a:	20 e0       	ldi	r18, 0x00	; 0
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	40 e8       	ldi	r20, 0x80	; 128
    1370:	5f e3       	ldi	r21, 0x3F	; 63
    1372:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1376:	88 23       	and	r24, r24
    1378:	2c f4       	brge	.+10     	; 0x1384 <LCD_voidInit+0x302>
		__ticks = 1;
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	9f 83       	std	Y+7, r25	; 0x07
    1380:	8e 83       	std	Y+6, r24	; 0x06
    1382:	3f c0       	rjmp	.+126    	; 0x1402 <LCD_voidInit+0x380>
	else if (__tmp > 65535)
    1384:	68 85       	ldd	r22, Y+8	; 0x08
    1386:	79 85       	ldd	r23, Y+9	; 0x09
    1388:	8a 85       	ldd	r24, Y+10	; 0x0a
    138a:	9b 85       	ldd	r25, Y+11	; 0x0b
    138c:	20 e0       	ldi	r18, 0x00	; 0
    138e:	3f ef       	ldi	r19, 0xFF	; 255
    1390:	4f e7       	ldi	r20, 0x7F	; 127
    1392:	57 e4       	ldi	r21, 0x47	; 71
    1394:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1398:	18 16       	cp	r1, r24
    139a:	4c f5       	brge	.+82     	; 0x13ee <LCD_voidInit+0x36c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    139c:	6c 85       	ldd	r22, Y+12	; 0x0c
    139e:	7d 85       	ldd	r23, Y+13	; 0x0d
    13a0:	8e 85       	ldd	r24, Y+14	; 0x0e
    13a2:	9f 85       	ldd	r25, Y+15	; 0x0f
    13a4:	20 e0       	ldi	r18, 0x00	; 0
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	40 e2       	ldi	r20, 0x20	; 32
    13aa:	51 e4       	ldi	r21, 0x41	; 65
    13ac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13b0:	dc 01       	movw	r26, r24
    13b2:	cb 01       	movw	r24, r22
    13b4:	bc 01       	movw	r22, r24
    13b6:	cd 01       	movw	r24, r26
    13b8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13bc:	dc 01       	movw	r26, r24
    13be:	cb 01       	movw	r24, r22
    13c0:	9f 83       	std	Y+7, r25	; 0x07
    13c2:	8e 83       	std	Y+6, r24	; 0x06
    13c4:	0f c0       	rjmp	.+30     	; 0x13e4 <LCD_voidInit+0x362>
    13c6:	80 e9       	ldi	r24, 0x90	; 144
    13c8:	91 e0       	ldi	r25, 0x01	; 1
    13ca:	9d 83       	std	Y+5, r25	; 0x05
    13cc:	8c 83       	std	Y+4, r24	; 0x04
    13ce:	8c 81       	ldd	r24, Y+4	; 0x04
    13d0:	9d 81       	ldd	r25, Y+5	; 0x05
    13d2:	01 97       	sbiw	r24, 0x01	; 1
    13d4:	f1 f7       	brne	.-4      	; 0x13d2 <LCD_voidInit+0x350>
    13d6:	9d 83       	std	Y+5, r25	; 0x05
    13d8:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13da:	8e 81       	ldd	r24, Y+6	; 0x06
    13dc:	9f 81       	ldd	r25, Y+7	; 0x07
    13de:	01 97       	sbiw	r24, 0x01	; 1
    13e0:	9f 83       	std	Y+7, r25	; 0x07
    13e2:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13e4:	8e 81       	ldd	r24, Y+6	; 0x06
    13e6:	9f 81       	ldd	r25, Y+7	; 0x07
    13e8:	00 97       	sbiw	r24, 0x00	; 0
    13ea:	69 f7       	brne	.-38     	; 0x13c6 <LCD_voidInit+0x344>
    13ec:	24 c0       	rjmp	.+72     	; 0x1436 <LCD_voidInit+0x3b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13ee:	68 85       	ldd	r22, Y+8	; 0x08
    13f0:	79 85       	ldd	r23, Y+9	; 0x09
    13f2:	8a 85       	ldd	r24, Y+10	; 0x0a
    13f4:	9b 85       	ldd	r25, Y+11	; 0x0b
    13f6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13fa:	dc 01       	movw	r26, r24
    13fc:	cb 01       	movw	r24, r22
    13fe:	9f 83       	std	Y+7, r25	; 0x07
    1400:	8e 83       	std	Y+6, r24	; 0x06
    1402:	8e 81       	ldd	r24, Y+6	; 0x06
    1404:	9f 81       	ldd	r25, Y+7	; 0x07
    1406:	9b 83       	std	Y+3, r25	; 0x03
    1408:	8a 83       	std	Y+2, r24	; 0x02
    140a:	8a 81       	ldd	r24, Y+2	; 0x02
    140c:	9b 81       	ldd	r25, Y+3	; 0x03
    140e:	01 97       	sbiw	r24, 0x01	; 1
    1410:	f1 f7       	brne	.-4      	; 0x140e <LCD_voidInit+0x38c>
    1412:	9b 83       	std	Y+3, r25	; 0x03
    1414:	8a 83       	std	Y+2, r24	; 0x02
    1416:	0f c0       	rjmp	.+30     	; 0x1436 <LCD_voidInit+0x3b4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1418:	69 89       	ldd	r22, Y+17	; 0x11
    141a:	7a 89       	ldd	r23, Y+18	; 0x12
    141c:	8b 89       	ldd	r24, Y+19	; 0x13
    141e:	9c 89       	ldd	r25, Y+20	; 0x14
    1420:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1424:	dc 01       	movw	r26, r24
    1426:	cb 01       	movw	r24, r22
    1428:	88 8b       	std	Y+16, r24	; 0x10
    142a:	88 89       	ldd	r24, Y+16	; 0x10
    142c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    142e:	89 81       	ldd	r24, Y+1	; 0x01
    1430:	8a 95       	dec	r24
    1432:	f1 f7       	brne	.-4      	; 0x1430 <LCD_voidInit+0x3ae>
    1434:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
	LCD_voidCMD(0x03);
    1436:	83 e0       	ldi	r24, 0x03	; 3
    1438:	0e 94 1a 0c 	call	0x1834	; 0x1834 <LCD_voidCMD>
	LCD_voidCMD(0x02);
    143c:	82 e0       	ldi	r24, 0x02	; 2
    143e:	0e 94 1a 0c 	call	0x1834	; 0x1834 <LCD_voidCMD>
	LCD_voidCMD(_LCD_4BIT_MODE);
    1442:	88 e2       	ldi	r24, 0x28	; 40
    1444:	0e 94 1a 0c 	call	0x1834	; 0x1834 <LCD_voidCMD>

}
    1448:	e4 96       	adiw	r28, 0x34	; 52
    144a:	0f b6       	in	r0, 0x3f	; 63
    144c:	f8 94       	cli
    144e:	de bf       	out	0x3e, r29	; 62
    1450:	0f be       	out	0x3f, r0	; 63
    1452:	cd bf       	out	0x3d, r28	; 61
    1454:	cf 91       	pop	r28
    1456:	df 91       	pop	r29
    1458:	08 95       	ret

0000145a <Pulse>:
static void Pulse(void)
{
    145a:	df 93       	push	r29
    145c:	cf 93       	push	r28
    145e:	cd b7       	in	r28, 0x3d	; 61
    1460:	de b7       	in	r29, 0x3e	; 62
    1462:	68 97       	sbiw	r28, 0x18	; 24
    1464:	0f b6       	in	r0, 0x3f	; 63
    1466:	f8 94       	cli
    1468:	de bf       	out	0x3e, r29	; 62
    146a:	0f be       	out	0x3f, r0	; 63
    146c:	cd bf       	out	0x3d, r28	; 61
	//send Enable pulse
	DIO_voidWRITEChannel(DIO_PORTB,DIO_PIN3,DIO_HIGH);
    146e:	81 e0       	ldi	r24, 0x01	; 1
    1470:	63 e0       	ldi	r22, 0x03	; 3
    1472:	41 e0       	ldi	r20, 0x01	; 1
    1474:	0e 94 68 12 	call	0x24d0	; 0x24d0 <DIO_voidWRITEChannel>
    1478:	80 e0       	ldi	r24, 0x00	; 0
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	a0 e8       	ldi	r26, 0x80	; 128
    147e:	bf e3       	ldi	r27, 0x3F	; 63
    1480:	8d 8b       	std	Y+21, r24	; 0x15
    1482:	9e 8b       	std	Y+22, r25	; 0x16
    1484:	af 8b       	std	Y+23, r26	; 0x17
    1486:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1488:	6d 89       	ldd	r22, Y+21	; 0x15
    148a:	7e 89       	ldd	r23, Y+22	; 0x16
    148c:	8f 89       	ldd	r24, Y+23	; 0x17
    148e:	98 8d       	ldd	r25, Y+24	; 0x18
    1490:	2b ea       	ldi	r18, 0xAB	; 171
    1492:	3a ea       	ldi	r19, 0xAA	; 170
    1494:	4a ea       	ldi	r20, 0xAA	; 170
    1496:	50 e4       	ldi	r21, 0x40	; 64
    1498:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    149c:	dc 01       	movw	r26, r24
    149e:	cb 01       	movw	r24, r22
    14a0:	89 8b       	std	Y+17, r24	; 0x11
    14a2:	9a 8b       	std	Y+18, r25	; 0x12
    14a4:	ab 8b       	std	Y+19, r26	; 0x13
    14a6:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    14a8:	69 89       	ldd	r22, Y+17	; 0x11
    14aa:	7a 89       	ldd	r23, Y+18	; 0x12
    14ac:	8b 89       	ldd	r24, Y+19	; 0x13
    14ae:	9c 89       	ldd	r25, Y+20	; 0x14
    14b0:	20 e0       	ldi	r18, 0x00	; 0
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	40 e8       	ldi	r20, 0x80	; 128
    14b6:	5f e3       	ldi	r21, 0x3F	; 63
    14b8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    14bc:	88 23       	and	r24, r24
    14be:	1c f4       	brge	.+6      	; 0x14c6 <Pulse+0x6c>
		__ticks = 1;
    14c0:	81 e0       	ldi	r24, 0x01	; 1
    14c2:	88 8b       	std	Y+16, r24	; 0x10
    14c4:	91 c0       	rjmp	.+290    	; 0x15e8 <Pulse+0x18e>
	else if (__tmp > 255)
    14c6:	69 89       	ldd	r22, Y+17	; 0x11
    14c8:	7a 89       	ldd	r23, Y+18	; 0x12
    14ca:	8b 89       	ldd	r24, Y+19	; 0x13
    14cc:	9c 89       	ldd	r25, Y+20	; 0x14
    14ce:	20 e0       	ldi	r18, 0x00	; 0
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	4f e7       	ldi	r20, 0x7F	; 127
    14d4:	53 e4       	ldi	r21, 0x43	; 67
    14d6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    14da:	18 16       	cp	r1, r24
    14dc:	0c f0       	brlt	.+2      	; 0x14e0 <Pulse+0x86>
    14de:	7b c0       	rjmp	.+246    	; 0x15d6 <Pulse+0x17c>
	{
		_delay_ms(__us / 1000.0);
    14e0:	6d 89       	ldd	r22, Y+21	; 0x15
    14e2:	7e 89       	ldd	r23, Y+22	; 0x16
    14e4:	8f 89       	ldd	r24, Y+23	; 0x17
    14e6:	98 8d       	ldd	r25, Y+24	; 0x18
    14e8:	20 e0       	ldi	r18, 0x00	; 0
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	4a e7       	ldi	r20, 0x7A	; 122
    14ee:	54 e4       	ldi	r21, 0x44	; 68
    14f0:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    14f4:	dc 01       	movw	r26, r24
    14f6:	cb 01       	movw	r24, r22
    14f8:	8c 87       	std	Y+12, r24	; 0x0c
    14fa:	9d 87       	std	Y+13, r25	; 0x0d
    14fc:	ae 87       	std	Y+14, r26	; 0x0e
    14fe:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1500:	6c 85       	ldd	r22, Y+12	; 0x0c
    1502:	7d 85       	ldd	r23, Y+13	; 0x0d
    1504:	8e 85       	ldd	r24, Y+14	; 0x0e
    1506:	9f 85       	ldd	r25, Y+15	; 0x0f
    1508:	20 e0       	ldi	r18, 0x00	; 0
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	4a e7       	ldi	r20, 0x7A	; 122
    150e:	55 e4       	ldi	r21, 0x45	; 69
    1510:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1514:	dc 01       	movw	r26, r24
    1516:	cb 01       	movw	r24, r22
    1518:	88 87       	std	Y+8, r24	; 0x08
    151a:	99 87       	std	Y+9, r25	; 0x09
    151c:	aa 87       	std	Y+10, r26	; 0x0a
    151e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1520:	68 85       	ldd	r22, Y+8	; 0x08
    1522:	79 85       	ldd	r23, Y+9	; 0x09
    1524:	8a 85       	ldd	r24, Y+10	; 0x0a
    1526:	9b 85       	ldd	r25, Y+11	; 0x0b
    1528:	20 e0       	ldi	r18, 0x00	; 0
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	40 e8       	ldi	r20, 0x80	; 128
    152e:	5f e3       	ldi	r21, 0x3F	; 63
    1530:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1534:	88 23       	and	r24, r24
    1536:	2c f4       	brge	.+10     	; 0x1542 <Pulse+0xe8>
		__ticks = 1;
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	9f 83       	std	Y+7, r25	; 0x07
    153e:	8e 83       	std	Y+6, r24	; 0x06
    1540:	3f c0       	rjmp	.+126    	; 0x15c0 <Pulse+0x166>
	else if (__tmp > 65535)
    1542:	68 85       	ldd	r22, Y+8	; 0x08
    1544:	79 85       	ldd	r23, Y+9	; 0x09
    1546:	8a 85       	ldd	r24, Y+10	; 0x0a
    1548:	9b 85       	ldd	r25, Y+11	; 0x0b
    154a:	20 e0       	ldi	r18, 0x00	; 0
    154c:	3f ef       	ldi	r19, 0xFF	; 255
    154e:	4f e7       	ldi	r20, 0x7F	; 127
    1550:	57 e4       	ldi	r21, 0x47	; 71
    1552:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1556:	18 16       	cp	r1, r24
    1558:	4c f5       	brge	.+82     	; 0x15ac <Pulse+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    155a:	6c 85       	ldd	r22, Y+12	; 0x0c
    155c:	7d 85       	ldd	r23, Y+13	; 0x0d
    155e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1560:	9f 85       	ldd	r25, Y+15	; 0x0f
    1562:	20 e0       	ldi	r18, 0x00	; 0
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	40 e2       	ldi	r20, 0x20	; 32
    1568:	51 e4       	ldi	r21, 0x41	; 65
    156a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    156e:	dc 01       	movw	r26, r24
    1570:	cb 01       	movw	r24, r22
    1572:	bc 01       	movw	r22, r24
    1574:	cd 01       	movw	r24, r26
    1576:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    157a:	dc 01       	movw	r26, r24
    157c:	cb 01       	movw	r24, r22
    157e:	9f 83       	std	Y+7, r25	; 0x07
    1580:	8e 83       	std	Y+6, r24	; 0x06
    1582:	0f c0       	rjmp	.+30     	; 0x15a2 <Pulse+0x148>
    1584:	80 e9       	ldi	r24, 0x90	; 144
    1586:	91 e0       	ldi	r25, 0x01	; 1
    1588:	9d 83       	std	Y+5, r25	; 0x05
    158a:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    158c:	8c 81       	ldd	r24, Y+4	; 0x04
    158e:	9d 81       	ldd	r25, Y+5	; 0x05
    1590:	01 97       	sbiw	r24, 0x01	; 1
    1592:	f1 f7       	brne	.-4      	; 0x1590 <Pulse+0x136>
    1594:	9d 83       	std	Y+5, r25	; 0x05
    1596:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1598:	8e 81       	ldd	r24, Y+6	; 0x06
    159a:	9f 81       	ldd	r25, Y+7	; 0x07
    159c:	01 97       	sbiw	r24, 0x01	; 1
    159e:	9f 83       	std	Y+7, r25	; 0x07
    15a0:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15a2:	8e 81       	ldd	r24, Y+6	; 0x06
    15a4:	9f 81       	ldd	r25, Y+7	; 0x07
    15a6:	00 97       	sbiw	r24, 0x00	; 0
    15a8:	69 f7       	brne	.-38     	; 0x1584 <Pulse+0x12a>
    15aa:	24 c0       	rjmp	.+72     	; 0x15f4 <Pulse+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15ac:	68 85       	ldd	r22, Y+8	; 0x08
    15ae:	79 85       	ldd	r23, Y+9	; 0x09
    15b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    15b2:	9b 85       	ldd	r25, Y+11	; 0x0b
    15b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15b8:	dc 01       	movw	r26, r24
    15ba:	cb 01       	movw	r24, r22
    15bc:	9f 83       	std	Y+7, r25	; 0x07
    15be:	8e 83       	std	Y+6, r24	; 0x06
    15c0:	8e 81       	ldd	r24, Y+6	; 0x06
    15c2:	9f 81       	ldd	r25, Y+7	; 0x07
    15c4:	9b 83       	std	Y+3, r25	; 0x03
    15c6:	8a 83       	std	Y+2, r24	; 0x02
    15c8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ca:	9b 81       	ldd	r25, Y+3	; 0x03
    15cc:	01 97       	sbiw	r24, 0x01	; 1
    15ce:	f1 f7       	brne	.-4      	; 0x15cc <Pulse+0x172>
    15d0:	9b 83       	std	Y+3, r25	; 0x03
    15d2:	8a 83       	std	Y+2, r24	; 0x02
    15d4:	0f c0       	rjmp	.+30     	; 0x15f4 <Pulse+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    15d6:	69 89       	ldd	r22, Y+17	; 0x11
    15d8:	7a 89       	ldd	r23, Y+18	; 0x12
    15da:	8b 89       	ldd	r24, Y+19	; 0x13
    15dc:	9c 89       	ldd	r25, Y+20	; 0x14
    15de:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15e2:	dc 01       	movw	r26, r24
    15e4:	cb 01       	movw	r24, r22
    15e6:	88 8b       	std	Y+16, r24	; 0x10
    15e8:	88 89       	ldd	r24, Y+16	; 0x10
    15ea:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    15ec:	89 81       	ldd	r24, Y+1	; 0x01
    15ee:	8a 95       	dec	r24
    15f0:	f1 f7       	brne	.-4      	; 0x15ee <Pulse+0x194>
    15f2:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	DIO_voidWRITEChannel(DIO_PORTB,DIO_PIN3,DIO_LOW);
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	63 e0       	ldi	r22, 0x03	; 3
    15f8:	40 e0       	ldi	r20, 0x00	; 0
    15fa:	0e 94 68 12 	call	0x24d0	; 0x24d0 <DIO_voidWRITEChannel>

}
    15fe:	68 96       	adiw	r28, 0x18	; 24
    1600:	0f b6       	in	r0, 0x3f	; 63
    1602:	f8 94       	cli
    1604:	de bf       	out	0x3e, r29	; 62
    1606:	0f be       	out	0x3f, r0	; 63
    1608:	cd bf       	out	0x3d, r28	; 61
    160a:	cf 91       	pop	r28
    160c:	df 91       	pop	r29
    160e:	08 95       	ret

00001610 <LCD_voidDisplayChar>:
void LCD_voidDisplayChar(u8 chr)
{
    1610:	df 93       	push	r29
    1612:	cf 93       	push	r28
    1614:	cd b7       	in	r28, 0x3d	; 61
    1616:	de b7       	in	r29, 0x3e	; 62
    1618:	6f 97       	sbiw	r28, 0x1f	; 31
    161a:	0f b6       	in	r0, 0x3f	; 63
    161c:	f8 94       	cli
    161e:	de bf       	out	0x3e, r29	; 62
    1620:	0f be       	out	0x3f, r0	; 63
    1622:	cd bf       	out	0x3d, r28	; 61
    1624:	8f 8f       	std	Y+31, r24	; 0x1f
	//RS -> 1
	DIO_voidWRITEChannel(DIO_PORTB,DIO_PIN1,DIO_HIGH);
    1626:	81 e0       	ldi	r24, 0x01	; 1
    1628:	61 e0       	ldi	r22, 0x01	; 1
    162a:	41 e0       	ldi	r20, 0x01	; 1
    162c:	0e 94 68 12 	call	0x24d0	; 0x24d0 <DIO_voidWRITEChannel>
	// 0b0000						0000
	// chr = 0b1101 1001
	// we split chr into 1101 0000 which goes to MSB
	// and 1001 0000 which goes to LSB
	// the first 4 zeros because we only work on the last 4 pins
	u8 loc_MSB = chr & ~LCDMASK;
    1630:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1632:	80 7f       	andi	r24, 0xF0	; 240
    1634:	8e 8f       	std	Y+30, r24	; 0x1e
	u8 loc_LSB = (chr<<4);
    1636:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1638:	82 95       	swap	r24
    163a:	80 7f       	andi	r24, 0xF0	; 240
    163c:	8d 8f       	std	Y+29, r24	; 0x1d

	//write MSB data to LCD
	DIO_voidWRITEChannelGroup(DIO_PORTA,loc_MSB,LCDMASK);
    163e:	80 e0       	ldi	r24, 0x00	; 0
    1640:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1642:	4f e0       	ldi	r20, 0x0F	; 15
    1644:	0e 94 c4 13 	call	0x2788	; 0x2788 <DIO_voidWRITEChannelGroup>
	//send Enable pulse
	Pulse();
    1648:	0e 94 2d 0a 	call	0x145a	; 0x145a <Pulse>
    164c:	80 e0       	ldi	r24, 0x00	; 0
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	a0 e0       	ldi	r26, 0x00	; 0
    1652:	b0 e4       	ldi	r27, 0x40	; 64
    1654:	89 8f       	std	Y+25, r24	; 0x19
    1656:	9a 8f       	std	Y+26, r25	; 0x1a
    1658:	ab 8f       	std	Y+27, r26	; 0x1b
    165a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    165c:	69 8d       	ldd	r22, Y+25	; 0x19
    165e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1660:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1662:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1664:	20 e0       	ldi	r18, 0x00	; 0
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	4a e7       	ldi	r20, 0x7A	; 122
    166a:	55 e4       	ldi	r21, 0x45	; 69
    166c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1670:	dc 01       	movw	r26, r24
    1672:	cb 01       	movw	r24, r22
    1674:	8d 8b       	std	Y+21, r24	; 0x15
    1676:	9e 8b       	std	Y+22, r25	; 0x16
    1678:	af 8b       	std	Y+23, r26	; 0x17
    167a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    167c:	6d 89       	ldd	r22, Y+21	; 0x15
    167e:	7e 89       	ldd	r23, Y+22	; 0x16
    1680:	8f 89       	ldd	r24, Y+23	; 0x17
    1682:	98 8d       	ldd	r25, Y+24	; 0x18
    1684:	20 e0       	ldi	r18, 0x00	; 0
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	40 e8       	ldi	r20, 0x80	; 128
    168a:	5f e3       	ldi	r21, 0x3F	; 63
    168c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1690:	88 23       	and	r24, r24
    1692:	2c f4       	brge	.+10     	; 0x169e <LCD_voidDisplayChar+0x8e>
		__ticks = 1;
    1694:	81 e0       	ldi	r24, 0x01	; 1
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	9c 8b       	std	Y+20, r25	; 0x14
    169a:	8b 8b       	std	Y+19, r24	; 0x13
    169c:	3f c0       	rjmp	.+126    	; 0x171c <LCD_voidDisplayChar+0x10c>
	else if (__tmp > 65535)
    169e:	6d 89       	ldd	r22, Y+21	; 0x15
    16a0:	7e 89       	ldd	r23, Y+22	; 0x16
    16a2:	8f 89       	ldd	r24, Y+23	; 0x17
    16a4:	98 8d       	ldd	r25, Y+24	; 0x18
    16a6:	20 e0       	ldi	r18, 0x00	; 0
    16a8:	3f ef       	ldi	r19, 0xFF	; 255
    16aa:	4f e7       	ldi	r20, 0x7F	; 127
    16ac:	57 e4       	ldi	r21, 0x47	; 71
    16ae:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    16b2:	18 16       	cp	r1, r24
    16b4:	4c f5       	brge	.+82     	; 0x1708 <LCD_voidDisplayChar+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16b6:	69 8d       	ldd	r22, Y+25	; 0x19
    16b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16be:	20 e0       	ldi	r18, 0x00	; 0
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	40 e2       	ldi	r20, 0x20	; 32
    16c4:	51 e4       	ldi	r21, 0x41	; 65
    16c6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16ca:	dc 01       	movw	r26, r24
    16cc:	cb 01       	movw	r24, r22
    16ce:	bc 01       	movw	r22, r24
    16d0:	cd 01       	movw	r24, r26
    16d2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16d6:	dc 01       	movw	r26, r24
    16d8:	cb 01       	movw	r24, r22
    16da:	9c 8b       	std	Y+20, r25	; 0x14
    16dc:	8b 8b       	std	Y+19, r24	; 0x13
    16de:	0f c0       	rjmp	.+30     	; 0x16fe <LCD_voidDisplayChar+0xee>
    16e0:	80 e9       	ldi	r24, 0x90	; 144
    16e2:	91 e0       	ldi	r25, 0x01	; 1
    16e4:	9a 8b       	std	Y+18, r25	; 0x12
    16e6:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    16e8:	89 89       	ldd	r24, Y+17	; 0x11
    16ea:	9a 89       	ldd	r25, Y+18	; 0x12
    16ec:	01 97       	sbiw	r24, 0x01	; 1
    16ee:	f1 f7       	brne	.-4      	; 0x16ec <LCD_voidDisplayChar+0xdc>
    16f0:	9a 8b       	std	Y+18, r25	; 0x12
    16f2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16f4:	8b 89       	ldd	r24, Y+19	; 0x13
    16f6:	9c 89       	ldd	r25, Y+20	; 0x14
    16f8:	01 97       	sbiw	r24, 0x01	; 1
    16fa:	9c 8b       	std	Y+20, r25	; 0x14
    16fc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16fe:	8b 89       	ldd	r24, Y+19	; 0x13
    1700:	9c 89       	ldd	r25, Y+20	; 0x14
    1702:	00 97       	sbiw	r24, 0x00	; 0
    1704:	69 f7       	brne	.-38     	; 0x16e0 <LCD_voidDisplayChar+0xd0>
    1706:	14 c0       	rjmp	.+40     	; 0x1730 <LCD_voidDisplayChar+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1708:	6d 89       	ldd	r22, Y+21	; 0x15
    170a:	7e 89       	ldd	r23, Y+22	; 0x16
    170c:	8f 89       	ldd	r24, Y+23	; 0x17
    170e:	98 8d       	ldd	r25, Y+24	; 0x18
    1710:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1714:	dc 01       	movw	r26, r24
    1716:	cb 01       	movw	r24, r22
    1718:	9c 8b       	std	Y+20, r25	; 0x14
    171a:	8b 8b       	std	Y+19, r24	; 0x13
    171c:	8b 89       	ldd	r24, Y+19	; 0x13
    171e:	9c 89       	ldd	r25, Y+20	; 0x14
    1720:	98 8b       	std	Y+16, r25	; 0x10
    1722:	8f 87       	std	Y+15, r24	; 0x0f
    1724:	8f 85       	ldd	r24, Y+15	; 0x0f
    1726:	98 89       	ldd	r25, Y+16	; 0x10
    1728:	01 97       	sbiw	r24, 0x01	; 1
    172a:	f1 f7       	brne	.-4      	; 0x1728 <LCD_voidDisplayChar+0x118>
    172c:	98 8b       	std	Y+16, r25	; 0x10
    172e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);

	//write LSB data to LCD
	DIO_voidWRITEChannelGroup(DIO_PORTA,loc_LSB,LCDMASK);
    1730:	80 e0       	ldi	r24, 0x00	; 0
    1732:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1734:	4f e0       	ldi	r20, 0x0F	; 15
    1736:	0e 94 c4 13 	call	0x2788	; 0x2788 <DIO_voidWRITEChannelGroup>
	//send Enable pulse
	Pulse();
    173a:	0e 94 2d 0a 	call	0x145a	; 0x145a <Pulse>
    173e:	80 e0       	ldi	r24, 0x00	; 0
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	a0 e0       	ldi	r26, 0x00	; 0
    1744:	b0 e4       	ldi	r27, 0x40	; 64
    1746:	8b 87       	std	Y+11, r24	; 0x0b
    1748:	9c 87       	std	Y+12, r25	; 0x0c
    174a:	ad 87       	std	Y+13, r26	; 0x0d
    174c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    174e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1750:	7c 85       	ldd	r23, Y+12	; 0x0c
    1752:	8d 85       	ldd	r24, Y+13	; 0x0d
    1754:	9e 85       	ldd	r25, Y+14	; 0x0e
    1756:	20 e0       	ldi	r18, 0x00	; 0
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	4a e7       	ldi	r20, 0x7A	; 122
    175c:	55 e4       	ldi	r21, 0x45	; 69
    175e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1762:	dc 01       	movw	r26, r24
    1764:	cb 01       	movw	r24, r22
    1766:	8f 83       	std	Y+7, r24	; 0x07
    1768:	98 87       	std	Y+8, r25	; 0x08
    176a:	a9 87       	std	Y+9, r26	; 0x09
    176c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    176e:	6f 81       	ldd	r22, Y+7	; 0x07
    1770:	78 85       	ldd	r23, Y+8	; 0x08
    1772:	89 85       	ldd	r24, Y+9	; 0x09
    1774:	9a 85       	ldd	r25, Y+10	; 0x0a
    1776:	20 e0       	ldi	r18, 0x00	; 0
    1778:	30 e0       	ldi	r19, 0x00	; 0
    177a:	40 e8       	ldi	r20, 0x80	; 128
    177c:	5f e3       	ldi	r21, 0x3F	; 63
    177e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1782:	88 23       	and	r24, r24
    1784:	2c f4       	brge	.+10     	; 0x1790 <LCD_voidDisplayChar+0x180>
		__ticks = 1;
    1786:	81 e0       	ldi	r24, 0x01	; 1
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	9e 83       	std	Y+6, r25	; 0x06
    178c:	8d 83       	std	Y+5, r24	; 0x05
    178e:	3f c0       	rjmp	.+126    	; 0x180e <LCD_voidDisplayChar+0x1fe>
	else if (__tmp > 65535)
    1790:	6f 81       	ldd	r22, Y+7	; 0x07
    1792:	78 85       	ldd	r23, Y+8	; 0x08
    1794:	89 85       	ldd	r24, Y+9	; 0x09
    1796:	9a 85       	ldd	r25, Y+10	; 0x0a
    1798:	20 e0       	ldi	r18, 0x00	; 0
    179a:	3f ef       	ldi	r19, 0xFF	; 255
    179c:	4f e7       	ldi	r20, 0x7F	; 127
    179e:	57 e4       	ldi	r21, 0x47	; 71
    17a0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    17a4:	18 16       	cp	r1, r24
    17a6:	4c f5       	brge	.+82     	; 0x17fa <LCD_voidDisplayChar+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    17aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    17ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    17ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    17b0:	20 e0       	ldi	r18, 0x00	; 0
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	40 e2       	ldi	r20, 0x20	; 32
    17b6:	51 e4       	ldi	r21, 0x41	; 65
    17b8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17bc:	dc 01       	movw	r26, r24
    17be:	cb 01       	movw	r24, r22
    17c0:	bc 01       	movw	r22, r24
    17c2:	cd 01       	movw	r24, r26
    17c4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17c8:	dc 01       	movw	r26, r24
    17ca:	cb 01       	movw	r24, r22
    17cc:	9e 83       	std	Y+6, r25	; 0x06
    17ce:	8d 83       	std	Y+5, r24	; 0x05
    17d0:	0f c0       	rjmp	.+30     	; 0x17f0 <LCD_voidDisplayChar+0x1e0>
    17d2:	80 e9       	ldi	r24, 0x90	; 144
    17d4:	91 e0       	ldi	r25, 0x01	; 1
    17d6:	9c 83       	std	Y+4, r25	; 0x04
    17d8:	8b 83       	std	Y+3, r24	; 0x03
    17da:	8b 81       	ldd	r24, Y+3	; 0x03
    17dc:	9c 81       	ldd	r25, Y+4	; 0x04
    17de:	01 97       	sbiw	r24, 0x01	; 1
    17e0:	f1 f7       	brne	.-4      	; 0x17de <LCD_voidDisplayChar+0x1ce>
    17e2:	9c 83       	std	Y+4, r25	; 0x04
    17e4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17e6:	8d 81       	ldd	r24, Y+5	; 0x05
    17e8:	9e 81       	ldd	r25, Y+6	; 0x06
    17ea:	01 97       	sbiw	r24, 0x01	; 1
    17ec:	9e 83       	std	Y+6, r25	; 0x06
    17ee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17f0:	8d 81       	ldd	r24, Y+5	; 0x05
    17f2:	9e 81       	ldd	r25, Y+6	; 0x06
    17f4:	00 97       	sbiw	r24, 0x00	; 0
    17f6:	69 f7       	brne	.-38     	; 0x17d2 <LCD_voidDisplayChar+0x1c2>
    17f8:	14 c0       	rjmp	.+40     	; 0x1822 <LCD_voidDisplayChar+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17fa:	6f 81       	ldd	r22, Y+7	; 0x07
    17fc:	78 85       	ldd	r23, Y+8	; 0x08
    17fe:	89 85       	ldd	r24, Y+9	; 0x09
    1800:	9a 85       	ldd	r25, Y+10	; 0x0a
    1802:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1806:	dc 01       	movw	r26, r24
    1808:	cb 01       	movw	r24, r22
    180a:	9e 83       	std	Y+6, r25	; 0x06
    180c:	8d 83       	std	Y+5, r24	; 0x05
    180e:	8d 81       	ldd	r24, Y+5	; 0x05
    1810:	9e 81       	ldd	r25, Y+6	; 0x06
    1812:	9a 83       	std	Y+2, r25	; 0x02
    1814:	89 83       	std	Y+1, r24	; 0x01
    1816:	89 81       	ldd	r24, Y+1	; 0x01
    1818:	9a 81       	ldd	r25, Y+2	; 0x02
    181a:	01 97       	sbiw	r24, 0x01	; 1
    181c:	f1 f7       	brne	.-4      	; 0x181a <LCD_voidDisplayChar+0x20a>
    181e:	9a 83       	std	Y+2, r25	; 0x02
    1820:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1822:	6f 96       	adiw	r28, 0x1f	; 31
    1824:	0f b6       	in	r0, 0x3f	; 63
    1826:	f8 94       	cli
    1828:	de bf       	out	0x3e, r29	; 62
    182a:	0f be       	out	0x3f, r0	; 63
    182c:	cd bf       	out	0x3d, r28	; 61
    182e:	cf 91       	pop	r28
    1830:	df 91       	pop	r29
    1832:	08 95       	ret

00001834 <LCD_voidCMD>:
void LCD_voidCMD(LCD_CMD_Type cmd)
{
    1834:	df 93       	push	r29
    1836:	cf 93       	push	r28
    1838:	cd b7       	in	r28, 0x3d	; 61
    183a:	de b7       	in	r29, 0x3e	; 62
    183c:	6f 97       	sbiw	r28, 0x1f	; 31
    183e:	0f b6       	in	r0, 0x3f	; 63
    1840:	f8 94       	cli
    1842:	de bf       	out	0x3e, r29	; 62
    1844:	0f be       	out	0x3f, r0	; 63
    1846:	cd bf       	out	0x3d, r28	; 61
    1848:	8f 8f       	std	Y+31, r24	; 0x1f
	u8 loc_MSB = cmd & ~LCDMASK;
    184a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    184c:	80 7f       	andi	r24, 0xF0	; 240
    184e:	8e 8f       	std	Y+30, r24	; 0x1e
	u8 loc_LSB = (cmd<<4);
    1850:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1852:	82 95       	swap	r24
    1854:	80 7f       	andi	r24, 0xF0	; 240
    1856:	8d 8f       	std	Y+29, r24	; 0x1d
	//RS -> 0
	DIO_voidWRITEChannel(DIO_PORTB,DIO_PIN1,DIO_LOW);
    1858:	81 e0       	ldi	r24, 0x01	; 1
    185a:	61 e0       	ldi	r22, 0x01	; 1
    185c:	40 e0       	ldi	r20, 0x00	; 0
    185e:	0e 94 68 12 	call	0x24d0	; 0x24d0 <DIO_voidWRITEChannel>


	//write MSB data to LCD
	DIO_voidWRITEChannelGroup(DIO_PORTA,loc_MSB,LCDMASK);
    1862:	80 e0       	ldi	r24, 0x00	; 0
    1864:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1866:	4f e0       	ldi	r20, 0x0F	; 15
    1868:	0e 94 c4 13 	call	0x2788	; 0x2788 <DIO_voidWRITEChannelGroup>
	//send Enable pulse
	Pulse();
    186c:	0e 94 2d 0a 	call	0x145a	; 0x145a <Pulse>
    1870:	80 e0       	ldi	r24, 0x00	; 0
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	a0 e0       	ldi	r26, 0x00	; 0
    1876:	b0 e4       	ldi	r27, 0x40	; 64
    1878:	89 8f       	std	Y+25, r24	; 0x19
    187a:	9a 8f       	std	Y+26, r25	; 0x1a
    187c:	ab 8f       	std	Y+27, r26	; 0x1b
    187e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1880:	69 8d       	ldd	r22, Y+25	; 0x19
    1882:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1884:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1886:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1888:	20 e0       	ldi	r18, 0x00	; 0
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	4a e7       	ldi	r20, 0x7A	; 122
    188e:	55 e4       	ldi	r21, 0x45	; 69
    1890:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1894:	dc 01       	movw	r26, r24
    1896:	cb 01       	movw	r24, r22
    1898:	8d 8b       	std	Y+21, r24	; 0x15
    189a:	9e 8b       	std	Y+22, r25	; 0x16
    189c:	af 8b       	std	Y+23, r26	; 0x17
    189e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18a0:	6d 89       	ldd	r22, Y+21	; 0x15
    18a2:	7e 89       	ldd	r23, Y+22	; 0x16
    18a4:	8f 89       	ldd	r24, Y+23	; 0x17
    18a6:	98 8d       	ldd	r25, Y+24	; 0x18
    18a8:	20 e0       	ldi	r18, 0x00	; 0
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	40 e8       	ldi	r20, 0x80	; 128
    18ae:	5f e3       	ldi	r21, 0x3F	; 63
    18b0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    18b4:	88 23       	and	r24, r24
    18b6:	2c f4       	brge	.+10     	; 0x18c2 <LCD_voidCMD+0x8e>
		__ticks = 1;
    18b8:	81 e0       	ldi	r24, 0x01	; 1
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	9c 8b       	std	Y+20, r25	; 0x14
    18be:	8b 8b       	std	Y+19, r24	; 0x13
    18c0:	3f c0       	rjmp	.+126    	; 0x1940 <LCD_voidCMD+0x10c>
	else if (__tmp > 65535)
    18c2:	6d 89       	ldd	r22, Y+21	; 0x15
    18c4:	7e 89       	ldd	r23, Y+22	; 0x16
    18c6:	8f 89       	ldd	r24, Y+23	; 0x17
    18c8:	98 8d       	ldd	r25, Y+24	; 0x18
    18ca:	20 e0       	ldi	r18, 0x00	; 0
    18cc:	3f ef       	ldi	r19, 0xFF	; 255
    18ce:	4f e7       	ldi	r20, 0x7F	; 127
    18d0:	57 e4       	ldi	r21, 0x47	; 71
    18d2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    18d6:	18 16       	cp	r1, r24
    18d8:	4c f5       	brge	.+82     	; 0x192c <LCD_voidCMD+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18da:	69 8d       	ldd	r22, Y+25	; 0x19
    18dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18e2:	20 e0       	ldi	r18, 0x00	; 0
    18e4:	30 e0       	ldi	r19, 0x00	; 0
    18e6:	40 e2       	ldi	r20, 0x20	; 32
    18e8:	51 e4       	ldi	r21, 0x41	; 65
    18ea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18ee:	dc 01       	movw	r26, r24
    18f0:	cb 01       	movw	r24, r22
    18f2:	bc 01       	movw	r22, r24
    18f4:	cd 01       	movw	r24, r26
    18f6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18fa:	dc 01       	movw	r26, r24
    18fc:	cb 01       	movw	r24, r22
    18fe:	9c 8b       	std	Y+20, r25	; 0x14
    1900:	8b 8b       	std	Y+19, r24	; 0x13
    1902:	0f c0       	rjmp	.+30     	; 0x1922 <LCD_voidCMD+0xee>
    1904:	80 e9       	ldi	r24, 0x90	; 144
    1906:	91 e0       	ldi	r25, 0x01	; 1
    1908:	9a 8b       	std	Y+18, r25	; 0x12
    190a:	89 8b       	std	Y+17, r24	; 0x11
    190c:	89 89       	ldd	r24, Y+17	; 0x11
    190e:	9a 89       	ldd	r25, Y+18	; 0x12
    1910:	01 97       	sbiw	r24, 0x01	; 1
    1912:	f1 f7       	brne	.-4      	; 0x1910 <LCD_voidCMD+0xdc>
    1914:	9a 8b       	std	Y+18, r25	; 0x12
    1916:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1918:	8b 89       	ldd	r24, Y+19	; 0x13
    191a:	9c 89       	ldd	r25, Y+20	; 0x14
    191c:	01 97       	sbiw	r24, 0x01	; 1
    191e:	9c 8b       	std	Y+20, r25	; 0x14
    1920:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1922:	8b 89       	ldd	r24, Y+19	; 0x13
    1924:	9c 89       	ldd	r25, Y+20	; 0x14
    1926:	00 97       	sbiw	r24, 0x00	; 0
    1928:	69 f7       	brne	.-38     	; 0x1904 <LCD_voidCMD+0xd0>
    192a:	14 c0       	rjmp	.+40     	; 0x1954 <LCD_voidCMD+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    192c:	6d 89       	ldd	r22, Y+21	; 0x15
    192e:	7e 89       	ldd	r23, Y+22	; 0x16
    1930:	8f 89       	ldd	r24, Y+23	; 0x17
    1932:	98 8d       	ldd	r25, Y+24	; 0x18
    1934:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1938:	dc 01       	movw	r26, r24
    193a:	cb 01       	movw	r24, r22
    193c:	9c 8b       	std	Y+20, r25	; 0x14
    193e:	8b 8b       	std	Y+19, r24	; 0x13
    1940:	8b 89       	ldd	r24, Y+19	; 0x13
    1942:	9c 89       	ldd	r25, Y+20	; 0x14
    1944:	98 8b       	std	Y+16, r25	; 0x10
    1946:	8f 87       	std	Y+15, r24	; 0x0f
    1948:	8f 85       	ldd	r24, Y+15	; 0x0f
    194a:	98 89       	ldd	r25, Y+16	; 0x10
    194c:	01 97       	sbiw	r24, 0x01	; 1
    194e:	f1 f7       	brne	.-4      	; 0x194c <LCD_voidCMD+0x118>
    1950:	98 8b       	std	Y+16, r25	; 0x10
    1952:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);

	//write LSB data to LCD
	DIO_voidWRITEChannelGroup(DIO_PORTA,loc_LSB,LCDMASK);
    1954:	80 e0       	ldi	r24, 0x00	; 0
    1956:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1958:	4f e0       	ldi	r20, 0x0F	; 15
    195a:	0e 94 c4 13 	call	0x2788	; 0x2788 <DIO_voidWRITEChannelGroup>
	//send Enable pulse
	Pulse();
    195e:	0e 94 2d 0a 	call	0x145a	; 0x145a <Pulse>
    1962:	80 e0       	ldi	r24, 0x00	; 0
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	a0 e0       	ldi	r26, 0x00	; 0
    1968:	b0 e4       	ldi	r27, 0x40	; 64
    196a:	8b 87       	std	Y+11, r24	; 0x0b
    196c:	9c 87       	std	Y+12, r25	; 0x0c
    196e:	ad 87       	std	Y+13, r26	; 0x0d
    1970:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1972:	6b 85       	ldd	r22, Y+11	; 0x0b
    1974:	7c 85       	ldd	r23, Y+12	; 0x0c
    1976:	8d 85       	ldd	r24, Y+13	; 0x0d
    1978:	9e 85       	ldd	r25, Y+14	; 0x0e
    197a:	20 e0       	ldi	r18, 0x00	; 0
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	4a e7       	ldi	r20, 0x7A	; 122
    1980:	55 e4       	ldi	r21, 0x45	; 69
    1982:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1986:	dc 01       	movw	r26, r24
    1988:	cb 01       	movw	r24, r22
    198a:	8f 83       	std	Y+7, r24	; 0x07
    198c:	98 87       	std	Y+8, r25	; 0x08
    198e:	a9 87       	std	Y+9, r26	; 0x09
    1990:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1992:	6f 81       	ldd	r22, Y+7	; 0x07
    1994:	78 85       	ldd	r23, Y+8	; 0x08
    1996:	89 85       	ldd	r24, Y+9	; 0x09
    1998:	9a 85       	ldd	r25, Y+10	; 0x0a
    199a:	20 e0       	ldi	r18, 0x00	; 0
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	40 e8       	ldi	r20, 0x80	; 128
    19a0:	5f e3       	ldi	r21, 0x3F	; 63
    19a2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    19a6:	88 23       	and	r24, r24
    19a8:	2c f4       	brge	.+10     	; 0x19b4 <LCD_voidCMD+0x180>
		__ticks = 1;
    19aa:	81 e0       	ldi	r24, 0x01	; 1
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	9e 83       	std	Y+6, r25	; 0x06
    19b0:	8d 83       	std	Y+5, r24	; 0x05
    19b2:	3f c0       	rjmp	.+126    	; 0x1a32 <LCD_voidCMD+0x1fe>
	else if (__tmp > 65535)
    19b4:	6f 81       	ldd	r22, Y+7	; 0x07
    19b6:	78 85       	ldd	r23, Y+8	; 0x08
    19b8:	89 85       	ldd	r24, Y+9	; 0x09
    19ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    19bc:	20 e0       	ldi	r18, 0x00	; 0
    19be:	3f ef       	ldi	r19, 0xFF	; 255
    19c0:	4f e7       	ldi	r20, 0x7F	; 127
    19c2:	57 e4       	ldi	r21, 0x47	; 71
    19c4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    19c8:	18 16       	cp	r1, r24
    19ca:	4c f5       	brge	.+82     	; 0x1a1e <LCD_voidCMD+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    19ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    19d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    19d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    19d4:	20 e0       	ldi	r18, 0x00	; 0
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	40 e2       	ldi	r20, 0x20	; 32
    19da:	51 e4       	ldi	r21, 0x41	; 65
    19dc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19e0:	dc 01       	movw	r26, r24
    19e2:	cb 01       	movw	r24, r22
    19e4:	bc 01       	movw	r22, r24
    19e6:	cd 01       	movw	r24, r26
    19e8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19ec:	dc 01       	movw	r26, r24
    19ee:	cb 01       	movw	r24, r22
    19f0:	9e 83       	std	Y+6, r25	; 0x06
    19f2:	8d 83       	std	Y+5, r24	; 0x05
    19f4:	0f c0       	rjmp	.+30     	; 0x1a14 <LCD_voidCMD+0x1e0>
    19f6:	80 e9       	ldi	r24, 0x90	; 144
    19f8:	91 e0       	ldi	r25, 0x01	; 1
    19fa:	9c 83       	std	Y+4, r25	; 0x04
    19fc:	8b 83       	std	Y+3, r24	; 0x03
    19fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1a00:	9c 81       	ldd	r25, Y+4	; 0x04
    1a02:	01 97       	sbiw	r24, 0x01	; 1
    1a04:	f1 f7       	brne	.-4      	; 0x1a02 <LCD_voidCMD+0x1ce>
    1a06:	9c 83       	std	Y+4, r25	; 0x04
    1a08:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a0e:	01 97       	sbiw	r24, 0x01	; 1
    1a10:	9e 83       	std	Y+6, r25	; 0x06
    1a12:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a14:	8d 81       	ldd	r24, Y+5	; 0x05
    1a16:	9e 81       	ldd	r25, Y+6	; 0x06
    1a18:	00 97       	sbiw	r24, 0x00	; 0
    1a1a:	69 f7       	brne	.-38     	; 0x19f6 <LCD_voidCMD+0x1c2>
    1a1c:	14 c0       	rjmp	.+40     	; 0x1a46 <LCD_voidCMD+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a1e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a20:	78 85       	ldd	r23, Y+8	; 0x08
    1a22:	89 85       	ldd	r24, Y+9	; 0x09
    1a24:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a26:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a2a:	dc 01       	movw	r26, r24
    1a2c:	cb 01       	movw	r24, r22
    1a2e:	9e 83       	std	Y+6, r25	; 0x06
    1a30:	8d 83       	std	Y+5, r24	; 0x05
    1a32:	8d 81       	ldd	r24, Y+5	; 0x05
    1a34:	9e 81       	ldd	r25, Y+6	; 0x06
    1a36:	9a 83       	std	Y+2, r25	; 0x02
    1a38:	89 83       	std	Y+1, r24	; 0x01
    1a3a:	89 81       	ldd	r24, Y+1	; 0x01
    1a3c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a3e:	01 97       	sbiw	r24, 0x01	; 1
    1a40:	f1 f7       	brne	.-4      	; 0x1a3e <LCD_voidCMD+0x20a>
    1a42:	9a 83       	std	Y+2, r25	; 0x02
    1a44:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1a46:	6f 96       	adiw	r28, 0x1f	; 31
    1a48:	0f b6       	in	r0, 0x3f	; 63
    1a4a:	f8 94       	cli
    1a4c:	de bf       	out	0x3e, r29	; 62
    1a4e:	0f be       	out	0x3f, r0	; 63
    1a50:	cd bf       	out	0x3d, r28	; 61
    1a52:	cf 91       	pop	r28
    1a54:	df 91       	pop	r29
    1a56:	08 95       	ret

00001a58 <LCD_voidMatrix>:
void LCD_voidMatrix(u8 row, u8 col)
{
    1a58:	df 93       	push	r29
    1a5a:	cf 93       	push	r28
    1a5c:	00 d0       	rcall	.+0      	; 0x1a5e <LCD_voidMatrix+0x6>
    1a5e:	00 d0       	rcall	.+0      	; 0x1a60 <LCD_voidMatrix+0x8>
    1a60:	cd b7       	in	r28, 0x3d	; 61
    1a62:	de b7       	in	r29, 0x3e	; 62
    1a64:	89 83       	std	Y+1, r24	; 0x01
    1a66:	6a 83       	std	Y+2, r22	; 0x02
	switch (row)
    1a68:	89 81       	ldd	r24, Y+1	; 0x01
    1a6a:	28 2f       	mov	r18, r24
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	3c 83       	std	Y+4, r19	; 0x04
    1a70:	2b 83       	std	Y+3, r18	; 0x03
    1a72:	8b 81       	ldd	r24, Y+3	; 0x03
    1a74:	9c 81       	ldd	r25, Y+4	; 0x04
    1a76:	00 97       	sbiw	r24, 0x00	; 0
    1a78:	31 f0       	breq	.+12     	; 0x1a86 <LCD_voidMatrix+0x2e>
    1a7a:	2b 81       	ldd	r18, Y+3	; 0x03
    1a7c:	3c 81       	ldd	r19, Y+4	; 0x04
    1a7e:	21 30       	cpi	r18, 0x01	; 1
    1a80:	31 05       	cpc	r19, r1
    1a82:	31 f0       	breq	.+12     	; 0x1a90 <LCD_voidMatrix+0x38>
    1a84:	09 c0       	rjmp	.+18     	; 0x1a98 <LCD_voidMatrix+0x40>
	{
	case 0:
		LCD_voidCMD(0x80 + col);
    1a86:	8a 81       	ldd	r24, Y+2	; 0x02
    1a88:	80 58       	subi	r24, 0x80	; 128
    1a8a:	0e 94 1a 0c 	call	0x1834	; 0x1834 <LCD_voidCMD>
    1a8e:	04 c0       	rjmp	.+8      	; 0x1a98 <LCD_voidMatrix+0x40>
		break;
	case 1:
		LCD_voidCMD(0xC0 + col);
    1a90:	8a 81       	ldd	r24, Y+2	; 0x02
    1a92:	80 54       	subi	r24, 0x40	; 64
    1a94:	0e 94 1a 0c 	call	0x1834	; 0x1834 <LCD_voidCMD>
		break;
	}

}
    1a98:	0f 90       	pop	r0
    1a9a:	0f 90       	pop	r0
    1a9c:	0f 90       	pop	r0
    1a9e:	0f 90       	pop	r0
    1aa0:	cf 91       	pop	r28
    1aa2:	df 91       	pop	r29
    1aa4:	08 95       	ret

00001aa6 <LCD_voidDisplayStr>:

void LCD_voidDisplayStr(u8 str[])
{
    1aa6:	df 93       	push	r29
    1aa8:	cf 93       	push	r28
    1aaa:	00 d0       	rcall	.+0      	; 0x1aac <LCD_voidDisplayStr+0x6>
    1aac:	00 d0       	rcall	.+0      	; 0x1aae <LCD_voidDisplayStr+0x8>
    1aae:	cd b7       	in	r28, 0x3d	; 61
    1ab0:	de b7       	in	r29, 0x3e	; 62
    1ab2:	9c 83       	std	Y+4, r25	; 0x04
    1ab4:	8b 83       	std	Y+3, r24	; 0x03
//	while (str[i] != '\0')
//	{
//		LCD_voidDisplayChar(str[i]);
//		i++;
//	}
	for (int i=0; i<32;i++)
    1ab6:	1a 82       	std	Y+2, r1	; 0x02
    1ab8:	19 82       	std	Y+1, r1	; 0x01
    1aba:	22 c0       	rjmp	.+68     	; 0x1b00 <LCD_voidDisplayStr+0x5a>
	{
		if (str[i] != '\0')
    1abc:	29 81       	ldd	r18, Y+1	; 0x01
    1abe:	3a 81       	ldd	r19, Y+2	; 0x02
    1ac0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ac4:	fc 01       	movw	r30, r24
    1ac6:	e2 0f       	add	r30, r18
    1ac8:	f3 1f       	adc	r31, r19
    1aca:	80 81       	ld	r24, Z
    1acc:	88 23       	and	r24, r24
    1ace:	e9 f0       	breq	.+58     	; 0x1b0a <LCD_voidDisplayStr+0x64>
		{
			if (i==15)
    1ad0:	89 81       	ldd	r24, Y+1	; 0x01
    1ad2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ad4:	8f 30       	cpi	r24, 0x0F	; 15
    1ad6:	91 05       	cpc	r25, r1
    1ad8:	21 f4       	brne	.+8      	; 0x1ae2 <LCD_voidDisplayStr+0x3c>
			{
				LCD_voidMatrix(1,0);
    1ada:	81 e0       	ldi	r24, 0x01	; 1
    1adc:	60 e0       	ldi	r22, 0x00	; 0
    1ade:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <LCD_voidMatrix>
			}
			LCD_voidDisplayChar(str[i]);
    1ae2:	29 81       	ldd	r18, Y+1	; 0x01
    1ae4:	3a 81       	ldd	r19, Y+2	; 0x02
    1ae6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae8:	9c 81       	ldd	r25, Y+4	; 0x04
    1aea:	fc 01       	movw	r30, r24
    1aec:	e2 0f       	add	r30, r18
    1aee:	f3 1f       	adc	r31, r19
    1af0:	80 81       	ld	r24, Z
    1af2:	0e 94 08 0b 	call	0x1610	; 0x1610 <LCD_voidDisplayChar>
//	while (str[i] != '\0')
//	{
//		LCD_voidDisplayChar(str[i]);
//		i++;
//	}
	for (int i=0; i<32;i++)
    1af6:	89 81       	ldd	r24, Y+1	; 0x01
    1af8:	9a 81       	ldd	r25, Y+2	; 0x02
    1afa:	01 96       	adiw	r24, 0x01	; 1
    1afc:	9a 83       	std	Y+2, r25	; 0x02
    1afe:	89 83       	std	Y+1, r24	; 0x01
    1b00:	89 81       	ldd	r24, Y+1	; 0x01
    1b02:	9a 81       	ldd	r25, Y+2	; 0x02
    1b04:	80 32       	cpi	r24, 0x20	; 32
    1b06:	91 05       	cpc	r25, r1
    1b08:	cc f2       	brlt	.-78     	; 0x1abc <LCD_voidDisplayStr+0x16>
		else
		{
			break;
		}
	}
}
    1b0a:	0f 90       	pop	r0
    1b0c:	0f 90       	pop	r0
    1b0e:	0f 90       	pop	r0
    1b10:	0f 90       	pop	r0
    1b12:	cf 91       	pop	r28
    1b14:	df 91       	pop	r29
    1b16:	08 95       	ret

00001b18 <LCD_voidDIsplayInteger>:
void LCD_voidDIsplayInteger(u32 num)
{
    1b18:	df 93       	push	r29
    1b1a:	cf 93       	push	r28
    1b1c:	cd b7       	in	r28, 0x3d	; 61
    1b1e:	de b7       	in	r29, 0x3e	; 62
    1b20:	29 97       	sbiw	r28, 0x09	; 9
    1b22:	0f b6       	in	r0, 0x3f	; 63
    1b24:	f8 94       	cli
    1b26:	de bf       	out	0x3e, r29	; 62
    1b28:	0f be       	out	0x3f, r0	; 63
    1b2a:	cd bf       	out	0x3d, r28	; 61
    1b2c:	6e 83       	std	Y+6, r22	; 0x06
    1b2e:	7f 83       	std	Y+7, r23	; 0x07
    1b30:	88 87       	std	Y+8, r24	; 0x08
    1b32:	99 87       	std	Y+9, r25	; 0x09
	u8 buffer[5];
	sprintf(buffer,"%d",num);
    1b34:	8d b7       	in	r24, 0x3d	; 61
    1b36:	9e b7       	in	r25, 0x3e	; 62
    1b38:	08 97       	sbiw	r24, 0x08	; 8
    1b3a:	0f b6       	in	r0, 0x3f	; 63
    1b3c:	f8 94       	cli
    1b3e:	9e bf       	out	0x3e, r25	; 62
    1b40:	0f be       	out	0x3f, r0	; 63
    1b42:	8d bf       	out	0x3d, r24	; 61
    1b44:	ed b7       	in	r30, 0x3d	; 61
    1b46:	fe b7       	in	r31, 0x3e	; 62
    1b48:	31 96       	adiw	r30, 0x01	; 1
    1b4a:	ce 01       	movw	r24, r28
    1b4c:	01 96       	adiw	r24, 0x01	; 1
    1b4e:	91 83       	std	Z+1, r25	; 0x01
    1b50:	80 83       	st	Z, r24
    1b52:	80 e6       	ldi	r24, 0x60	; 96
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	93 83       	std	Z+3, r25	; 0x03
    1b58:	82 83       	std	Z+2, r24	; 0x02
    1b5a:	8e 81       	ldd	r24, Y+6	; 0x06
    1b5c:	9f 81       	ldd	r25, Y+7	; 0x07
    1b5e:	a8 85       	ldd	r26, Y+8	; 0x08
    1b60:	b9 85       	ldd	r27, Y+9	; 0x09
    1b62:	84 83       	std	Z+4, r24	; 0x04
    1b64:	95 83       	std	Z+5, r25	; 0x05
    1b66:	a6 83       	std	Z+6, r26	; 0x06
    1b68:	b7 83       	std	Z+7, r27	; 0x07
    1b6a:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <sprintf>
    1b6e:	8d b7       	in	r24, 0x3d	; 61
    1b70:	9e b7       	in	r25, 0x3e	; 62
    1b72:	08 96       	adiw	r24, 0x08	; 8
    1b74:	0f b6       	in	r0, 0x3f	; 63
    1b76:	f8 94       	cli
    1b78:	9e bf       	out	0x3e, r25	; 62
    1b7a:	0f be       	out	0x3f, r0	; 63
    1b7c:	8d bf       	out	0x3d, r24	; 61
	LCD_voidDisplayStr(buffer);
    1b7e:	ce 01       	movw	r24, r28
    1b80:	01 96       	adiw	r24, 0x01	; 1
    1b82:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <LCD_voidDisplayStr>
}
    1b86:	29 96       	adiw	r28, 0x09	; 9
    1b88:	0f b6       	in	r0, 0x3f	; 63
    1b8a:	f8 94       	cli
    1b8c:	de bf       	out	0x3e, r29	; 62
    1b8e:	0f be       	out	0x3f, r0	; 63
    1b90:	cd bf       	out	0x3d, r28	; 61
    1b92:	cf 91       	pop	r28
    1b94:	df 91       	pop	r29
    1b96:	08 95       	ret

00001b98 <LCD_voidCustomChar1>:
void LCD_voidCustomChar1(void)
{
    1b98:	df 93       	push	r29
    1b9a:	cf 93       	push	r28
    1b9c:	cd b7       	in	r28, 0x3d	; 61
    1b9e:	de b7       	in	r29, 0x3e	; 62
    1ba0:	2e 97       	sbiw	r28, 0x0e	; 14
    1ba2:	0f b6       	in	r0, 0x3f	; 63
    1ba4:	f8 94       	cli
    1ba6:	de bf       	out	0x3e, r29	; 62
    1ba8:	0f be       	out	0x3f, r0	; 63
    1baa:	cd bf       	out	0x3d, r28	; 61
	u8 cntr=0;
    1bac:	19 82       	std	Y+1, r1	; 0x01
			0b10101,
			0b10001,
			0b01010,
			0b00100,
			0b00000
	};
    1bae:	ce 01       	movw	r24, r28
    1bb0:	02 96       	adiw	r24, 0x02	; 2
    1bb2:	9b 87       	std	Y+11, r25	; 0x0b
    1bb4:	8a 87       	std	Y+10, r24	; 0x0a
    1bb6:	e1 e7       	ldi	r30, 0x71	; 113
    1bb8:	f1 e0       	ldi	r31, 0x01	; 1
    1bba:	fd 87       	std	Y+13, r31	; 0x0d
    1bbc:	ec 87       	std	Y+12, r30	; 0x0c
    1bbe:	f8 e0       	ldi	r31, 0x08	; 8
    1bc0:	fe 87       	std	Y+14, r31	; 0x0e
    1bc2:	ec 85       	ldd	r30, Y+12	; 0x0c
    1bc4:	fd 85       	ldd	r31, Y+13	; 0x0d
    1bc6:	00 80       	ld	r0, Z
    1bc8:	8c 85       	ldd	r24, Y+12	; 0x0c
    1bca:	9d 85       	ldd	r25, Y+13	; 0x0d
    1bcc:	01 96       	adiw	r24, 0x01	; 1
    1bce:	9d 87       	std	Y+13, r25	; 0x0d
    1bd0:	8c 87       	std	Y+12, r24	; 0x0c
    1bd2:	ea 85       	ldd	r30, Y+10	; 0x0a
    1bd4:	fb 85       	ldd	r31, Y+11	; 0x0b
    1bd6:	00 82       	st	Z, r0
    1bd8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1bda:	9b 85       	ldd	r25, Y+11	; 0x0b
    1bdc:	01 96       	adiw	r24, 0x01	; 1
    1bde:	9b 87       	std	Y+11, r25	; 0x0b
    1be0:	8a 87       	std	Y+10, r24	; 0x0a
    1be2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1be4:	91 50       	subi	r25, 0x01	; 1
    1be6:	9e 87       	std	Y+14, r25	; 0x0e
    1be8:	ee 85       	ldd	r30, Y+14	; 0x0e
    1bea:	ee 23       	and	r30, r30
    1bec:	51 f7       	brne	.-44     	; 0x1bc2 <LCD_voidCustomChar1+0x2a>
	for (cntr=0;cntr<8;cntr++)
    1bee:	19 82       	std	Y+1, r1	; 0x01
    1bf0:	12 c0       	rjmp	.+36     	; 0x1c16 <LCD_voidCustomChar1+0x7e>
	{
		LCD_voidCMD(0x40+cntr);
    1bf2:	89 81       	ldd	r24, Y+1	; 0x01
    1bf4:	80 5c       	subi	r24, 0xC0	; 192
    1bf6:	0e 94 1a 0c 	call	0x1834	; 0x1834 <LCD_voidCMD>
		LCD_voidDisplayChar(customChar[cntr]);
    1bfa:	89 81       	ldd	r24, Y+1	; 0x01
    1bfc:	28 2f       	mov	r18, r24
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	ce 01       	movw	r24, r28
    1c02:	02 96       	adiw	r24, 0x02	; 2
    1c04:	fc 01       	movw	r30, r24
    1c06:	e2 0f       	add	r30, r18
    1c08:	f3 1f       	adc	r31, r19
    1c0a:	80 81       	ld	r24, Z
    1c0c:	0e 94 08 0b 	call	0x1610	; 0x1610 <LCD_voidDisplayChar>
			0b10001,
			0b01010,
			0b00100,
			0b00000
	};
	for (cntr=0;cntr<8;cntr++)
    1c10:	89 81       	ldd	r24, Y+1	; 0x01
    1c12:	8f 5f       	subi	r24, 0xFF	; 255
    1c14:	89 83       	std	Y+1, r24	; 0x01
    1c16:	89 81       	ldd	r24, Y+1	; 0x01
    1c18:	88 30       	cpi	r24, 0x08	; 8
    1c1a:	58 f3       	brcs	.-42     	; 0x1bf2 <LCD_voidCustomChar1+0x5a>
	{
		LCD_voidCMD(0x40+cntr);
		LCD_voidDisplayChar(customChar[cntr]);
	}
	LCD_voidCMD(0x8E); //Equivalent to LCD_voidMatrix(0,0);
    1c1c:	8e e8       	ldi	r24, 0x8E	; 142
    1c1e:	0e 94 1a 0c 	call	0x1834	; 0x1834 <LCD_voidCMD>
	LCD_voidDisplayChar(0); //Placement
    1c22:	80 e0       	ldi	r24, 0x00	; 0
    1c24:	0e 94 08 0b 	call	0x1610	; 0x1610 <LCD_voidDisplayChar>
}
    1c28:	2e 96       	adiw	r28, 0x0e	; 14
    1c2a:	0f b6       	in	r0, 0x3f	; 63
    1c2c:	f8 94       	cli
    1c2e:	de bf       	out	0x3e, r29	; 62
    1c30:	0f be       	out	0x3f, r0	; 63
    1c32:	cd bf       	out	0x3d, r28	; 61
    1c34:	cf 91       	pop	r28
    1c36:	df 91       	pop	r29
    1c38:	08 95       	ret

00001c3a <LCD_voidDisplayFloat>:
void LCD_voidDisplayFloat(f64 num)
{
    1c3a:	df 93       	push	r29
    1c3c:	cf 93       	push	r28
    1c3e:	cd b7       	in	r28, 0x3d	; 61
    1c40:	de b7       	in	r29, 0x3e	; 62
    1c42:	2e 97       	sbiw	r28, 0x0e	; 14
    1c44:	0f b6       	in	r0, 0x3f	; 63
    1c46:	f8 94       	cli
    1c48:	de bf       	out	0x3e, r29	; 62
    1c4a:	0f be       	out	0x3f, r0	; 63
    1c4c:	cd bf       	out	0x3d, r28	; 61
    1c4e:	6b 87       	std	Y+11, r22	; 0x0b
    1c50:	7c 87       	std	Y+12, r23	; 0x0c
    1c52:	8d 87       	std	Y+13, r24	; 0x0d
    1c54:	9e 87       	std	Y+14, r25	; 0x0e
	u8 buffer[10];
	sprintf(buffer,"%1.2f",num);
    1c56:	8d b7       	in	r24, 0x3d	; 61
    1c58:	9e b7       	in	r25, 0x3e	; 62
    1c5a:	08 97       	sbiw	r24, 0x08	; 8
    1c5c:	0f b6       	in	r0, 0x3f	; 63
    1c5e:	f8 94       	cli
    1c60:	9e bf       	out	0x3e, r25	; 62
    1c62:	0f be       	out	0x3f, r0	; 63
    1c64:	8d bf       	out	0x3d, r24	; 61
    1c66:	ed b7       	in	r30, 0x3d	; 61
    1c68:	fe b7       	in	r31, 0x3e	; 62
    1c6a:	31 96       	adiw	r30, 0x01	; 1
    1c6c:	ce 01       	movw	r24, r28
    1c6e:	01 96       	adiw	r24, 0x01	; 1
    1c70:	91 83       	std	Z+1, r25	; 0x01
    1c72:	80 83       	st	Z, r24
    1c74:	83 e6       	ldi	r24, 0x63	; 99
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	93 83       	std	Z+3, r25	; 0x03
    1c7a:	82 83       	std	Z+2, r24	; 0x02
    1c7c:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c7e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c80:	ad 85       	ldd	r26, Y+13	; 0x0d
    1c82:	be 85       	ldd	r27, Y+14	; 0x0e
    1c84:	84 83       	std	Z+4, r24	; 0x04
    1c86:	95 83       	std	Z+5, r25	; 0x05
    1c88:	a6 83       	std	Z+6, r26	; 0x06
    1c8a:	b7 83       	std	Z+7, r27	; 0x07
    1c8c:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <sprintf>
    1c90:	8d b7       	in	r24, 0x3d	; 61
    1c92:	9e b7       	in	r25, 0x3e	; 62
    1c94:	08 96       	adiw	r24, 0x08	; 8
    1c96:	0f b6       	in	r0, 0x3f	; 63
    1c98:	f8 94       	cli
    1c9a:	9e bf       	out	0x3e, r25	; 62
    1c9c:	0f be       	out	0x3f, r0	; 63
    1c9e:	8d bf       	out	0x3d, r24	; 61
	LCD_voidDisplayStr(buffer);
    1ca0:	ce 01       	movw	r24, r28
    1ca2:	01 96       	adiw	r24, 0x01	; 1
    1ca4:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <LCD_voidDisplayStr>
}
    1ca8:	2e 96       	adiw	r28, 0x0e	; 14
    1caa:	0f b6       	in	r0, 0x3f	; 63
    1cac:	f8 94       	cli
    1cae:	de bf       	out	0x3e, r29	; 62
    1cb0:	0f be       	out	0x3f, r0	; 63
    1cb2:	cd bf       	out	0x3d, r28	; 61
    1cb4:	cf 91       	pop	r28
    1cb6:	df 91       	pop	r29
    1cb8:	08 95       	ret

00001cba <UART_voidInit>:
#include "UART.h"
#include "UART_Reg.h"
#define FCPU 	(16000000)

void UART_voidInit(u32 baudrate,UART_PARITY_T parity,UART_MODE_T sync,UART_STOP_T StopValue)
{
    1cba:	0f 93       	push	r16
    1cbc:	1f 93       	push	r17
    1cbe:	df 93       	push	r29
    1cc0:	cf 93       	push	r28
    1cc2:	cd b7       	in	r28, 0x3d	; 61
    1cc4:	de b7       	in	r29, 0x3e	; 62
    1cc6:	27 97       	sbiw	r28, 0x07	; 7
    1cc8:	0f b6       	in	r0, 0x3f	; 63
    1cca:	f8 94       	cli
    1ccc:	de bf       	out	0x3e, r29	; 62
    1cce:	0f be       	out	0x3f, r0	; 63
    1cd0:	cd bf       	out	0x3d, r28	; 61
    1cd2:	69 83       	std	Y+1, r22	; 0x01
    1cd4:	7a 83       	std	Y+2, r23	; 0x02
    1cd6:	8b 83       	std	Y+3, r24	; 0x03
    1cd8:	9c 83       	std	Y+4, r25	; 0x04
    1cda:	4d 83       	std	Y+5, r20	; 0x05
    1cdc:	2e 83       	std	Y+6, r18	; 0x06
    1cde:	0f 83       	std	Y+7, r16	; 0x07
	//set baud rate
	UART_UBRRL_Reg = ((FCPU/(baudrate*16))-1); 	//put baudrate in the Low
    1ce0:	09 e2       	ldi	r16, 0x29	; 41
    1ce2:	10 e0       	ldi	r17, 0x00	; 0
    1ce4:	89 81       	ldd	r24, Y+1	; 0x01
    1ce6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ce8:	ab 81       	ldd	r26, Y+3	; 0x03
    1cea:	bc 81       	ldd	r27, Y+4	; 0x04
    1cec:	88 0f       	add	r24, r24
    1cee:	99 1f       	adc	r25, r25
    1cf0:	aa 1f       	adc	r26, r26
    1cf2:	bb 1f       	adc	r27, r27
    1cf4:	88 0f       	add	r24, r24
    1cf6:	99 1f       	adc	r25, r25
    1cf8:	aa 1f       	adc	r26, r26
    1cfa:	bb 1f       	adc	r27, r27
    1cfc:	88 0f       	add	r24, r24
    1cfe:	99 1f       	adc	r25, r25
    1d00:	aa 1f       	adc	r26, r26
    1d02:	bb 1f       	adc	r27, r27
    1d04:	88 0f       	add	r24, r24
    1d06:	99 1f       	adc	r25, r25
    1d08:	aa 1f       	adc	r26, r26
    1d0a:	bb 1f       	adc	r27, r27
    1d0c:	9c 01       	movw	r18, r24
    1d0e:	ad 01       	movw	r20, r26
    1d10:	80 e0       	ldi	r24, 0x00	; 0
    1d12:	94 e2       	ldi	r25, 0x24	; 36
    1d14:	a4 ef       	ldi	r26, 0xF4	; 244
    1d16:	b0 e0       	ldi	r27, 0x00	; 0
    1d18:	bc 01       	movw	r22, r24
    1d1a:	cd 01       	movw	r24, r26
    1d1c:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <__udivmodsi4>
    1d20:	da 01       	movw	r26, r20
    1d22:	c9 01       	movw	r24, r18
    1d24:	81 50       	subi	r24, 0x01	; 1
    1d26:	f8 01       	movw	r30, r16
    1d28:	80 83       	st	Z, r24
	UART_UBRRH_Reg = (((FCPU/(baudrate*16))-1)>>8);	//shift 8 and put the remaining in the High
    1d2a:	00 e4       	ldi	r16, 0x40	; 64
    1d2c:	10 e0       	ldi	r17, 0x00	; 0
    1d2e:	89 81       	ldd	r24, Y+1	; 0x01
    1d30:	9a 81       	ldd	r25, Y+2	; 0x02
    1d32:	ab 81       	ldd	r26, Y+3	; 0x03
    1d34:	bc 81       	ldd	r27, Y+4	; 0x04
    1d36:	88 0f       	add	r24, r24
    1d38:	99 1f       	adc	r25, r25
    1d3a:	aa 1f       	adc	r26, r26
    1d3c:	bb 1f       	adc	r27, r27
    1d3e:	88 0f       	add	r24, r24
    1d40:	99 1f       	adc	r25, r25
    1d42:	aa 1f       	adc	r26, r26
    1d44:	bb 1f       	adc	r27, r27
    1d46:	88 0f       	add	r24, r24
    1d48:	99 1f       	adc	r25, r25
    1d4a:	aa 1f       	adc	r26, r26
    1d4c:	bb 1f       	adc	r27, r27
    1d4e:	88 0f       	add	r24, r24
    1d50:	99 1f       	adc	r25, r25
    1d52:	aa 1f       	adc	r26, r26
    1d54:	bb 1f       	adc	r27, r27
    1d56:	9c 01       	movw	r18, r24
    1d58:	ad 01       	movw	r20, r26
    1d5a:	80 e0       	ldi	r24, 0x00	; 0
    1d5c:	94 e2       	ldi	r25, 0x24	; 36
    1d5e:	a4 ef       	ldi	r26, 0xF4	; 244
    1d60:	b0 e0       	ldi	r27, 0x00	; 0
    1d62:	bc 01       	movw	r22, r24
    1d64:	cd 01       	movw	r24, r26
    1d66:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <__udivmodsi4>
    1d6a:	da 01       	movw	r26, r20
    1d6c:	c9 01       	movw	r24, r18
    1d6e:	01 97       	sbiw	r24, 0x01	; 1
    1d70:	a1 09       	sbc	r26, r1
    1d72:	b1 09       	sbc	r27, r1
    1d74:	89 2f       	mov	r24, r25
    1d76:	9a 2f       	mov	r25, r26
    1d78:	ab 2f       	mov	r26, r27
    1d7a:	bb 27       	eor	r27, r27
    1d7c:	f8 01       	movw	r30, r16
    1d7e:	80 83       	st	Z, r24

	//enable receiver and trasmitter
	SET_BIT(UART_UCSRB_Reg,UART_TXEN_BIT);		//enable transmitter
    1d80:	aa e2       	ldi	r26, 0x2A	; 42
    1d82:	b0 e0       	ldi	r27, 0x00	; 0
    1d84:	ea e2       	ldi	r30, 0x2A	; 42
    1d86:	f0 e0       	ldi	r31, 0x00	; 0
    1d88:	80 81       	ld	r24, Z
    1d8a:	88 60       	ori	r24, 0x08	; 8
    1d8c:	8c 93       	st	X, r24
	SET_BIT(UART_UCSRB_Reg,UART_RXEN_BIT);		//enable receiver
    1d8e:	aa e2       	ldi	r26, 0x2A	; 42
    1d90:	b0 e0       	ldi	r27, 0x00	; 0
    1d92:	ea e2       	ldi	r30, 0x2A	; 42
    1d94:	f0 e0       	ldi	r31, 0x00	; 0
    1d96:	80 81       	ld	r24, Z
    1d98:	80 61       	ori	r24, 0x10	; 16
    1d9a:	8c 93       	st	X, r24

	//set frame format: 8data,1stop bit,even parity

	//parity check
	//UCSRC_Reg=SET_BIT(UCSRC_Reg,7)|CLEAR_BIT(UCSRC_Reg,4)|SET_BIT(UCSRC_Reg,5);
	UART_UCSRC_Reg=SET_BIT(UART_UCSRC_Reg,UART_URSEL_BIT)|(parity<<UART_UPM0_BIT);
    1d9c:	40 e4       	ldi	r20, 0x40	; 64
    1d9e:	50 e0       	ldi	r21, 0x00	; 0
    1da0:	a0 e4       	ldi	r26, 0x40	; 64
    1da2:	b0 e0       	ldi	r27, 0x00	; 0
    1da4:	e0 e4       	ldi	r30, 0x40	; 64
    1da6:	f0 e0       	ldi	r31, 0x00	; 0
    1da8:	80 81       	ld	r24, Z
    1daa:	80 68       	ori	r24, 0x80	; 128
    1dac:	8c 93       	st	X, r24
    1dae:	8c 91       	ld	r24, X
    1db0:	28 2f       	mov	r18, r24
    1db2:	8d 81       	ldd	r24, Y+5	; 0x05
    1db4:	88 2f       	mov	r24, r24
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	82 95       	swap	r24
    1dba:	92 95       	swap	r25
    1dbc:	90 7f       	andi	r25, 0xF0	; 240
    1dbe:	98 27       	eor	r25, r24
    1dc0:	80 7f       	andi	r24, 0xF0	; 240
    1dc2:	98 27       	eor	r25, r24
    1dc4:	82 2b       	or	r24, r18
    1dc6:	fa 01       	movw	r30, r20
    1dc8:	80 83       	st	Z, r24

	//Asynchronous or Synchronous
	//UCSRC_Reg=SET_BIT(UCSRC_Reg,7)|CLEAR_BIT(UCSRC_Reg,6);
	UART_UCSRC_Reg|=SET_BIT(UART_UCSRC_Reg,UART_URSEL_BIT)|(sync<<UART_UMSEL_BIT);
    1dca:	40 e4       	ldi	r20, 0x40	; 64
    1dcc:	50 e0       	ldi	r21, 0x00	; 0
    1dce:	e0 e4       	ldi	r30, 0x40	; 64
    1dd0:	f0 e0       	ldi	r31, 0x00	; 0
    1dd2:	80 81       	ld	r24, Z
    1dd4:	38 2f       	mov	r19, r24
    1dd6:	a0 e4       	ldi	r26, 0x40	; 64
    1dd8:	b0 e0       	ldi	r27, 0x00	; 0
    1dda:	e0 e4       	ldi	r30, 0x40	; 64
    1ddc:	f0 e0       	ldi	r31, 0x00	; 0
    1dde:	80 81       	ld	r24, Z
    1de0:	80 68       	ori	r24, 0x80	; 128
    1de2:	8c 93       	st	X, r24
    1de4:	8c 91       	ld	r24, X
    1de6:	28 2f       	mov	r18, r24
    1de8:	8e 81       	ldd	r24, Y+6	; 0x06
    1dea:	88 2f       	mov	r24, r24
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	00 24       	eor	r0, r0
    1df0:	96 95       	lsr	r25
    1df2:	87 95       	ror	r24
    1df4:	07 94       	ror	r0
    1df6:	96 95       	lsr	r25
    1df8:	87 95       	ror	r24
    1dfa:	07 94       	ror	r0
    1dfc:	98 2f       	mov	r25, r24
    1dfe:	80 2d       	mov	r24, r0
    1e00:	82 2b       	or	r24, r18
    1e02:	83 2b       	or	r24, r19
    1e04:	fa 01       	movw	r30, r20
    1e06:	80 83       	st	Z, r24

	//1 stop bit
	//UCSRC_Reg=SET_BIT(UCSRC_Reg,7)|SET_BIT(UCSRC_Reg,3);
	UART_UCSRC_Reg|=SET_BIT(UART_UCSRC_Reg,UART_URSEL_BIT)|(StopValue<<UART_USBS_BIT);
    1e08:	40 e4       	ldi	r20, 0x40	; 64
    1e0a:	50 e0       	ldi	r21, 0x00	; 0
    1e0c:	e0 e4       	ldi	r30, 0x40	; 64
    1e0e:	f0 e0       	ldi	r31, 0x00	; 0
    1e10:	80 81       	ld	r24, Z
    1e12:	38 2f       	mov	r19, r24
    1e14:	a0 e4       	ldi	r26, 0x40	; 64
    1e16:	b0 e0       	ldi	r27, 0x00	; 0
    1e18:	e0 e4       	ldi	r30, 0x40	; 64
    1e1a:	f0 e0       	ldi	r31, 0x00	; 0
    1e1c:	80 81       	ld	r24, Z
    1e1e:	80 68       	ori	r24, 0x80	; 128
    1e20:	8c 93       	st	X, r24
    1e22:	8c 91       	ld	r24, X
    1e24:	28 2f       	mov	r18, r24
    1e26:	8f 81       	ldd	r24, Y+7	; 0x07
    1e28:	88 2f       	mov	r24, r24
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	88 0f       	add	r24, r24
    1e2e:	99 1f       	adc	r25, r25
    1e30:	88 0f       	add	r24, r24
    1e32:	99 1f       	adc	r25, r25
    1e34:	88 0f       	add	r24, r24
    1e36:	99 1f       	adc	r25, r25
    1e38:	82 2b       	or	r24, r18
    1e3a:	83 2b       	or	r24, r19
    1e3c:	fa 01       	movw	r30, r20
    1e3e:	80 83       	st	Z, r24

	//Data length
	UART_UCSRC_Reg|=SET_BIT(UART_UCSRC_Reg,UART_URSEL_BIT)|SET_BIT(UART_UCSRC_Reg,UART_UCSZ0_BIT)|SET_BIT(UART_UCSRC_Reg,UART_UCSZ1_BIT)|CLEAR_BIT(UART_UCSRB_Reg,UART_UCSZ2_BIT); //8bit data length
    1e40:	20 e4       	ldi	r18, 0x40	; 64
    1e42:	30 e0       	ldi	r19, 0x00	; 0
    1e44:	e0 e4       	ldi	r30, 0x40	; 64
    1e46:	f0 e0       	ldi	r31, 0x00	; 0
    1e48:	40 81       	ld	r20, Z
    1e4a:	a0 e4       	ldi	r26, 0x40	; 64
    1e4c:	b0 e0       	ldi	r27, 0x00	; 0
    1e4e:	e0 e4       	ldi	r30, 0x40	; 64
    1e50:	f0 e0       	ldi	r31, 0x00	; 0
    1e52:	80 81       	ld	r24, Z
    1e54:	80 68       	ori	r24, 0x80	; 128
    1e56:	8c 93       	st	X, r24
    1e58:	9c 91       	ld	r25, X
    1e5a:	a0 e4       	ldi	r26, 0x40	; 64
    1e5c:	b0 e0       	ldi	r27, 0x00	; 0
    1e5e:	e0 e4       	ldi	r30, 0x40	; 64
    1e60:	f0 e0       	ldi	r31, 0x00	; 0
    1e62:	80 81       	ld	r24, Z
    1e64:	82 60       	ori	r24, 0x02	; 2
    1e66:	8c 93       	st	X, r24
    1e68:	8c 91       	ld	r24, X
    1e6a:	98 2b       	or	r25, r24
    1e6c:	a0 e4       	ldi	r26, 0x40	; 64
    1e6e:	b0 e0       	ldi	r27, 0x00	; 0
    1e70:	e0 e4       	ldi	r30, 0x40	; 64
    1e72:	f0 e0       	ldi	r31, 0x00	; 0
    1e74:	80 81       	ld	r24, Z
    1e76:	84 60       	ori	r24, 0x04	; 4
    1e78:	8c 93       	st	X, r24
    1e7a:	8c 91       	ld	r24, X
    1e7c:	98 2b       	or	r25, r24
    1e7e:	aa e2       	ldi	r26, 0x2A	; 42
    1e80:	b0 e0       	ldi	r27, 0x00	; 0
    1e82:	ea e2       	ldi	r30, 0x2A	; 42
    1e84:	f0 e0       	ldi	r31, 0x00	; 0
    1e86:	80 81       	ld	r24, Z
    1e88:	8b 7f       	andi	r24, 0xFB	; 251
    1e8a:	8c 93       	st	X, r24
    1e8c:	8c 91       	ld	r24, X
    1e8e:	89 2b       	or	r24, r25
    1e90:	84 2b       	or	r24, r20
    1e92:	f9 01       	movw	r30, r18
    1e94:	80 83       	st	Z, r24


}
    1e96:	27 96       	adiw	r28, 0x07	; 7
    1e98:	0f b6       	in	r0, 0x3f	; 63
    1e9a:	f8 94       	cli
    1e9c:	de bf       	out	0x3e, r29	; 62
    1e9e:	0f be       	out	0x3f, r0	; 63
    1ea0:	cd bf       	out	0x3d, r28	; 61
    1ea2:	cf 91       	pop	r28
    1ea4:	df 91       	pop	r29
    1ea6:	1f 91       	pop	r17
    1ea8:	0f 91       	pop	r16
    1eaa:	08 95       	ret

00001eac <UART_Init>:


void UART_Init(u32 baudRate)
{
    1eac:	df 93       	push	r29
    1eae:	cf 93       	push	r28
    1eb0:	cd b7       	in	r28, 0x3d	; 61
    1eb2:	de b7       	in	r29, 0x3e	; 62
    1eb4:	28 97       	sbiw	r28, 0x08	; 8
    1eb6:	0f b6       	in	r0, 0x3f	; 63
    1eb8:	f8 94       	cli
    1eba:	de bf       	out	0x3e, r29	; 62
    1ebc:	0f be       	out	0x3f, r0	; 63
    1ebe:	cd bf       	out	0x3d, r28	; 61
    1ec0:	6d 83       	std	Y+5, r22	; 0x05
    1ec2:	7e 83       	std	Y+6, r23	; 0x06
    1ec4:	8f 83       	std	Y+7, r24	; 0x07
    1ec6:	98 87       	std	Y+8, r25	; 0x08
	/*	Calculate UBRR Value	*/
	u32 loc_UBBR_val = ((FCPU/(16*baudRate))-1);
    1ec8:	8d 81       	ldd	r24, Y+5	; 0x05
    1eca:	9e 81       	ldd	r25, Y+6	; 0x06
    1ecc:	af 81       	ldd	r26, Y+7	; 0x07
    1ece:	b8 85       	ldd	r27, Y+8	; 0x08
    1ed0:	88 0f       	add	r24, r24
    1ed2:	99 1f       	adc	r25, r25
    1ed4:	aa 1f       	adc	r26, r26
    1ed6:	bb 1f       	adc	r27, r27
    1ed8:	88 0f       	add	r24, r24
    1eda:	99 1f       	adc	r25, r25
    1edc:	aa 1f       	adc	r26, r26
    1ede:	bb 1f       	adc	r27, r27
    1ee0:	88 0f       	add	r24, r24
    1ee2:	99 1f       	adc	r25, r25
    1ee4:	aa 1f       	adc	r26, r26
    1ee6:	bb 1f       	adc	r27, r27
    1ee8:	88 0f       	add	r24, r24
    1eea:	99 1f       	adc	r25, r25
    1eec:	aa 1f       	adc	r26, r26
    1eee:	bb 1f       	adc	r27, r27
    1ef0:	9c 01       	movw	r18, r24
    1ef2:	ad 01       	movw	r20, r26
    1ef4:	80 e0       	ldi	r24, 0x00	; 0
    1ef6:	94 e2       	ldi	r25, 0x24	; 36
    1ef8:	a4 ef       	ldi	r26, 0xF4	; 244
    1efa:	b0 e0       	ldi	r27, 0x00	; 0
    1efc:	bc 01       	movw	r22, r24
    1efe:	cd 01       	movw	r24, r26
    1f00:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <__udivmodsi4>
    1f04:	da 01       	movw	r26, r20
    1f06:	c9 01       	movw	r24, r18
    1f08:	01 97       	sbiw	r24, 0x01	; 1
    1f0a:	a1 09       	sbc	r26, r1
    1f0c:	b1 09       	sbc	r27, r1
    1f0e:	89 83       	std	Y+1, r24	; 0x01
    1f10:	9a 83       	std	Y+2, r25	; 0x02
    1f12:	ab 83       	std	Y+3, r26	; 0x03
    1f14:	bc 83       	std	Y+4, r27	; 0x04
	/* Set baud rate */
	UART_UBRRH_Reg = loc_UBBR_val>>8;
    1f16:	e0 e4       	ldi	r30, 0x40	; 64
    1f18:	f0 e0       	ldi	r31, 0x00	; 0
    1f1a:	89 81       	ldd	r24, Y+1	; 0x01
    1f1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f1e:	ab 81       	ldd	r26, Y+3	; 0x03
    1f20:	bc 81       	ldd	r27, Y+4	; 0x04
    1f22:	89 2f       	mov	r24, r25
    1f24:	9a 2f       	mov	r25, r26
    1f26:	ab 2f       	mov	r26, r27
    1f28:	bb 27       	eor	r27, r27
    1f2a:	80 83       	st	Z, r24
	UART_UBRRL_Reg = loc_UBBR_val;
    1f2c:	e9 e2       	ldi	r30, 0x29	; 41
    1f2e:	f0 e0       	ldi	r31, 0x00	; 0
    1f30:	89 81       	ldd	r24, Y+1	; 0x01
    1f32:	80 83       	st	Z, r24
	/* Enable receiver and transmitter */
	UART_UCSRB_Reg = (1<<UART_RXEN_BIT)|(1<<UART_TXEN_BIT);
    1f34:	ea e2       	ldi	r30, 0x2A	; 42
    1f36:	f0 e0       	ldi	r31, 0x00	; 0
    1f38:	88 e1       	ldi	r24, 0x18	; 24
    1f3a:	80 83       	st	Z, r24
	/* Set frame format: 8data, 2stop bit */
	UART_UCSRC_Reg = (1<<UART_URSEL_BIT)|(1<<UART_USBS_BIT)|(3<<UART_UCSZ0_BIT);
    1f3c:	e0 e4       	ldi	r30, 0x40	; 64
    1f3e:	f0 e0       	ldi	r31, 0x00	; 0
    1f40:	8e e8       	ldi	r24, 0x8E	; 142
    1f42:	80 83       	st	Z, r24
}
    1f44:	28 96       	adiw	r28, 0x08	; 8
    1f46:	0f b6       	in	r0, 0x3f	; 63
    1f48:	f8 94       	cli
    1f4a:	de bf       	out	0x3e, r29	; 62
    1f4c:	0f be       	out	0x3f, r0	; 63
    1f4e:	cd bf       	out	0x3d, r28	; 61
    1f50:	cf 91       	pop	r28
    1f52:	df 91       	pop	r29
    1f54:	08 95       	ret

00001f56 <UART_voidSendByte>:


void UART_voidSendByte(u8 DataByte)
{
    1f56:	df 93       	push	r29
    1f58:	cf 93       	push	r28
    1f5a:	0f 92       	push	r0
    1f5c:	cd b7       	in	r28, 0x3d	; 61
    1f5e:	de b7       	in	r29, 0x3e	; 62
    1f60:	89 83       	std	Y+1, r24	; 0x01
	//wait for empty transmit buffer
	while(CHECK_BIT(UART_UCSRA_Reg,UART_UDRE_BIT)==0)
    1f62:	eb e2       	ldi	r30, 0x2B	; 43
    1f64:	f0 e0       	ldi	r31, 0x00	; 0
    1f66:	80 81       	ld	r24, Z
    1f68:	82 95       	swap	r24
    1f6a:	86 95       	lsr	r24
    1f6c:	87 70       	andi	r24, 0x07	; 7
    1f6e:	88 2f       	mov	r24, r24
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	81 70       	andi	r24, 0x01	; 1
    1f74:	90 70       	andi	r25, 0x00	; 0
    1f76:	00 97       	sbiw	r24, 0x00	; 0
    1f78:	a1 f3       	breq	.-24     	; 0x1f62 <UART_voidSendByte+0xc>
		;
	//put data into buffer, sends the data
	UART_UDR_Reg= DataByte;
    1f7a:	ec e2       	ldi	r30, 0x2C	; 44
    1f7c:	f0 e0       	ldi	r31, 0x00	; 0
    1f7e:	89 81       	ldd	r24, Y+1	; 0x01
    1f80:	80 83       	st	Z, r24
}
    1f82:	0f 90       	pop	r0
    1f84:	cf 91       	pop	r28
    1f86:	df 91       	pop	r29
    1f88:	08 95       	ret

00001f8a <UART_u8ReceiveByte>:
u8 UART_u8ReceiveByte(void)
{
    1f8a:	df 93       	push	r29
    1f8c:	cf 93       	push	r28
    1f8e:	cd b7       	in	r28, 0x3d	; 61
    1f90:	de b7       	in	r29, 0x3e	; 62
	//wait for data to be received
	while(CHECK_BIT(UART_UCSRA_Reg,UART_RXC_BIT)==0)
    1f92:	eb e2       	ldi	r30, 0x2B	; 43
    1f94:	f0 e0       	ldi	r31, 0x00	; 0
    1f96:	80 81       	ld	r24, Z
    1f98:	88 23       	and	r24, r24
    1f9a:	dc f7       	brge	.-10     	; 0x1f92 <UART_u8ReceiveByte+0x8>
		;
	//get and return received data from buffer
	return(UART_UDR_Reg);
    1f9c:	ec e2       	ldi	r30, 0x2C	; 44
    1f9e:	f0 e0       	ldi	r31, 0x00	; 0
    1fa0:	80 81       	ld	r24, Z
}
    1fa2:	cf 91       	pop	r28
    1fa4:	df 91       	pop	r29
    1fa6:	08 95       	ret

00001fa8 <UART_voidTransmitString>:

void UART_voidTransmitString(u8 *str)
{
    1fa8:	df 93       	push	r29
    1faa:	cf 93       	push	r28
    1fac:	00 d0       	rcall	.+0      	; 0x1fae <UART_voidTransmitString+0x6>
    1fae:	cd b7       	in	r28, 0x3d	; 61
    1fb0:	de b7       	in	r29, 0x3e	; 62
    1fb2:	9a 83       	std	Y+2, r25	; 0x02
    1fb4:	89 83       	std	Y+1, r24	; 0x01
    1fb6:	0a c0       	rjmp	.+20     	; 0x1fcc <UART_voidTransmitString+0x24>
	//wait for empty transmit buffer
	while(*str != '\0')
	{
		//send charachter by charachter
		UART_voidSendByte(*str);
    1fb8:	e9 81       	ldd	r30, Y+1	; 0x01
    1fba:	fa 81       	ldd	r31, Y+2	; 0x02
    1fbc:	80 81       	ld	r24, Z
    1fbe:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <UART_voidSendByte>
		str++;
    1fc2:	89 81       	ldd	r24, Y+1	; 0x01
    1fc4:	9a 81       	ldd	r25, Y+2	; 0x02
    1fc6:	01 96       	adiw	r24, 0x01	; 1
    1fc8:	9a 83       	std	Y+2, r25	; 0x02
    1fca:	89 83       	std	Y+1, r24	; 0x01
}

void UART_voidTransmitString(u8 *str)
{
	//wait for empty transmit buffer
	while(*str != '\0')
    1fcc:	e9 81       	ldd	r30, Y+1	; 0x01
    1fce:	fa 81       	ldd	r31, Y+2	; 0x02
    1fd0:	80 81       	ld	r24, Z
    1fd2:	88 23       	and	r24, r24
    1fd4:	89 f7       	brne	.-30     	; 0x1fb8 <UART_voidTransmitString+0x10>
	{
		//send charachter by charachter
		UART_voidSendByte(*str);
		str++;
	}
}
    1fd6:	0f 90       	pop	r0
    1fd8:	0f 90       	pop	r0
    1fda:	cf 91       	pop	r28
    1fdc:	df 91       	pop	r29
    1fde:	08 95       	ret

00001fe0 <Timer0_voidInit>:
#include "Bit_Math.h"
#include "Std_Types.h"
#include "GINT.h"

void Timer0_voidInit(void)
{
    1fe0:	df 93       	push	r29
    1fe2:	cf 93       	push	r28
    1fe4:	cd b7       	in	r28, 0x3d	; 61
    1fe6:	de b7       	in	r29, 0x3e	; 62

	#endif

#elif (Operation_Mode==CTC_Mode)

	SET_BIT(TIMER_TCCR0_REG,3);
    1fe8:	a3 e5       	ldi	r26, 0x53	; 83
    1fea:	b0 e0       	ldi	r27, 0x00	; 0
    1fec:	e3 e5       	ldi	r30, 0x53	; 83
    1fee:	f0 e0       	ldi	r31, 0x00	; 0
    1ff0:	80 81       	ld	r24, Z
    1ff2:	88 60       	ori	r24, 0x08	; 8
    1ff4:	8c 93       	st	X, r24
	CLEAR_BIT(TIMER_TCCR0_REG,6);
    1ff6:	a3 e5       	ldi	r26, 0x53	; 83
    1ff8:	b0 e0       	ldi	r27, 0x00	; 0
    1ffa:	e3 e5       	ldi	r30, 0x53	; 83
    1ffc:	f0 e0       	ldi	r31, 0x00	; 0
    1ffe:	80 81       	ld	r24, Z
    2000:	8f 7b       	andi	r24, 0xBF	; 191
    2002:	8c 93       	st	X, r24
#else
#error "You shall define Timer Operation Mode in Timer0_ConfigurationMode.h"

#endif

}
    2004:	cf 91       	pop	r28
    2006:	df 91       	pop	r29
    2008:	08 95       	ret

0000200a <Timer0_voidTimerStart>:
#endif

#if (Operation_Mode==Normal_Mode)||(Operation_Mode==CTC_Mode)

void Timer0_voidTimerStart(Timer0_PRESCALER_T prescaler)
{
    200a:	df 93       	push	r29
    200c:	cf 93       	push	r28
    200e:	0f 92       	push	r0
    2010:	cd b7       	in	r28, 0x3d	; 61
    2012:	de b7       	in	r29, 0x3e	; 62
    2014:	89 83       	std	Y+1, r24	; 0x01
	TIMER_TCCR0_REG = (TIMER_TCCR0_REG & TIMER_PRESCALAR_MASK) |prescaler;
    2016:	a3 e5       	ldi	r26, 0x53	; 83
    2018:	b0 e0       	ldi	r27, 0x00	; 0
    201a:	e3 e5       	ldi	r30, 0x53	; 83
    201c:	f0 e0       	ldi	r31, 0x00	; 0
    201e:	80 81       	ld	r24, Z
    2020:	98 2f       	mov	r25, r24
    2022:	98 7f       	andi	r25, 0xF8	; 248
    2024:	89 81       	ldd	r24, Y+1	; 0x01
    2026:	89 2b       	or	r24, r25
    2028:	8c 93       	st	X, r24
}
    202a:	0f 90       	pop	r0
    202c:	cf 91       	pop	r28
    202e:	df 91       	pop	r29
    2030:	08 95       	ret

00002032 <Timer0_voidTimerStop>:
void Timer0_voidTimerStop(void)
{
    2032:	df 93       	push	r29
    2034:	cf 93       	push	r28
    2036:	cd b7       	in	r28, 0x3d	; 61
    2038:	de b7       	in	r29, 0x3e	; 62
	TIMER_TCCR0_REG = (TIMER_TCCR0_REG & TIMER_PRESCALAR_MASK);
    203a:	a3 e5       	ldi	r26, 0x53	; 83
    203c:	b0 e0       	ldi	r27, 0x00	; 0
    203e:	e3 e5       	ldi	r30, 0x53	; 83
    2040:	f0 e0       	ldi	r31, 0x00	; 0
    2042:	80 81       	ld	r24, Z
    2044:	88 7f       	andi	r24, 0xF8	; 248
    2046:	8c 93       	st	X, r24
}
    2048:	cf 91       	pop	r28
    204a:	df 91       	pop	r29
    204c:	08 95       	ret

0000204e <Timer0_voidEnableCTCInterrupt>:
#endif

#if (Operation_Mode==CTC_Mode)

void Timer0_voidEnableCTCInterrupt(void)
{
    204e:	df 93       	push	r29
    2050:	cf 93       	push	r28
    2052:	cd b7       	in	r28, 0x3d	; 61
    2054:	de b7       	in	r29, 0x3e	; 62
	//enable all interrupts
	GINT_voidEnableAllInterrupts();
    2056:	0e 94 53 10 	call	0x20a6	; 0x20a6 <GINT_voidEnableAllInterrupts>

	//enable the compare match interrupt
	SET_BIT(TIMER_TIMSK_REG,1);
    205a:	a9 e5       	ldi	r26, 0x59	; 89
    205c:	b0 e0       	ldi	r27, 0x00	; 0
    205e:	e9 e5       	ldi	r30, 0x59	; 89
    2060:	f0 e0       	ldi	r31, 0x00	; 0
    2062:	80 81       	ld	r24, Z
    2064:	82 60       	ori	r24, 0x02	; 2
    2066:	8c 93       	st	X, r24
}
    2068:	cf 91       	pop	r28
    206a:	df 91       	pop	r29
    206c:	08 95       	ret

0000206e <Timer0_voidDisableCTCInterrupt>:
void Timer0_voidDisableCTCInterrupt(void)
{
    206e:	df 93       	push	r29
    2070:	cf 93       	push	r28
    2072:	cd b7       	in	r28, 0x3d	; 61
    2074:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TIMER_TIMSK_REG,1);
    2076:	a9 e5       	ldi	r26, 0x59	; 89
    2078:	b0 e0       	ldi	r27, 0x00	; 0
    207a:	e9 e5       	ldi	r30, 0x59	; 89
    207c:	f0 e0       	ldi	r31, 0x00	; 0
    207e:	80 81       	ld	r24, Z
    2080:	8d 7f       	andi	r24, 0xFD	; 253
    2082:	8c 93       	st	X, r24
}
    2084:	cf 91       	pop	r28
    2086:	df 91       	pop	r29
    2088:	08 95       	ret

0000208a <Timer0_voidSetOCR>:
void Timer0_voidSetOCR(u8 OCR_Value)
{
    208a:	df 93       	push	r29
    208c:	cf 93       	push	r28
    208e:	0f 92       	push	r0
    2090:	cd b7       	in	r28, 0x3d	; 61
    2092:	de b7       	in	r29, 0x3e	; 62
    2094:	89 83       	std	Y+1, r24	; 0x01
	TIMER_OCR0_REG=OCR_Value;
    2096:	ec e5       	ldi	r30, 0x5C	; 92
    2098:	f0 e0       	ldi	r31, 0x00	; 0
    209a:	89 81       	ldd	r24, Y+1	; 0x01
    209c:	80 83       	st	Z, r24
}
    209e:	0f 90       	pop	r0
    20a0:	cf 91       	pop	r28
    20a2:	df 91       	pop	r29
    20a4:	08 95       	ret

000020a6 <GINT_voidEnableAllInterrupts>:
#include "GINT.h"
#include "Bit_Math.h"
#include "GINT_Reg.h"

void GINT_voidEnableAllInterrupts(void)
{
    20a6:	df 93       	push	r29
    20a8:	cf 93       	push	r28
    20aa:	cd b7       	in	r28, 0x3d	; 61
    20ac:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GINT_SREG_REG,7);
    20ae:	af e5       	ldi	r26, 0x5F	; 95
    20b0:	b0 e0       	ldi	r27, 0x00	; 0
    20b2:	ef e5       	ldi	r30, 0x5F	; 95
    20b4:	f0 e0       	ldi	r31, 0x00	; 0
    20b6:	80 81       	ld	r24, Z
    20b8:	80 68       	ori	r24, 0x80	; 128
    20ba:	8c 93       	st	X, r24
}
    20bc:	cf 91       	pop	r28
    20be:	df 91       	pop	r29
    20c0:	08 95       	ret

000020c2 <GINT_voidDisableAllInterrupts>:
void GINT_voidDisableAllInterrupts(void)
{
    20c2:	df 93       	push	r29
    20c4:	cf 93       	push	r28
    20c6:	cd b7       	in	r28, 0x3d	; 61
    20c8:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(GINT_SREG_REG,7);
    20ca:	af e5       	ldi	r26, 0x5F	; 95
    20cc:	b0 e0       	ldi	r27, 0x00	; 0
    20ce:	ef e5       	ldi	r30, 0x5F	; 95
    20d0:	f0 e0       	ldi	r31, 0x00	; 0
    20d2:	80 81       	ld	r24, Z
    20d4:	8f 77       	andi	r24, 0x7F	; 127
    20d6:	8c 93       	st	X, r24
}
    20d8:	cf 91       	pop	r28
    20da:	df 91       	pop	r29
    20dc:	08 95       	ret

000020de <EXTINT_voidConfigureEXTINT>:
#include "Std_Types.h"
#include "EXTINT_Reg.h"
#include "EXTINT.h"

void EXTINT_voidConfigureEXTINT(EXTINT_ID_T INTid,EXTINT_SenseCtrl_T SenseCtrl)
{
    20de:	df 93       	push	r29
    20e0:	cf 93       	push	r28
    20e2:	00 d0       	rcall	.+0      	; 0x20e4 <EXTINT_voidConfigureEXTINT+0x6>
    20e4:	00 d0       	rcall	.+0      	; 0x20e6 <EXTINT_voidConfigureEXTINT+0x8>
    20e6:	cd b7       	in	r28, 0x3d	; 61
    20e8:	de b7       	in	r29, 0x3e	; 62
    20ea:	89 83       	std	Y+1, r24	; 0x01
    20ec:	6a 83       	std	Y+2, r22	; 0x02
	switch(INTid)
    20ee:	89 81       	ldd	r24, Y+1	; 0x01
    20f0:	28 2f       	mov	r18, r24
    20f2:	30 e0       	ldi	r19, 0x00	; 0
    20f4:	3c 83       	std	Y+4, r19	; 0x04
    20f6:	2b 83       	std	Y+3, r18	; 0x03
    20f8:	8b 81       	ldd	r24, Y+3	; 0x03
    20fa:	9c 81       	ldd	r25, Y+4	; 0x04
    20fc:	81 30       	cpi	r24, 0x01	; 1
    20fe:	91 05       	cpc	r25, r1
    2100:	09 f4       	brne	.+2      	; 0x2104 <EXTINT_voidConfigureEXTINT+0x26>
    2102:	5a c0       	rjmp	.+180    	; 0x21b8 <EXTINT_voidConfigureEXTINT+0xda>
    2104:	2b 81       	ldd	r18, Y+3	; 0x03
    2106:	3c 81       	ldd	r19, Y+4	; 0x04
    2108:	22 30       	cpi	r18, 0x02	; 2
    210a:	31 05       	cpc	r19, r1
    210c:	09 f4       	brne	.+2      	; 0x2110 <EXTINT_voidConfigureEXTINT+0x32>
    210e:	a3 c0       	rjmp	.+326    	; 0x2256 <EXTINT_voidConfigureEXTINT+0x178>
    2110:	8b 81       	ldd	r24, Y+3	; 0x03
    2112:	9c 81       	ldd	r25, Y+4	; 0x04
    2114:	00 97       	sbiw	r24, 0x00	; 0
    2116:	09 f0       	breq	.+2      	; 0x211a <EXTINT_voidConfigureEXTINT+0x3c>
    2118:	ba c0       	rjmp	.+372    	; 0x228e <EXTINT_voidConfigureEXTINT+0x1b0>
	{


	case EXT_INT0:
		//Configure sense control
		if (SenseCtrl == EXT_RiseEdge)
    211a:	8a 81       	ldd	r24, Y+2	; 0x02
    211c:	81 30       	cpi	r24, 0x01	; 1
    211e:	79 f4       	brne	.+30     	; 0x213e <EXTINT_voidConfigureEXTINT+0x60>
		{
			SET_BIT(MCUCR_REG,0);
    2120:	a5 e5       	ldi	r26, 0x55	; 85
    2122:	b0 e0       	ldi	r27, 0x00	; 0
    2124:	e5 e5       	ldi	r30, 0x55	; 85
    2126:	f0 e0       	ldi	r31, 0x00	; 0
    2128:	80 81       	ld	r24, Z
    212a:	81 60       	ori	r24, 0x01	; 1
    212c:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG,1);
    212e:	a5 e5       	ldi	r26, 0x55	; 85
    2130:	b0 e0       	ldi	r27, 0x00	; 0
    2132:	e5 e5       	ldi	r30, 0x55	; 85
    2134:	f0 e0       	ldi	r31, 0x00	; 0
    2136:	80 81       	ld	r24, Z
    2138:	82 60       	ori	r24, 0x02	; 2
    213a:	8c 93       	st	X, r24
    213c:	35 c0       	rjmp	.+106    	; 0x21a8 <EXTINT_voidConfigureEXTINT+0xca>

		}
		else if (SenseCtrl == EXT_FallEdge)
    213e:	8a 81       	ldd	r24, Y+2	; 0x02
    2140:	88 23       	and	r24, r24
    2142:	79 f4       	brne	.+30     	; 0x2162 <EXTINT_voidConfigureEXTINT+0x84>
		{
			CLEAR_BIT(MCUCR_REG,0);
    2144:	a5 e5       	ldi	r26, 0x55	; 85
    2146:	b0 e0       	ldi	r27, 0x00	; 0
    2148:	e5 e5       	ldi	r30, 0x55	; 85
    214a:	f0 e0       	ldi	r31, 0x00	; 0
    214c:	80 81       	ld	r24, Z
    214e:	8e 7f       	andi	r24, 0xFE	; 254
    2150:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG,1);
    2152:	a5 e5       	ldi	r26, 0x55	; 85
    2154:	b0 e0       	ldi	r27, 0x00	; 0
    2156:	e5 e5       	ldi	r30, 0x55	; 85
    2158:	f0 e0       	ldi	r31, 0x00	; 0
    215a:	80 81       	ld	r24, Z
    215c:	82 60       	ori	r24, 0x02	; 2
    215e:	8c 93       	st	X, r24
    2160:	23 c0       	rjmp	.+70     	; 0x21a8 <EXTINT_voidConfigureEXTINT+0xca>
		}
		else if (SenseCtrl == EXT_BothEdge)
    2162:	8a 81       	ldd	r24, Y+2	; 0x02
    2164:	82 30       	cpi	r24, 0x02	; 2
    2166:	79 f4       	brne	.+30     	; 0x2186 <EXTINT_voidConfigureEXTINT+0xa8>
		{
			SET_BIT(MCUCR_REG,0);
    2168:	a5 e5       	ldi	r26, 0x55	; 85
    216a:	b0 e0       	ldi	r27, 0x00	; 0
    216c:	e5 e5       	ldi	r30, 0x55	; 85
    216e:	f0 e0       	ldi	r31, 0x00	; 0
    2170:	80 81       	ld	r24, Z
    2172:	81 60       	ori	r24, 0x01	; 1
    2174:	8c 93       	st	X, r24
			CLEAR_BIT(MCUCR_REG,1);
    2176:	a5 e5       	ldi	r26, 0x55	; 85
    2178:	b0 e0       	ldi	r27, 0x00	; 0
    217a:	e5 e5       	ldi	r30, 0x55	; 85
    217c:	f0 e0       	ldi	r31, 0x00	; 0
    217e:	80 81       	ld	r24, Z
    2180:	8d 7f       	andi	r24, 0xFD	; 253
    2182:	8c 93       	st	X, r24
    2184:	11 c0       	rjmp	.+34     	; 0x21a8 <EXTINT_voidConfigureEXTINT+0xca>
		}
		else if (SenseCtrl == EXT_LowLevel)
    2186:	8a 81       	ldd	r24, Y+2	; 0x02
    2188:	83 30       	cpi	r24, 0x03	; 3
    218a:	71 f4       	brne	.+28     	; 0x21a8 <EXTINT_voidConfigureEXTINT+0xca>
		{
			CLEAR_BIT(MCUCR_REG,0);
    218c:	a5 e5       	ldi	r26, 0x55	; 85
    218e:	b0 e0       	ldi	r27, 0x00	; 0
    2190:	e5 e5       	ldi	r30, 0x55	; 85
    2192:	f0 e0       	ldi	r31, 0x00	; 0
    2194:	80 81       	ld	r24, Z
    2196:	8e 7f       	andi	r24, 0xFE	; 254
    2198:	8c 93       	st	X, r24
			CLEAR_BIT(MCUCR_REG,1);
    219a:	a5 e5       	ldi	r26, 0x55	; 85
    219c:	b0 e0       	ldi	r27, 0x00	; 0
    219e:	e5 e5       	ldi	r30, 0x55	; 85
    21a0:	f0 e0       	ldi	r31, 0x00	; 0
    21a2:	80 81       	ld	r24, Z
    21a4:	8d 7f       	andi	r24, 0xFD	; 253
    21a6:	8c 93       	st	X, r24
		else
		{
			// DO NOTHING
		}
		//Enable INT0 Interrupt
		SET_BIT(GICR_REG,INT0_EN_BIT); //Magic Number
    21a8:	ab e5       	ldi	r26, 0x5B	; 91
    21aa:	b0 e0       	ldi	r27, 0x00	; 0
    21ac:	eb e5       	ldi	r30, 0x5B	; 91
    21ae:	f0 e0       	ldi	r31, 0x00	; 0
    21b0:	80 81       	ld	r24, Z
    21b2:	80 64       	ori	r24, 0x40	; 64
    21b4:	8c 93       	st	X, r24
    21b6:	6b c0       	rjmp	.+214    	; 0x228e <EXTINT_voidConfigureEXTINT+0x1b0>
		break;

	case EXT_INT1:
		//Configure sense control
		if (SenseCtrl == EXT_RiseEdge)
    21b8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ba:	81 30       	cpi	r24, 0x01	; 1
    21bc:	79 f4       	brne	.+30     	; 0x21dc <EXTINT_voidConfigureEXTINT+0xfe>
		{
			SET_BIT(MCUCR_REG,2);
    21be:	a5 e5       	ldi	r26, 0x55	; 85
    21c0:	b0 e0       	ldi	r27, 0x00	; 0
    21c2:	e5 e5       	ldi	r30, 0x55	; 85
    21c4:	f0 e0       	ldi	r31, 0x00	; 0
    21c6:	80 81       	ld	r24, Z
    21c8:	84 60       	ori	r24, 0x04	; 4
    21ca:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG,3);
    21cc:	a5 e5       	ldi	r26, 0x55	; 85
    21ce:	b0 e0       	ldi	r27, 0x00	; 0
    21d0:	e5 e5       	ldi	r30, 0x55	; 85
    21d2:	f0 e0       	ldi	r31, 0x00	; 0
    21d4:	80 81       	ld	r24, Z
    21d6:	88 60       	ori	r24, 0x08	; 8
    21d8:	8c 93       	st	X, r24
    21da:	35 c0       	rjmp	.+106    	; 0x2246 <EXTINT_voidConfigureEXTINT+0x168>

		}
		else if (SenseCtrl == EXT_FallEdge)
    21dc:	8a 81       	ldd	r24, Y+2	; 0x02
    21de:	88 23       	and	r24, r24
    21e0:	79 f4       	brne	.+30     	; 0x2200 <EXTINT_voidConfigureEXTINT+0x122>
		{
			CLEAR_BIT(MCUCR_REG,2);
    21e2:	a5 e5       	ldi	r26, 0x55	; 85
    21e4:	b0 e0       	ldi	r27, 0x00	; 0
    21e6:	e5 e5       	ldi	r30, 0x55	; 85
    21e8:	f0 e0       	ldi	r31, 0x00	; 0
    21ea:	80 81       	ld	r24, Z
    21ec:	8b 7f       	andi	r24, 0xFB	; 251
    21ee:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG,3);
    21f0:	a5 e5       	ldi	r26, 0x55	; 85
    21f2:	b0 e0       	ldi	r27, 0x00	; 0
    21f4:	e5 e5       	ldi	r30, 0x55	; 85
    21f6:	f0 e0       	ldi	r31, 0x00	; 0
    21f8:	80 81       	ld	r24, Z
    21fa:	88 60       	ori	r24, 0x08	; 8
    21fc:	8c 93       	st	X, r24
    21fe:	23 c0       	rjmp	.+70     	; 0x2246 <EXTINT_voidConfigureEXTINT+0x168>
		}
		else if (SenseCtrl == EXT_BothEdge)
    2200:	8a 81       	ldd	r24, Y+2	; 0x02
    2202:	82 30       	cpi	r24, 0x02	; 2
    2204:	79 f4       	brne	.+30     	; 0x2224 <EXTINT_voidConfigureEXTINT+0x146>
		{
			SET_BIT(MCUCR_REG,2);
    2206:	a5 e5       	ldi	r26, 0x55	; 85
    2208:	b0 e0       	ldi	r27, 0x00	; 0
    220a:	e5 e5       	ldi	r30, 0x55	; 85
    220c:	f0 e0       	ldi	r31, 0x00	; 0
    220e:	80 81       	ld	r24, Z
    2210:	84 60       	ori	r24, 0x04	; 4
    2212:	8c 93       	st	X, r24
			CLEAR_BIT(MCUCR_REG,3);
    2214:	a5 e5       	ldi	r26, 0x55	; 85
    2216:	b0 e0       	ldi	r27, 0x00	; 0
    2218:	e5 e5       	ldi	r30, 0x55	; 85
    221a:	f0 e0       	ldi	r31, 0x00	; 0
    221c:	80 81       	ld	r24, Z
    221e:	87 7f       	andi	r24, 0xF7	; 247
    2220:	8c 93       	st	X, r24
    2222:	11 c0       	rjmp	.+34     	; 0x2246 <EXTINT_voidConfigureEXTINT+0x168>
		}
		else if (SenseCtrl == EXT_LowLevel)
    2224:	8a 81       	ldd	r24, Y+2	; 0x02
    2226:	83 30       	cpi	r24, 0x03	; 3
    2228:	71 f4       	brne	.+28     	; 0x2246 <EXTINT_voidConfigureEXTINT+0x168>
		{
			CLEAR_BIT(MCUCR_REG,2);
    222a:	a5 e5       	ldi	r26, 0x55	; 85
    222c:	b0 e0       	ldi	r27, 0x00	; 0
    222e:	e5 e5       	ldi	r30, 0x55	; 85
    2230:	f0 e0       	ldi	r31, 0x00	; 0
    2232:	80 81       	ld	r24, Z
    2234:	8b 7f       	andi	r24, 0xFB	; 251
    2236:	8c 93       	st	X, r24
			CLEAR_BIT(MCUCR_REG,3);
    2238:	a5 e5       	ldi	r26, 0x55	; 85
    223a:	b0 e0       	ldi	r27, 0x00	; 0
    223c:	e5 e5       	ldi	r30, 0x55	; 85
    223e:	f0 e0       	ldi	r31, 0x00	; 0
    2240:	80 81       	ld	r24, Z
    2242:	87 7f       	andi	r24, 0xF7	; 247
    2244:	8c 93       	st	X, r24
		}
		else
		{
			// DO NOTHING
		}
		SET_BIT(GICR_REG,INT1_EN_BIT); //Magic Number
    2246:	ab e5       	ldi	r26, 0x5B	; 91
    2248:	b0 e0       	ldi	r27, 0x00	; 0
    224a:	eb e5       	ldi	r30, 0x5B	; 91
    224c:	f0 e0       	ldi	r31, 0x00	; 0
    224e:	80 81       	ld	r24, Z
    2250:	80 68       	ori	r24, 0x80	; 128
    2252:	8c 93       	st	X, r24
    2254:	1c c0       	rjmp	.+56     	; 0x228e <EXTINT_voidConfigureEXTINT+0x1b0>
		break;

	case EXT_INT2:
		if (SenseCtrl == EXT_FallEdge)
    2256:	8a 81       	ldd	r24, Y+2	; 0x02
    2258:	88 23       	and	r24, r24
    225a:	41 f4       	brne	.+16     	; 0x226c <EXTINT_voidConfigureEXTINT+0x18e>
		{
			CLEAR_BIT(MCUCSR_REG,6);
    225c:	a4 e5       	ldi	r26, 0x54	; 84
    225e:	b0 e0       	ldi	r27, 0x00	; 0
    2260:	e4 e5       	ldi	r30, 0x54	; 84
    2262:	f0 e0       	ldi	r31, 0x00	; 0
    2264:	80 81       	ld	r24, Z
    2266:	8f 7b       	andi	r24, 0xBF	; 191
    2268:	8c 93       	st	X, r24
    226a:	0a c0       	rjmp	.+20     	; 0x2280 <EXTINT_voidConfigureEXTINT+0x1a2>

		}
		else if (SenseCtrl == EXT_RiseEdge)
    226c:	8a 81       	ldd	r24, Y+2	; 0x02
    226e:	81 30       	cpi	r24, 0x01	; 1
    2270:	39 f4       	brne	.+14     	; 0x2280 <EXTINT_voidConfigureEXTINT+0x1a2>
		{
			SET_BIT(MCUCSR_REG,6);
    2272:	a4 e5       	ldi	r26, 0x54	; 84
    2274:	b0 e0       	ldi	r27, 0x00	; 0
    2276:	e4 e5       	ldi	r30, 0x54	; 84
    2278:	f0 e0       	ldi	r31, 0x00	; 0
    227a:	80 81       	ld	r24, Z
    227c:	80 64       	ori	r24, 0x40	; 64
    227e:	8c 93       	st	X, r24
		}
		else
		{
			// DO NOTHING
		}
		SET_BIT(GICR_REG,INT2_EN_BIT); //Magic Number
    2280:	ab e5       	ldi	r26, 0x5B	; 91
    2282:	b0 e0       	ldi	r27, 0x00	; 0
    2284:	eb e5       	ldi	r30, 0x5B	; 91
    2286:	f0 e0       	ldi	r31, 0x00	; 0
    2288:	80 81       	ld	r24, Z
    228a:	80 62       	ori	r24, 0x20	; 32
    228c:	8c 93       	st	X, r24
		break;


	}

}
    228e:	0f 90       	pop	r0
    2290:	0f 90       	pop	r0
    2292:	0f 90       	pop	r0
    2294:	0f 90       	pop	r0
    2296:	cf 91       	pop	r28
    2298:	df 91       	pop	r29
    229a:	08 95       	ret

0000229c <EXTINT_voidDisableEXTINT>:
void EXTINT_voidDisableEXTINT(EXTINT_ID_T INTid)
{
    229c:	df 93       	push	r29
    229e:	cf 93       	push	r28
    22a0:	00 d0       	rcall	.+0      	; 0x22a2 <EXTINT_voidDisableEXTINT+0x6>
    22a2:	0f 92       	push	r0
    22a4:	cd b7       	in	r28, 0x3d	; 61
    22a6:	de b7       	in	r29, 0x3e	; 62
    22a8:	89 83       	std	Y+1, r24	; 0x01
	switch (INTid)
    22aa:	89 81       	ldd	r24, Y+1	; 0x01
    22ac:	28 2f       	mov	r18, r24
    22ae:	30 e0       	ldi	r19, 0x00	; 0
    22b0:	3b 83       	std	Y+3, r19	; 0x03
    22b2:	2a 83       	std	Y+2, r18	; 0x02
    22b4:	8a 81       	ldd	r24, Y+2	; 0x02
    22b6:	9b 81       	ldd	r25, Y+3	; 0x03
    22b8:	81 30       	cpi	r24, 0x01	; 1
    22ba:	91 05       	cpc	r25, r1
    22bc:	89 f0       	breq	.+34     	; 0x22e0 <EXTINT_voidDisableEXTINT+0x44>
    22be:	2a 81       	ldd	r18, Y+2	; 0x02
    22c0:	3b 81       	ldd	r19, Y+3	; 0x03
    22c2:	22 30       	cpi	r18, 0x02	; 2
    22c4:	31 05       	cpc	r19, r1
    22c6:	a1 f0       	breq	.+40     	; 0x22f0 <EXTINT_voidDisableEXTINT+0x54>
    22c8:	8a 81       	ldd	r24, Y+2	; 0x02
    22ca:	9b 81       	ldd	r25, Y+3	; 0x03
    22cc:	00 97       	sbiw	r24, 0x00	; 0
    22ce:	b9 f4       	brne	.+46     	; 0x22fe <EXTINT_voidDisableEXTINT+0x62>
	{
	case EXT_INT0:
		CLEAR_BIT(GICR_REG,INT0_EN_BIT);
    22d0:	ab e5       	ldi	r26, 0x5B	; 91
    22d2:	b0 e0       	ldi	r27, 0x00	; 0
    22d4:	eb e5       	ldi	r30, 0x5B	; 91
    22d6:	f0 e0       	ldi	r31, 0x00	; 0
    22d8:	80 81       	ld	r24, Z
    22da:	8f 7b       	andi	r24, 0xBF	; 191
    22dc:	8c 93       	st	X, r24
    22de:	0f c0       	rjmp	.+30     	; 0x22fe <EXTINT_voidDisableEXTINT+0x62>
		break;
	case EXT_INT1:
		CLEAR_BIT(GICR_REG,INT1_EN_BIT);
    22e0:	ab e5       	ldi	r26, 0x5B	; 91
    22e2:	b0 e0       	ldi	r27, 0x00	; 0
    22e4:	eb e5       	ldi	r30, 0x5B	; 91
    22e6:	f0 e0       	ldi	r31, 0x00	; 0
    22e8:	80 81       	ld	r24, Z
    22ea:	8f 77       	andi	r24, 0x7F	; 127
    22ec:	8c 93       	st	X, r24
    22ee:	07 c0       	rjmp	.+14     	; 0x22fe <EXTINT_voidDisableEXTINT+0x62>
		break;
	case EXT_INT2:
		CLEAR_BIT(GICR_REG,INT2_EN_BIT);
    22f0:	ab e5       	ldi	r26, 0x5B	; 91
    22f2:	b0 e0       	ldi	r27, 0x00	; 0
    22f4:	eb e5       	ldi	r30, 0x5B	; 91
    22f6:	f0 e0       	ldi	r31, 0x00	; 0
    22f8:	80 81       	ld	r24, Z
    22fa:	8f 7d       	andi	r24, 0xDF	; 223
    22fc:	8c 93       	st	X, r24
		break;
	}
}
    22fe:	0f 90       	pop	r0
    2300:	0f 90       	pop	r0
    2302:	0f 90       	pop	r0
    2304:	cf 91       	pop	r28
    2306:	df 91       	pop	r29
    2308:	08 95       	ret

0000230a <DIO_voidconfigureChannel>:

#include "LCD.h"
#include "ADC.h"

void DIO_voidconfigureChannel(DIO_PORT_T port,DIO_PIN_T pin,DIO_DIR_T dir)
{
    230a:	df 93       	push	r29
    230c:	cf 93       	push	r28
    230e:	00 d0       	rcall	.+0      	; 0x2310 <DIO_voidconfigureChannel+0x6>
    2310:	00 d0       	rcall	.+0      	; 0x2312 <DIO_voidconfigureChannel+0x8>
    2312:	0f 92       	push	r0
    2314:	cd b7       	in	r28, 0x3d	; 61
    2316:	de b7       	in	r29, 0x3e	; 62
    2318:	89 83       	std	Y+1, r24	; 0x01
    231a:	6a 83       	std	Y+2, r22	; 0x02
    231c:	4b 83       	std	Y+3, r20	; 0x03
	switch(port)
    231e:	89 81       	ldd	r24, Y+1	; 0x01
    2320:	28 2f       	mov	r18, r24
    2322:	30 e0       	ldi	r19, 0x00	; 0
    2324:	3d 83       	std	Y+5, r19	; 0x05
    2326:	2c 83       	std	Y+4, r18	; 0x04
    2328:	8c 81       	ldd	r24, Y+4	; 0x04
    232a:	9d 81       	ldd	r25, Y+5	; 0x05
    232c:	81 30       	cpi	r24, 0x01	; 1
    232e:	91 05       	cpc	r25, r1
    2330:	09 f4       	brne	.+2      	; 0x2334 <DIO_voidconfigureChannel+0x2a>
    2332:	43 c0       	rjmp	.+134    	; 0x23ba <DIO_voidconfigureChannel+0xb0>
    2334:	2c 81       	ldd	r18, Y+4	; 0x04
    2336:	3d 81       	ldd	r19, Y+5	; 0x05
    2338:	22 30       	cpi	r18, 0x02	; 2
    233a:	31 05       	cpc	r19, r1
    233c:	2c f4       	brge	.+10     	; 0x2348 <DIO_voidconfigureChannel+0x3e>
    233e:	8c 81       	ldd	r24, Y+4	; 0x04
    2340:	9d 81       	ldd	r25, Y+5	; 0x05
    2342:	00 97       	sbiw	r24, 0x00	; 0
    2344:	71 f0       	breq	.+28     	; 0x2362 <DIO_voidconfigureChannel+0x58>
    2346:	bc c0       	rjmp	.+376    	; 0x24c0 <DIO_voidconfigureChannel+0x1b6>
    2348:	2c 81       	ldd	r18, Y+4	; 0x04
    234a:	3d 81       	ldd	r19, Y+5	; 0x05
    234c:	22 30       	cpi	r18, 0x02	; 2
    234e:	31 05       	cpc	r19, r1
    2350:	09 f4       	brne	.+2      	; 0x2354 <DIO_voidconfigureChannel+0x4a>
    2352:	5f c0       	rjmp	.+190    	; 0x2412 <DIO_voidconfigureChannel+0x108>
    2354:	8c 81       	ldd	r24, Y+4	; 0x04
    2356:	9d 81       	ldd	r25, Y+5	; 0x05
    2358:	83 30       	cpi	r24, 0x03	; 3
    235a:	91 05       	cpc	r25, r1
    235c:	09 f4       	brne	.+2      	; 0x2360 <DIO_voidconfigureChannel+0x56>
    235e:	85 c0       	rjmp	.+266    	; 0x246a <DIO_voidconfigureChannel+0x160>
    2360:	af c0       	rjmp	.+350    	; 0x24c0 <DIO_voidconfigureChannel+0x1b6>
	{
	case DIO_PORTA:
		if (dir == DIO_INPUT)
    2362:	8b 81       	ldd	r24, Y+3	; 0x03
    2364:	88 23       	and	r24, r24
    2366:	a9 f4       	brne	.+42     	; 0x2392 <DIO_voidconfigureChannel+0x88>
		{
			CLEAR_BIT(DIO_DDRA_REG,pin);
    2368:	aa e3       	ldi	r26, 0x3A	; 58
    236a:	b0 e0       	ldi	r27, 0x00	; 0
    236c:	ea e3       	ldi	r30, 0x3A	; 58
    236e:	f0 e0       	ldi	r31, 0x00	; 0
    2370:	80 81       	ld	r24, Z
    2372:	48 2f       	mov	r20, r24
    2374:	8a 81       	ldd	r24, Y+2	; 0x02
    2376:	28 2f       	mov	r18, r24
    2378:	30 e0       	ldi	r19, 0x00	; 0
    237a:	81 e0       	ldi	r24, 0x01	; 1
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	02 2e       	mov	r0, r18
    2380:	02 c0       	rjmp	.+4      	; 0x2386 <DIO_voidconfigureChannel+0x7c>
    2382:	88 0f       	add	r24, r24
    2384:	99 1f       	adc	r25, r25
    2386:	0a 94       	dec	r0
    2388:	e2 f7       	brpl	.-8      	; 0x2382 <DIO_voidconfigureChannel+0x78>
    238a:	80 95       	com	r24
    238c:	84 23       	and	r24, r20
    238e:	8c 93       	st	X, r24
    2390:	97 c0       	rjmp	.+302    	; 0x24c0 <DIO_voidconfigureChannel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRA_REG,pin);
    2392:	aa e3       	ldi	r26, 0x3A	; 58
    2394:	b0 e0       	ldi	r27, 0x00	; 0
    2396:	ea e3       	ldi	r30, 0x3A	; 58
    2398:	f0 e0       	ldi	r31, 0x00	; 0
    239a:	80 81       	ld	r24, Z
    239c:	48 2f       	mov	r20, r24
    239e:	8a 81       	ldd	r24, Y+2	; 0x02
    23a0:	28 2f       	mov	r18, r24
    23a2:	30 e0       	ldi	r19, 0x00	; 0
    23a4:	81 e0       	ldi	r24, 0x01	; 1
    23a6:	90 e0       	ldi	r25, 0x00	; 0
    23a8:	02 2e       	mov	r0, r18
    23aa:	02 c0       	rjmp	.+4      	; 0x23b0 <DIO_voidconfigureChannel+0xa6>
    23ac:	88 0f       	add	r24, r24
    23ae:	99 1f       	adc	r25, r25
    23b0:	0a 94       	dec	r0
    23b2:	e2 f7       	brpl	.-8      	; 0x23ac <DIO_voidconfigureChannel+0xa2>
    23b4:	84 2b       	or	r24, r20
    23b6:	8c 93       	st	X, r24
    23b8:	83 c0       	rjmp	.+262    	; 0x24c0 <DIO_voidconfigureChannel+0x1b6>

		}
		break;

	case DIO_PORTB:
		if (dir == DIO_INPUT)
    23ba:	8b 81       	ldd	r24, Y+3	; 0x03
    23bc:	88 23       	and	r24, r24
    23be:	a9 f4       	brne	.+42     	; 0x23ea <DIO_voidconfigureChannel+0xe0>
		{
			CLEAR_BIT(DIO_DDRB_REG,pin);
    23c0:	a7 e3       	ldi	r26, 0x37	; 55
    23c2:	b0 e0       	ldi	r27, 0x00	; 0
    23c4:	e7 e3       	ldi	r30, 0x37	; 55
    23c6:	f0 e0       	ldi	r31, 0x00	; 0
    23c8:	80 81       	ld	r24, Z
    23ca:	48 2f       	mov	r20, r24
    23cc:	8a 81       	ldd	r24, Y+2	; 0x02
    23ce:	28 2f       	mov	r18, r24
    23d0:	30 e0       	ldi	r19, 0x00	; 0
    23d2:	81 e0       	ldi	r24, 0x01	; 1
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	02 2e       	mov	r0, r18
    23d8:	02 c0       	rjmp	.+4      	; 0x23de <DIO_voidconfigureChannel+0xd4>
    23da:	88 0f       	add	r24, r24
    23dc:	99 1f       	adc	r25, r25
    23de:	0a 94       	dec	r0
    23e0:	e2 f7       	brpl	.-8      	; 0x23da <DIO_voidconfigureChannel+0xd0>
    23e2:	80 95       	com	r24
    23e4:	84 23       	and	r24, r20
    23e6:	8c 93       	st	X, r24
    23e8:	6b c0       	rjmp	.+214    	; 0x24c0 <DIO_voidconfigureChannel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRB_REG,pin);
    23ea:	a7 e3       	ldi	r26, 0x37	; 55
    23ec:	b0 e0       	ldi	r27, 0x00	; 0
    23ee:	e7 e3       	ldi	r30, 0x37	; 55
    23f0:	f0 e0       	ldi	r31, 0x00	; 0
    23f2:	80 81       	ld	r24, Z
    23f4:	48 2f       	mov	r20, r24
    23f6:	8a 81       	ldd	r24, Y+2	; 0x02
    23f8:	28 2f       	mov	r18, r24
    23fa:	30 e0       	ldi	r19, 0x00	; 0
    23fc:	81 e0       	ldi	r24, 0x01	; 1
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	02 2e       	mov	r0, r18
    2402:	02 c0       	rjmp	.+4      	; 0x2408 <DIO_voidconfigureChannel+0xfe>
    2404:	88 0f       	add	r24, r24
    2406:	99 1f       	adc	r25, r25
    2408:	0a 94       	dec	r0
    240a:	e2 f7       	brpl	.-8      	; 0x2404 <DIO_voidconfigureChannel+0xfa>
    240c:	84 2b       	or	r24, r20
    240e:	8c 93       	st	X, r24
    2410:	57 c0       	rjmp	.+174    	; 0x24c0 <DIO_voidconfigureChannel+0x1b6>

		}
		break;

	case DIO_PORTC:
		if (dir == DIO_INPUT)
    2412:	8b 81       	ldd	r24, Y+3	; 0x03
    2414:	88 23       	and	r24, r24
    2416:	a9 f4       	brne	.+42     	; 0x2442 <DIO_voidconfigureChannel+0x138>
		{
			CLEAR_BIT(DIO_DDRC_REG,pin);
    2418:	a4 e3       	ldi	r26, 0x34	; 52
    241a:	b0 e0       	ldi	r27, 0x00	; 0
    241c:	e4 e3       	ldi	r30, 0x34	; 52
    241e:	f0 e0       	ldi	r31, 0x00	; 0
    2420:	80 81       	ld	r24, Z
    2422:	48 2f       	mov	r20, r24
    2424:	8a 81       	ldd	r24, Y+2	; 0x02
    2426:	28 2f       	mov	r18, r24
    2428:	30 e0       	ldi	r19, 0x00	; 0
    242a:	81 e0       	ldi	r24, 0x01	; 1
    242c:	90 e0       	ldi	r25, 0x00	; 0
    242e:	02 2e       	mov	r0, r18
    2430:	02 c0       	rjmp	.+4      	; 0x2436 <DIO_voidconfigureChannel+0x12c>
    2432:	88 0f       	add	r24, r24
    2434:	99 1f       	adc	r25, r25
    2436:	0a 94       	dec	r0
    2438:	e2 f7       	brpl	.-8      	; 0x2432 <DIO_voidconfigureChannel+0x128>
    243a:	80 95       	com	r24
    243c:	84 23       	and	r24, r20
    243e:	8c 93       	st	X, r24
    2440:	3f c0       	rjmp	.+126    	; 0x24c0 <DIO_voidconfigureChannel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRC_REG,pin);
    2442:	a4 e3       	ldi	r26, 0x34	; 52
    2444:	b0 e0       	ldi	r27, 0x00	; 0
    2446:	e4 e3       	ldi	r30, 0x34	; 52
    2448:	f0 e0       	ldi	r31, 0x00	; 0
    244a:	80 81       	ld	r24, Z
    244c:	48 2f       	mov	r20, r24
    244e:	8a 81       	ldd	r24, Y+2	; 0x02
    2450:	28 2f       	mov	r18, r24
    2452:	30 e0       	ldi	r19, 0x00	; 0
    2454:	81 e0       	ldi	r24, 0x01	; 1
    2456:	90 e0       	ldi	r25, 0x00	; 0
    2458:	02 2e       	mov	r0, r18
    245a:	02 c0       	rjmp	.+4      	; 0x2460 <DIO_voidconfigureChannel+0x156>
    245c:	88 0f       	add	r24, r24
    245e:	99 1f       	adc	r25, r25
    2460:	0a 94       	dec	r0
    2462:	e2 f7       	brpl	.-8      	; 0x245c <DIO_voidconfigureChannel+0x152>
    2464:	84 2b       	or	r24, r20
    2466:	8c 93       	st	X, r24
    2468:	2b c0       	rjmp	.+86     	; 0x24c0 <DIO_voidconfigureChannel+0x1b6>
		}
		break;


	case DIO_PORTD:
		if (dir == DIO_INPUT)
    246a:	8b 81       	ldd	r24, Y+3	; 0x03
    246c:	88 23       	and	r24, r24
    246e:	a9 f4       	brne	.+42     	; 0x249a <DIO_voidconfigureChannel+0x190>
		{
			CLEAR_BIT(DIO_DDRD_REG,pin);
    2470:	a1 e3       	ldi	r26, 0x31	; 49
    2472:	b0 e0       	ldi	r27, 0x00	; 0
    2474:	e1 e3       	ldi	r30, 0x31	; 49
    2476:	f0 e0       	ldi	r31, 0x00	; 0
    2478:	80 81       	ld	r24, Z
    247a:	48 2f       	mov	r20, r24
    247c:	8a 81       	ldd	r24, Y+2	; 0x02
    247e:	28 2f       	mov	r18, r24
    2480:	30 e0       	ldi	r19, 0x00	; 0
    2482:	81 e0       	ldi	r24, 0x01	; 1
    2484:	90 e0       	ldi	r25, 0x00	; 0
    2486:	02 2e       	mov	r0, r18
    2488:	02 c0       	rjmp	.+4      	; 0x248e <DIO_voidconfigureChannel+0x184>
    248a:	88 0f       	add	r24, r24
    248c:	99 1f       	adc	r25, r25
    248e:	0a 94       	dec	r0
    2490:	e2 f7       	brpl	.-8      	; 0x248a <DIO_voidconfigureChannel+0x180>
    2492:	80 95       	com	r24
    2494:	84 23       	and	r24, r20
    2496:	8c 93       	st	X, r24
    2498:	13 c0       	rjmp	.+38     	; 0x24c0 <DIO_voidconfigureChannel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRD_REG,pin);
    249a:	a1 e3       	ldi	r26, 0x31	; 49
    249c:	b0 e0       	ldi	r27, 0x00	; 0
    249e:	e1 e3       	ldi	r30, 0x31	; 49
    24a0:	f0 e0       	ldi	r31, 0x00	; 0
    24a2:	80 81       	ld	r24, Z
    24a4:	48 2f       	mov	r20, r24
    24a6:	8a 81       	ldd	r24, Y+2	; 0x02
    24a8:	28 2f       	mov	r18, r24
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	81 e0       	ldi	r24, 0x01	; 1
    24ae:	90 e0       	ldi	r25, 0x00	; 0
    24b0:	02 2e       	mov	r0, r18
    24b2:	02 c0       	rjmp	.+4      	; 0x24b8 <DIO_voidconfigureChannel+0x1ae>
    24b4:	88 0f       	add	r24, r24
    24b6:	99 1f       	adc	r25, r25
    24b8:	0a 94       	dec	r0
    24ba:	e2 f7       	brpl	.-8      	; 0x24b4 <DIO_voidconfigureChannel+0x1aa>
    24bc:	84 2b       	or	r24, r20
    24be:	8c 93       	st	X, r24
		}
		break;
	}


}
    24c0:	0f 90       	pop	r0
    24c2:	0f 90       	pop	r0
    24c4:	0f 90       	pop	r0
    24c6:	0f 90       	pop	r0
    24c8:	0f 90       	pop	r0
    24ca:	cf 91       	pop	r28
    24cc:	df 91       	pop	r29
    24ce:	08 95       	ret

000024d0 <DIO_voidWRITEChannel>:
void DIO_voidWRITEChannel(DIO_PORT_T port,DIO_PIN_T pin,DIO_LEVEL_T level)
{
    24d0:	df 93       	push	r29
    24d2:	cf 93       	push	r28
    24d4:	00 d0       	rcall	.+0      	; 0x24d6 <DIO_voidWRITEChannel+0x6>
    24d6:	00 d0       	rcall	.+0      	; 0x24d8 <DIO_voidWRITEChannel+0x8>
    24d8:	0f 92       	push	r0
    24da:	cd b7       	in	r28, 0x3d	; 61
    24dc:	de b7       	in	r29, 0x3e	; 62
    24de:	89 83       	std	Y+1, r24	; 0x01
    24e0:	6a 83       	std	Y+2, r22	; 0x02
    24e2:	4b 83       	std	Y+3, r20	; 0x03
	switch (port)
    24e4:	89 81       	ldd	r24, Y+1	; 0x01
    24e6:	28 2f       	mov	r18, r24
    24e8:	30 e0       	ldi	r19, 0x00	; 0
    24ea:	3d 83       	std	Y+5, r19	; 0x05
    24ec:	2c 83       	std	Y+4, r18	; 0x04
    24ee:	8c 81       	ldd	r24, Y+4	; 0x04
    24f0:	9d 81       	ldd	r25, Y+5	; 0x05
    24f2:	81 30       	cpi	r24, 0x01	; 1
    24f4:	91 05       	cpc	r25, r1
    24f6:	09 f4       	brne	.+2      	; 0x24fa <DIO_voidWRITEChannel+0x2a>
    24f8:	43 c0       	rjmp	.+134    	; 0x2580 <DIO_voidWRITEChannel+0xb0>
    24fa:	2c 81       	ldd	r18, Y+4	; 0x04
    24fc:	3d 81       	ldd	r19, Y+5	; 0x05
    24fe:	22 30       	cpi	r18, 0x02	; 2
    2500:	31 05       	cpc	r19, r1
    2502:	2c f4       	brge	.+10     	; 0x250e <DIO_voidWRITEChannel+0x3e>
    2504:	8c 81       	ldd	r24, Y+4	; 0x04
    2506:	9d 81       	ldd	r25, Y+5	; 0x05
    2508:	00 97       	sbiw	r24, 0x00	; 0
    250a:	71 f0       	breq	.+28     	; 0x2528 <DIO_voidWRITEChannel+0x58>
    250c:	bc c0       	rjmp	.+376    	; 0x2686 <DIO_voidWRITEChannel+0x1b6>
    250e:	2c 81       	ldd	r18, Y+4	; 0x04
    2510:	3d 81       	ldd	r19, Y+5	; 0x05
    2512:	22 30       	cpi	r18, 0x02	; 2
    2514:	31 05       	cpc	r19, r1
    2516:	09 f4       	brne	.+2      	; 0x251a <DIO_voidWRITEChannel+0x4a>
    2518:	5f c0       	rjmp	.+190    	; 0x25d8 <DIO_voidWRITEChannel+0x108>
    251a:	8c 81       	ldd	r24, Y+4	; 0x04
    251c:	9d 81       	ldd	r25, Y+5	; 0x05
    251e:	83 30       	cpi	r24, 0x03	; 3
    2520:	91 05       	cpc	r25, r1
    2522:	09 f4       	brne	.+2      	; 0x2526 <DIO_voidWRITEChannel+0x56>
    2524:	85 c0       	rjmp	.+266    	; 0x2630 <DIO_voidWRITEChannel+0x160>
    2526:	af c0       	rjmp	.+350    	; 0x2686 <DIO_voidWRITEChannel+0x1b6>
	{
	case DIO_PORTA:
		if (level == DIO_HIGH)
    2528:	8b 81       	ldd	r24, Y+3	; 0x03
    252a:	81 30       	cpi	r24, 0x01	; 1
    252c:	a1 f4       	brne	.+40     	; 0x2556 <DIO_voidWRITEChannel+0x86>
		{
			SET_BIT(DIO_PORTA_REG,pin);
    252e:	ab e3       	ldi	r26, 0x3B	; 59
    2530:	b0 e0       	ldi	r27, 0x00	; 0
    2532:	eb e3       	ldi	r30, 0x3B	; 59
    2534:	f0 e0       	ldi	r31, 0x00	; 0
    2536:	80 81       	ld	r24, Z
    2538:	48 2f       	mov	r20, r24
    253a:	8a 81       	ldd	r24, Y+2	; 0x02
    253c:	28 2f       	mov	r18, r24
    253e:	30 e0       	ldi	r19, 0x00	; 0
    2540:	81 e0       	ldi	r24, 0x01	; 1
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	02 2e       	mov	r0, r18
    2546:	02 c0       	rjmp	.+4      	; 0x254c <DIO_voidWRITEChannel+0x7c>
    2548:	88 0f       	add	r24, r24
    254a:	99 1f       	adc	r25, r25
    254c:	0a 94       	dec	r0
    254e:	e2 f7       	brpl	.-8      	; 0x2548 <DIO_voidWRITEChannel+0x78>
    2550:	84 2b       	or	r24, r20
    2552:	8c 93       	st	X, r24
    2554:	98 c0       	rjmp	.+304    	; 0x2686 <DIO_voidWRITEChannel+0x1b6>
		}
		else
		{
			CLEAR_BIT(DIO_PORTA_REG,pin);
    2556:	ab e3       	ldi	r26, 0x3B	; 59
    2558:	b0 e0       	ldi	r27, 0x00	; 0
    255a:	eb e3       	ldi	r30, 0x3B	; 59
    255c:	f0 e0       	ldi	r31, 0x00	; 0
    255e:	80 81       	ld	r24, Z
    2560:	48 2f       	mov	r20, r24
    2562:	8a 81       	ldd	r24, Y+2	; 0x02
    2564:	28 2f       	mov	r18, r24
    2566:	30 e0       	ldi	r19, 0x00	; 0
    2568:	81 e0       	ldi	r24, 0x01	; 1
    256a:	90 e0       	ldi	r25, 0x00	; 0
    256c:	02 2e       	mov	r0, r18
    256e:	02 c0       	rjmp	.+4      	; 0x2574 <DIO_voidWRITEChannel+0xa4>
    2570:	88 0f       	add	r24, r24
    2572:	99 1f       	adc	r25, r25
    2574:	0a 94       	dec	r0
    2576:	e2 f7       	brpl	.-8      	; 0x2570 <DIO_voidWRITEChannel+0xa0>
    2578:	80 95       	com	r24
    257a:	84 23       	and	r24, r20
    257c:	8c 93       	st	X, r24
    257e:	83 c0       	rjmp	.+262    	; 0x2686 <DIO_voidWRITEChannel+0x1b6>
		}
		break;
	case DIO_PORTB:
		if (level == DIO_HIGH)
    2580:	8b 81       	ldd	r24, Y+3	; 0x03
    2582:	81 30       	cpi	r24, 0x01	; 1
    2584:	a1 f4       	brne	.+40     	; 0x25ae <DIO_voidWRITEChannel+0xde>
		{
			SET_BIT(DIO_PORTB_REG,pin);
    2586:	a8 e3       	ldi	r26, 0x38	; 56
    2588:	b0 e0       	ldi	r27, 0x00	; 0
    258a:	e8 e3       	ldi	r30, 0x38	; 56
    258c:	f0 e0       	ldi	r31, 0x00	; 0
    258e:	80 81       	ld	r24, Z
    2590:	48 2f       	mov	r20, r24
    2592:	8a 81       	ldd	r24, Y+2	; 0x02
    2594:	28 2f       	mov	r18, r24
    2596:	30 e0       	ldi	r19, 0x00	; 0
    2598:	81 e0       	ldi	r24, 0x01	; 1
    259a:	90 e0       	ldi	r25, 0x00	; 0
    259c:	02 2e       	mov	r0, r18
    259e:	02 c0       	rjmp	.+4      	; 0x25a4 <DIO_voidWRITEChannel+0xd4>
    25a0:	88 0f       	add	r24, r24
    25a2:	99 1f       	adc	r25, r25
    25a4:	0a 94       	dec	r0
    25a6:	e2 f7       	brpl	.-8      	; 0x25a0 <DIO_voidWRITEChannel+0xd0>
    25a8:	84 2b       	or	r24, r20
    25aa:	8c 93       	st	X, r24
    25ac:	6c c0       	rjmp	.+216    	; 0x2686 <DIO_voidWRITEChannel+0x1b6>
		}
		else
		{
			CLEAR_BIT(DIO_PORTB_REG,pin);
    25ae:	a8 e3       	ldi	r26, 0x38	; 56
    25b0:	b0 e0       	ldi	r27, 0x00	; 0
    25b2:	e8 e3       	ldi	r30, 0x38	; 56
    25b4:	f0 e0       	ldi	r31, 0x00	; 0
    25b6:	80 81       	ld	r24, Z
    25b8:	48 2f       	mov	r20, r24
    25ba:	8a 81       	ldd	r24, Y+2	; 0x02
    25bc:	28 2f       	mov	r18, r24
    25be:	30 e0       	ldi	r19, 0x00	; 0
    25c0:	81 e0       	ldi	r24, 0x01	; 1
    25c2:	90 e0       	ldi	r25, 0x00	; 0
    25c4:	02 2e       	mov	r0, r18
    25c6:	02 c0       	rjmp	.+4      	; 0x25cc <DIO_voidWRITEChannel+0xfc>
    25c8:	88 0f       	add	r24, r24
    25ca:	99 1f       	adc	r25, r25
    25cc:	0a 94       	dec	r0
    25ce:	e2 f7       	brpl	.-8      	; 0x25c8 <DIO_voidWRITEChannel+0xf8>
    25d0:	80 95       	com	r24
    25d2:	84 23       	and	r24, r20
    25d4:	8c 93       	st	X, r24
    25d6:	57 c0       	rjmp	.+174    	; 0x2686 <DIO_voidWRITEChannel+0x1b6>
		}
		break;
	case DIO_PORTC:
		if (level == DIO_HIGH)
    25d8:	8b 81       	ldd	r24, Y+3	; 0x03
    25da:	81 30       	cpi	r24, 0x01	; 1
    25dc:	a1 f4       	brne	.+40     	; 0x2606 <DIO_voidWRITEChannel+0x136>
		{
			SET_BIT(DIO_PORTC_REG,pin);
    25de:	a5 e3       	ldi	r26, 0x35	; 53
    25e0:	b0 e0       	ldi	r27, 0x00	; 0
    25e2:	e5 e3       	ldi	r30, 0x35	; 53
    25e4:	f0 e0       	ldi	r31, 0x00	; 0
    25e6:	80 81       	ld	r24, Z
    25e8:	48 2f       	mov	r20, r24
    25ea:	8a 81       	ldd	r24, Y+2	; 0x02
    25ec:	28 2f       	mov	r18, r24
    25ee:	30 e0       	ldi	r19, 0x00	; 0
    25f0:	81 e0       	ldi	r24, 0x01	; 1
    25f2:	90 e0       	ldi	r25, 0x00	; 0
    25f4:	02 2e       	mov	r0, r18
    25f6:	02 c0       	rjmp	.+4      	; 0x25fc <DIO_voidWRITEChannel+0x12c>
    25f8:	88 0f       	add	r24, r24
    25fa:	99 1f       	adc	r25, r25
    25fc:	0a 94       	dec	r0
    25fe:	e2 f7       	brpl	.-8      	; 0x25f8 <DIO_voidWRITEChannel+0x128>
    2600:	84 2b       	or	r24, r20
    2602:	8c 93       	st	X, r24
    2604:	40 c0       	rjmp	.+128    	; 0x2686 <DIO_voidWRITEChannel+0x1b6>
		}
		else
		{
			CLEAR_BIT(DIO_PORTC_REG,pin);
    2606:	a5 e3       	ldi	r26, 0x35	; 53
    2608:	b0 e0       	ldi	r27, 0x00	; 0
    260a:	e5 e3       	ldi	r30, 0x35	; 53
    260c:	f0 e0       	ldi	r31, 0x00	; 0
    260e:	80 81       	ld	r24, Z
    2610:	48 2f       	mov	r20, r24
    2612:	8a 81       	ldd	r24, Y+2	; 0x02
    2614:	28 2f       	mov	r18, r24
    2616:	30 e0       	ldi	r19, 0x00	; 0
    2618:	81 e0       	ldi	r24, 0x01	; 1
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	02 2e       	mov	r0, r18
    261e:	02 c0       	rjmp	.+4      	; 0x2624 <DIO_voidWRITEChannel+0x154>
    2620:	88 0f       	add	r24, r24
    2622:	99 1f       	adc	r25, r25
    2624:	0a 94       	dec	r0
    2626:	e2 f7       	brpl	.-8      	; 0x2620 <DIO_voidWRITEChannel+0x150>
    2628:	80 95       	com	r24
    262a:	84 23       	and	r24, r20
    262c:	8c 93       	st	X, r24
    262e:	2b c0       	rjmp	.+86     	; 0x2686 <DIO_voidWRITEChannel+0x1b6>
		}
		break;
	case DIO_PORTD:
		if (level == DIO_HIGH)
    2630:	8b 81       	ldd	r24, Y+3	; 0x03
    2632:	81 30       	cpi	r24, 0x01	; 1
    2634:	a1 f4       	brne	.+40     	; 0x265e <DIO_voidWRITEChannel+0x18e>
		{
			SET_BIT(DIO_PORTD_REG,pin);
    2636:	a2 e3       	ldi	r26, 0x32	; 50
    2638:	b0 e0       	ldi	r27, 0x00	; 0
    263a:	e2 e3       	ldi	r30, 0x32	; 50
    263c:	f0 e0       	ldi	r31, 0x00	; 0
    263e:	80 81       	ld	r24, Z
    2640:	48 2f       	mov	r20, r24
    2642:	8a 81       	ldd	r24, Y+2	; 0x02
    2644:	28 2f       	mov	r18, r24
    2646:	30 e0       	ldi	r19, 0x00	; 0
    2648:	81 e0       	ldi	r24, 0x01	; 1
    264a:	90 e0       	ldi	r25, 0x00	; 0
    264c:	02 2e       	mov	r0, r18
    264e:	02 c0       	rjmp	.+4      	; 0x2654 <DIO_voidWRITEChannel+0x184>
    2650:	88 0f       	add	r24, r24
    2652:	99 1f       	adc	r25, r25
    2654:	0a 94       	dec	r0
    2656:	e2 f7       	brpl	.-8      	; 0x2650 <DIO_voidWRITEChannel+0x180>
    2658:	84 2b       	or	r24, r20
    265a:	8c 93       	st	X, r24
    265c:	14 c0       	rjmp	.+40     	; 0x2686 <DIO_voidWRITEChannel+0x1b6>
		}
		else
		{
			CLEAR_BIT(DIO_PORTD_REG,pin);
    265e:	a2 e3       	ldi	r26, 0x32	; 50
    2660:	b0 e0       	ldi	r27, 0x00	; 0
    2662:	e2 e3       	ldi	r30, 0x32	; 50
    2664:	f0 e0       	ldi	r31, 0x00	; 0
    2666:	80 81       	ld	r24, Z
    2668:	48 2f       	mov	r20, r24
    266a:	8a 81       	ldd	r24, Y+2	; 0x02
    266c:	28 2f       	mov	r18, r24
    266e:	30 e0       	ldi	r19, 0x00	; 0
    2670:	81 e0       	ldi	r24, 0x01	; 1
    2672:	90 e0       	ldi	r25, 0x00	; 0
    2674:	02 2e       	mov	r0, r18
    2676:	02 c0       	rjmp	.+4      	; 0x267c <DIO_voidWRITEChannel+0x1ac>
    2678:	88 0f       	add	r24, r24
    267a:	99 1f       	adc	r25, r25
    267c:	0a 94       	dec	r0
    267e:	e2 f7       	brpl	.-8      	; 0x2678 <DIO_voidWRITEChannel+0x1a8>
    2680:	80 95       	com	r24
    2682:	84 23       	and	r24, r20
    2684:	8c 93       	st	X, r24
		}
		break;
	}
}
    2686:	0f 90       	pop	r0
    2688:	0f 90       	pop	r0
    268a:	0f 90       	pop	r0
    268c:	0f 90       	pop	r0
    268e:	0f 90       	pop	r0
    2690:	cf 91       	pop	r28
    2692:	df 91       	pop	r29
    2694:	08 95       	ret

00002696 <DIO_voidREADChannel>:
DIO_LEVEL_T DIO_voidREADChannel(DIO_PORT_T port,DIO_PIN_T pin)
{
    2696:	df 93       	push	r29
    2698:	cf 93       	push	r28
    269a:	00 d0       	rcall	.+0      	; 0x269c <DIO_voidREADChannel+0x6>
    269c:	00 d0       	rcall	.+0      	; 0x269e <DIO_voidREADChannel+0x8>
    269e:	0f 92       	push	r0
    26a0:	cd b7       	in	r28, 0x3d	; 61
    26a2:	de b7       	in	r29, 0x3e	; 62
    26a4:	8a 83       	std	Y+2, r24	; 0x02
    26a6:	6b 83       	std	Y+3, r22	; 0x03
	DIO_LEVEL_T localstatus;
	switch(port)
    26a8:	8a 81       	ldd	r24, Y+2	; 0x02
    26aa:	28 2f       	mov	r18, r24
    26ac:	30 e0       	ldi	r19, 0x00	; 0
    26ae:	3d 83       	std	Y+5, r19	; 0x05
    26b0:	2c 83       	std	Y+4, r18	; 0x04
    26b2:	4c 81       	ldd	r20, Y+4	; 0x04
    26b4:	5d 81       	ldd	r21, Y+5	; 0x05
    26b6:	41 30       	cpi	r20, 0x01	; 1
    26b8:	51 05       	cpc	r21, r1
    26ba:	41 f1       	breq	.+80     	; 0x270c <DIO_voidREADChannel+0x76>
    26bc:	8c 81       	ldd	r24, Y+4	; 0x04
    26be:	9d 81       	ldd	r25, Y+5	; 0x05
    26c0:	82 30       	cpi	r24, 0x02	; 2
    26c2:	91 05       	cpc	r25, r1
    26c4:	34 f4       	brge	.+12     	; 0x26d2 <DIO_voidREADChannel+0x3c>
    26c6:	2c 81       	ldd	r18, Y+4	; 0x04
    26c8:	3d 81       	ldd	r19, Y+5	; 0x05
    26ca:	21 15       	cp	r18, r1
    26cc:	31 05       	cpc	r19, r1
    26ce:	61 f0       	breq	.+24     	; 0x26e8 <DIO_voidREADChannel+0x52>
    26d0:	52 c0       	rjmp	.+164    	; 0x2776 <DIO_voidREADChannel+0xe0>
    26d2:	4c 81       	ldd	r20, Y+4	; 0x04
    26d4:	5d 81       	ldd	r21, Y+5	; 0x05
    26d6:	42 30       	cpi	r20, 0x02	; 2
    26d8:	51 05       	cpc	r21, r1
    26da:	51 f1       	breq	.+84     	; 0x2730 <DIO_voidREADChannel+0x9a>
    26dc:	8c 81       	ldd	r24, Y+4	; 0x04
    26de:	9d 81       	ldd	r25, Y+5	; 0x05
    26e0:	83 30       	cpi	r24, 0x03	; 3
    26e2:	91 05       	cpc	r25, r1
    26e4:	b9 f1       	breq	.+110    	; 0x2754 <DIO_voidREADChannel+0xbe>
    26e6:	47 c0       	rjmp	.+142    	; 0x2776 <DIO_voidREADChannel+0xe0>
	{
	case DIO_PORTA:
		localstatus = CHECK_BIT(DIO_PINA_REG, pin);
    26e8:	e9 e3       	ldi	r30, 0x39	; 57
    26ea:	f0 e0       	ldi	r31, 0x00	; 0
    26ec:	80 81       	ld	r24, Z
    26ee:	28 2f       	mov	r18, r24
    26f0:	30 e0       	ldi	r19, 0x00	; 0
    26f2:	8b 81       	ldd	r24, Y+3	; 0x03
    26f4:	88 2f       	mov	r24, r24
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	a9 01       	movw	r20, r18
    26fa:	02 c0       	rjmp	.+4      	; 0x2700 <DIO_voidREADChannel+0x6a>
    26fc:	55 95       	asr	r21
    26fe:	47 95       	ror	r20
    2700:	8a 95       	dec	r24
    2702:	e2 f7       	brpl	.-8      	; 0x26fc <DIO_voidREADChannel+0x66>
    2704:	ca 01       	movw	r24, r20
    2706:	81 70       	andi	r24, 0x01	; 1
    2708:	89 83       	std	Y+1, r24	; 0x01
    270a:	35 c0       	rjmp	.+106    	; 0x2776 <DIO_voidREADChannel+0xe0>
		break;
	case DIO_PORTB:

		localstatus= CHECK_BIT(DIO_PINB_REG, pin);
    270c:	e6 e3       	ldi	r30, 0x36	; 54
    270e:	f0 e0       	ldi	r31, 0x00	; 0
    2710:	80 81       	ld	r24, Z
    2712:	28 2f       	mov	r18, r24
    2714:	30 e0       	ldi	r19, 0x00	; 0
    2716:	8b 81       	ldd	r24, Y+3	; 0x03
    2718:	88 2f       	mov	r24, r24
    271a:	90 e0       	ldi	r25, 0x00	; 0
    271c:	a9 01       	movw	r20, r18
    271e:	02 c0       	rjmp	.+4      	; 0x2724 <DIO_voidREADChannel+0x8e>
    2720:	55 95       	asr	r21
    2722:	47 95       	ror	r20
    2724:	8a 95       	dec	r24
    2726:	e2 f7       	brpl	.-8      	; 0x2720 <DIO_voidREADChannel+0x8a>
    2728:	ca 01       	movw	r24, r20
    272a:	81 70       	andi	r24, 0x01	; 1
    272c:	89 83       	std	Y+1, r24	; 0x01
    272e:	23 c0       	rjmp	.+70     	; 0x2776 <DIO_voidREADChannel+0xe0>
		break;
	case DIO_PORTC:

		localstatus = CHECK_BIT(DIO_PINC_REG, pin);
    2730:	e3 e3       	ldi	r30, 0x33	; 51
    2732:	f0 e0       	ldi	r31, 0x00	; 0
    2734:	80 81       	ld	r24, Z
    2736:	28 2f       	mov	r18, r24
    2738:	30 e0       	ldi	r19, 0x00	; 0
    273a:	8b 81       	ldd	r24, Y+3	; 0x03
    273c:	88 2f       	mov	r24, r24
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	a9 01       	movw	r20, r18
    2742:	02 c0       	rjmp	.+4      	; 0x2748 <DIO_voidREADChannel+0xb2>
    2744:	55 95       	asr	r21
    2746:	47 95       	ror	r20
    2748:	8a 95       	dec	r24
    274a:	e2 f7       	brpl	.-8      	; 0x2744 <DIO_voidREADChannel+0xae>
    274c:	ca 01       	movw	r24, r20
    274e:	81 70       	andi	r24, 0x01	; 1
    2750:	89 83       	std	Y+1, r24	; 0x01
    2752:	11 c0       	rjmp	.+34     	; 0x2776 <DIO_voidREADChannel+0xe0>

		break;
	case DIO_PORTD:

		localstatus = CHECK_BIT(DIO_PIND_REG, pin);
    2754:	e0 e3       	ldi	r30, 0x30	; 48
    2756:	f0 e0       	ldi	r31, 0x00	; 0
    2758:	80 81       	ld	r24, Z
    275a:	28 2f       	mov	r18, r24
    275c:	30 e0       	ldi	r19, 0x00	; 0
    275e:	8b 81       	ldd	r24, Y+3	; 0x03
    2760:	88 2f       	mov	r24, r24
    2762:	90 e0       	ldi	r25, 0x00	; 0
    2764:	a9 01       	movw	r20, r18
    2766:	02 c0       	rjmp	.+4      	; 0x276c <DIO_voidREADChannel+0xd6>
    2768:	55 95       	asr	r21
    276a:	47 95       	ror	r20
    276c:	8a 95       	dec	r24
    276e:	e2 f7       	brpl	.-8      	; 0x2768 <DIO_voidREADChannel+0xd2>
    2770:	ca 01       	movw	r24, r20
    2772:	81 70       	andi	r24, 0x01	; 1
    2774:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return localstatus;
    2776:	89 81       	ldd	r24, Y+1	; 0x01
}
    2778:	0f 90       	pop	r0
    277a:	0f 90       	pop	r0
    277c:	0f 90       	pop	r0
    277e:	0f 90       	pop	r0
    2780:	0f 90       	pop	r0
    2782:	cf 91       	pop	r28
    2784:	df 91       	pop	r29
    2786:	08 95       	ret

00002788 <DIO_voidWRITEChannelGroup>:
void DIO_voidWRITEChannelGroup(DIO_PORT_T port,u8 data, u8 mask)
{
    2788:	df 93       	push	r29
    278a:	cf 93       	push	r28
    278c:	00 d0       	rcall	.+0      	; 0x278e <DIO_voidWRITEChannelGroup+0x6>
    278e:	00 d0       	rcall	.+0      	; 0x2790 <DIO_voidWRITEChannelGroup+0x8>
    2790:	0f 92       	push	r0
    2792:	cd b7       	in	r28, 0x3d	; 61
    2794:	de b7       	in	r29, 0x3e	; 62
    2796:	89 83       	std	Y+1, r24	; 0x01
    2798:	6a 83       	std	Y+2, r22	; 0x02
    279a:	4b 83       	std	Y+3, r20	; 0x03
	switch (port)
    279c:	89 81       	ldd	r24, Y+1	; 0x01
    279e:	28 2f       	mov	r18, r24
    27a0:	30 e0       	ldi	r19, 0x00	; 0
    27a2:	3d 83       	std	Y+5, r19	; 0x05
    27a4:	2c 83       	std	Y+4, r18	; 0x04
    27a6:	8c 81       	ldd	r24, Y+4	; 0x04
    27a8:	9d 81       	ldd	r25, Y+5	; 0x05
    27aa:	81 30       	cpi	r24, 0x01	; 1
    27ac:	91 05       	cpc	r25, r1
    27ae:	01 f1       	breq	.+64     	; 0x27f0 <DIO_voidWRITEChannelGroup+0x68>
    27b0:	2c 81       	ldd	r18, Y+4	; 0x04
    27b2:	3d 81       	ldd	r19, Y+5	; 0x05
    27b4:	22 30       	cpi	r18, 0x02	; 2
    27b6:	31 05       	cpc	r19, r1
    27b8:	2c f4       	brge	.+10     	; 0x27c4 <DIO_voidWRITEChannelGroup+0x3c>
    27ba:	8c 81       	ldd	r24, Y+4	; 0x04
    27bc:	9d 81       	ldd	r25, Y+5	; 0x05
    27be:	00 97       	sbiw	r24, 0x00	; 0
    27c0:	61 f0       	breq	.+24     	; 0x27da <DIO_voidWRITEChannelGroup+0x52>
    27c2:	36 c0       	rjmp	.+108    	; 0x2830 <DIO_voidWRITEChannelGroup+0xa8>
    27c4:	2c 81       	ldd	r18, Y+4	; 0x04
    27c6:	3d 81       	ldd	r19, Y+5	; 0x05
    27c8:	22 30       	cpi	r18, 0x02	; 2
    27ca:	31 05       	cpc	r19, r1
    27cc:	e1 f0       	breq	.+56     	; 0x2806 <DIO_voidWRITEChannelGroup+0x7e>
    27ce:	8c 81       	ldd	r24, Y+4	; 0x04
    27d0:	9d 81       	ldd	r25, Y+5	; 0x05
    27d2:	83 30       	cpi	r24, 0x03	; 3
    27d4:	91 05       	cpc	r25, r1
    27d6:	11 f1       	breq	.+68     	; 0x281c <DIO_voidWRITEChannelGroup+0x94>
    27d8:	2b c0       	rjmp	.+86     	; 0x2830 <DIO_voidWRITEChannelGroup+0xa8>
	{
	case DIO_PORTA:
		DIO_PORTA_REG = (DIO_PORTA_REG & mask)|(data); //0000 0101 -> 0101 0000
    27da:	ab e3       	ldi	r26, 0x3B	; 59
    27dc:	b0 e0       	ldi	r27, 0x00	; 0
    27de:	eb e3       	ldi	r30, 0x3B	; 59
    27e0:	f0 e0       	ldi	r31, 0x00	; 0
    27e2:	90 81       	ld	r25, Z
    27e4:	8b 81       	ldd	r24, Y+3	; 0x03
    27e6:	98 23       	and	r25, r24
    27e8:	8a 81       	ldd	r24, Y+2	; 0x02
    27ea:	89 2b       	or	r24, r25
    27ec:	8c 93       	st	X, r24
    27ee:	20 c0       	rjmp	.+64     	; 0x2830 <DIO_voidWRITEChannelGroup+0xa8>
		break;
		// we must shift 5, 4 places or we will write 0000 0101 on the 8 pins
		// after shift 5 will be 0101 and will be written on the first 4 pins
		// 0101 0000
	case DIO_PORTB:
		DIO_PORTB_REG = (DIO_PORTB_REG & mask)|(data);
    27f0:	a8 e3       	ldi	r26, 0x38	; 56
    27f2:	b0 e0       	ldi	r27, 0x00	; 0
    27f4:	e8 e3       	ldi	r30, 0x38	; 56
    27f6:	f0 e0       	ldi	r31, 0x00	; 0
    27f8:	90 81       	ld	r25, Z
    27fa:	8b 81       	ldd	r24, Y+3	; 0x03
    27fc:	98 23       	and	r25, r24
    27fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2800:	89 2b       	or	r24, r25
    2802:	8c 93       	st	X, r24
    2804:	15 c0       	rjmp	.+42     	; 0x2830 <DIO_voidWRITEChannelGroup+0xa8>
		break;
	case DIO_PORTC:
		DIO_PORTC_REG = (DIO_PORTC_REG & mask)|(data);
    2806:	a5 e3       	ldi	r26, 0x35	; 53
    2808:	b0 e0       	ldi	r27, 0x00	; 0
    280a:	e5 e3       	ldi	r30, 0x35	; 53
    280c:	f0 e0       	ldi	r31, 0x00	; 0
    280e:	90 81       	ld	r25, Z
    2810:	8b 81       	ldd	r24, Y+3	; 0x03
    2812:	98 23       	and	r25, r24
    2814:	8a 81       	ldd	r24, Y+2	; 0x02
    2816:	89 2b       	or	r24, r25
    2818:	8c 93       	st	X, r24
    281a:	0a c0       	rjmp	.+20     	; 0x2830 <DIO_voidWRITEChannelGroup+0xa8>
		break;
	case DIO_PORTD:
		DIO_PORTD_REG = (DIO_PORTD_REG & mask)|(data);
    281c:	a2 e3       	ldi	r26, 0x32	; 50
    281e:	b0 e0       	ldi	r27, 0x00	; 0
    2820:	e2 e3       	ldi	r30, 0x32	; 50
    2822:	f0 e0       	ldi	r31, 0x00	; 0
    2824:	90 81       	ld	r25, Z
    2826:	8b 81       	ldd	r24, Y+3	; 0x03
    2828:	98 23       	and	r25, r24
    282a:	8a 81       	ldd	r24, Y+2	; 0x02
    282c:	89 2b       	or	r24, r25
    282e:	8c 93       	st	X, r24
		break;
	}

}
    2830:	0f 90       	pop	r0
    2832:	0f 90       	pop	r0
    2834:	0f 90       	pop	r0
    2836:	0f 90       	pop	r0
    2838:	0f 90       	pop	r0
    283a:	cf 91       	pop	r28
    283c:	df 91       	pop	r29
    283e:	08 95       	ret

00002840 <DIO_voidPULLUpEnable>:
void DIO_voidPULLUpEnable(DIO_PORT_T port,DIO_PIN_T pin)
{
    2840:	df 93       	push	r29
    2842:	cf 93       	push	r28
    2844:	00 d0       	rcall	.+0      	; 0x2846 <DIO_voidPULLUpEnable+0x6>
    2846:	00 d0       	rcall	.+0      	; 0x2848 <DIO_voidPULLUpEnable+0x8>
    2848:	cd b7       	in	r28, 0x3d	; 61
    284a:	de b7       	in	r29, 0x3e	; 62
    284c:	89 83       	std	Y+1, r24	; 0x01
    284e:	6a 83       	std	Y+2, r22	; 0x02
	switch (port)
    2850:	89 81       	ldd	r24, Y+1	; 0x01
    2852:	28 2f       	mov	r18, r24
    2854:	30 e0       	ldi	r19, 0x00	; 0
    2856:	3c 83       	std	Y+4, r19	; 0x04
    2858:	2b 83       	std	Y+3, r18	; 0x03
    285a:	8b 81       	ldd	r24, Y+3	; 0x03
    285c:	9c 81       	ldd	r25, Y+4	; 0x04
    285e:	81 30       	cpi	r24, 0x01	; 1
    2860:	91 05       	cpc	r25, r1
    2862:	49 f1       	breq	.+82     	; 0x28b6 <DIO_voidPULLUpEnable+0x76>
    2864:	2b 81       	ldd	r18, Y+3	; 0x03
    2866:	3c 81       	ldd	r19, Y+4	; 0x04
    2868:	22 30       	cpi	r18, 0x02	; 2
    286a:	31 05       	cpc	r19, r1
    286c:	2c f4       	brge	.+10     	; 0x2878 <DIO_voidPULLUpEnable+0x38>
    286e:	8b 81       	ldd	r24, Y+3	; 0x03
    2870:	9c 81       	ldd	r25, Y+4	; 0x04
    2872:	00 97       	sbiw	r24, 0x00	; 0
    2874:	61 f0       	breq	.+24     	; 0x288e <DIO_voidPULLUpEnable+0x4e>
    2876:	5a c0       	rjmp	.+180    	; 0x292c <DIO_voidPULLUpEnable+0xec>
    2878:	2b 81       	ldd	r18, Y+3	; 0x03
    287a:	3c 81       	ldd	r19, Y+4	; 0x04
    287c:	22 30       	cpi	r18, 0x02	; 2
    287e:	31 05       	cpc	r19, r1
    2880:	71 f1       	breq	.+92     	; 0x28de <DIO_voidPULLUpEnable+0x9e>
    2882:	8b 81       	ldd	r24, Y+3	; 0x03
    2884:	9c 81       	ldd	r25, Y+4	; 0x04
    2886:	83 30       	cpi	r24, 0x03	; 3
    2888:	91 05       	cpc	r25, r1
    288a:	e9 f1       	breq	.+122    	; 0x2906 <DIO_voidPULLUpEnable+0xc6>
    288c:	4f c0       	rjmp	.+158    	; 0x292c <DIO_voidPULLUpEnable+0xec>
	{
	case DIO_PORTA:
		SET_BIT(DIO_PORTA_REG,pin);
    288e:	ab e3       	ldi	r26, 0x3B	; 59
    2890:	b0 e0       	ldi	r27, 0x00	; 0
    2892:	eb e3       	ldi	r30, 0x3B	; 59
    2894:	f0 e0       	ldi	r31, 0x00	; 0
    2896:	80 81       	ld	r24, Z
    2898:	48 2f       	mov	r20, r24
    289a:	8a 81       	ldd	r24, Y+2	; 0x02
    289c:	28 2f       	mov	r18, r24
    289e:	30 e0       	ldi	r19, 0x00	; 0
    28a0:	81 e0       	ldi	r24, 0x01	; 1
    28a2:	90 e0       	ldi	r25, 0x00	; 0
    28a4:	02 2e       	mov	r0, r18
    28a6:	02 c0       	rjmp	.+4      	; 0x28ac <DIO_voidPULLUpEnable+0x6c>
    28a8:	88 0f       	add	r24, r24
    28aa:	99 1f       	adc	r25, r25
    28ac:	0a 94       	dec	r0
    28ae:	e2 f7       	brpl	.-8      	; 0x28a8 <DIO_voidPULLUpEnable+0x68>
    28b0:	84 2b       	or	r24, r20
    28b2:	8c 93       	st	X, r24
    28b4:	3b c0       	rjmp	.+118    	; 0x292c <DIO_voidPULLUpEnable+0xec>
		break;
	case DIO_PORTB:
		SET_BIT(DIO_PORTB_REG,pin);
    28b6:	a8 e3       	ldi	r26, 0x38	; 56
    28b8:	b0 e0       	ldi	r27, 0x00	; 0
    28ba:	e8 e3       	ldi	r30, 0x38	; 56
    28bc:	f0 e0       	ldi	r31, 0x00	; 0
    28be:	80 81       	ld	r24, Z
    28c0:	48 2f       	mov	r20, r24
    28c2:	8a 81       	ldd	r24, Y+2	; 0x02
    28c4:	28 2f       	mov	r18, r24
    28c6:	30 e0       	ldi	r19, 0x00	; 0
    28c8:	81 e0       	ldi	r24, 0x01	; 1
    28ca:	90 e0       	ldi	r25, 0x00	; 0
    28cc:	02 2e       	mov	r0, r18
    28ce:	02 c0       	rjmp	.+4      	; 0x28d4 <DIO_voidPULLUpEnable+0x94>
    28d0:	88 0f       	add	r24, r24
    28d2:	99 1f       	adc	r25, r25
    28d4:	0a 94       	dec	r0
    28d6:	e2 f7       	brpl	.-8      	; 0x28d0 <DIO_voidPULLUpEnable+0x90>
    28d8:	84 2b       	or	r24, r20
    28da:	8c 93       	st	X, r24
    28dc:	27 c0       	rjmp	.+78     	; 0x292c <DIO_voidPULLUpEnable+0xec>
		break;
	case DIO_PORTC:
		SET_BIT(DIO_PORTC_REG,pin);
    28de:	a5 e3       	ldi	r26, 0x35	; 53
    28e0:	b0 e0       	ldi	r27, 0x00	; 0
    28e2:	e5 e3       	ldi	r30, 0x35	; 53
    28e4:	f0 e0       	ldi	r31, 0x00	; 0
    28e6:	80 81       	ld	r24, Z
    28e8:	48 2f       	mov	r20, r24
    28ea:	8a 81       	ldd	r24, Y+2	; 0x02
    28ec:	28 2f       	mov	r18, r24
    28ee:	30 e0       	ldi	r19, 0x00	; 0
    28f0:	81 e0       	ldi	r24, 0x01	; 1
    28f2:	90 e0       	ldi	r25, 0x00	; 0
    28f4:	02 2e       	mov	r0, r18
    28f6:	02 c0       	rjmp	.+4      	; 0x28fc <DIO_voidPULLUpEnable+0xbc>
    28f8:	88 0f       	add	r24, r24
    28fa:	99 1f       	adc	r25, r25
    28fc:	0a 94       	dec	r0
    28fe:	e2 f7       	brpl	.-8      	; 0x28f8 <DIO_voidPULLUpEnable+0xb8>
    2900:	84 2b       	or	r24, r20
    2902:	8c 93       	st	X, r24
    2904:	13 c0       	rjmp	.+38     	; 0x292c <DIO_voidPULLUpEnable+0xec>
		break;
	case DIO_PORTD:
		SET_BIT(DIO_PORTD_REG,pin);
    2906:	a2 e3       	ldi	r26, 0x32	; 50
    2908:	b0 e0       	ldi	r27, 0x00	; 0
    290a:	e2 e3       	ldi	r30, 0x32	; 50
    290c:	f0 e0       	ldi	r31, 0x00	; 0
    290e:	80 81       	ld	r24, Z
    2910:	48 2f       	mov	r20, r24
    2912:	8a 81       	ldd	r24, Y+2	; 0x02
    2914:	28 2f       	mov	r18, r24
    2916:	30 e0       	ldi	r19, 0x00	; 0
    2918:	81 e0       	ldi	r24, 0x01	; 1
    291a:	90 e0       	ldi	r25, 0x00	; 0
    291c:	02 2e       	mov	r0, r18
    291e:	02 c0       	rjmp	.+4      	; 0x2924 <DIO_voidPULLUpEnable+0xe4>
    2920:	88 0f       	add	r24, r24
    2922:	99 1f       	adc	r25, r25
    2924:	0a 94       	dec	r0
    2926:	e2 f7       	brpl	.-8      	; 0x2920 <DIO_voidPULLUpEnable+0xe0>
    2928:	84 2b       	or	r24, r20
    292a:	8c 93       	st	X, r24
		break;
	}
}
    292c:	0f 90       	pop	r0
    292e:	0f 90       	pop	r0
    2930:	0f 90       	pop	r0
    2932:	0f 90       	pop	r0
    2934:	cf 91       	pop	r28
    2936:	df 91       	pop	r29
    2938:	08 95       	ret

0000293a <DIO_voidFlipChannel>:
void DIO_voidFlipChannel(DIO_PORT_T port,DIO_PIN_T pin)
{
    293a:	df 93       	push	r29
    293c:	cf 93       	push	r28
    293e:	00 d0       	rcall	.+0      	; 0x2940 <DIO_voidFlipChannel+0x6>
    2940:	00 d0       	rcall	.+0      	; 0x2942 <DIO_voidFlipChannel+0x8>
    2942:	cd b7       	in	r28, 0x3d	; 61
    2944:	de b7       	in	r29, 0x3e	; 62
    2946:	89 83       	std	Y+1, r24	; 0x01
    2948:	6a 83       	std	Y+2, r22	; 0x02
	switch (port)
    294a:	89 81       	ldd	r24, Y+1	; 0x01
    294c:	28 2f       	mov	r18, r24
    294e:	30 e0       	ldi	r19, 0x00	; 0
    2950:	3c 83       	std	Y+4, r19	; 0x04
    2952:	2b 83       	std	Y+3, r18	; 0x03
    2954:	8b 81       	ldd	r24, Y+3	; 0x03
    2956:	9c 81       	ldd	r25, Y+4	; 0x04
    2958:	81 30       	cpi	r24, 0x01	; 1
    295a:	91 05       	cpc	r25, r1
    295c:	49 f1       	breq	.+82     	; 0x29b0 <DIO_voidFlipChannel+0x76>
    295e:	2b 81       	ldd	r18, Y+3	; 0x03
    2960:	3c 81       	ldd	r19, Y+4	; 0x04
    2962:	22 30       	cpi	r18, 0x02	; 2
    2964:	31 05       	cpc	r19, r1
    2966:	2c f4       	brge	.+10     	; 0x2972 <DIO_voidFlipChannel+0x38>
    2968:	8b 81       	ldd	r24, Y+3	; 0x03
    296a:	9c 81       	ldd	r25, Y+4	; 0x04
    296c:	00 97       	sbiw	r24, 0x00	; 0
    296e:	61 f0       	breq	.+24     	; 0x2988 <DIO_voidFlipChannel+0x4e>
    2970:	5a c0       	rjmp	.+180    	; 0x2a26 <DIO_voidFlipChannel+0xec>
    2972:	2b 81       	ldd	r18, Y+3	; 0x03
    2974:	3c 81       	ldd	r19, Y+4	; 0x04
    2976:	22 30       	cpi	r18, 0x02	; 2
    2978:	31 05       	cpc	r19, r1
    297a:	71 f1       	breq	.+92     	; 0x29d8 <DIO_voidFlipChannel+0x9e>
    297c:	8b 81       	ldd	r24, Y+3	; 0x03
    297e:	9c 81       	ldd	r25, Y+4	; 0x04
    2980:	83 30       	cpi	r24, 0x03	; 3
    2982:	91 05       	cpc	r25, r1
    2984:	e9 f1       	breq	.+122    	; 0x2a00 <DIO_voidFlipChannel+0xc6>
    2986:	4f c0       	rjmp	.+158    	; 0x2a26 <DIO_voidFlipChannel+0xec>
	{
	case DIO_PORTA:
		FLIP_BIT(DIO_PORTA_REG,pin);
    2988:	ab e3       	ldi	r26, 0x3B	; 59
    298a:	b0 e0       	ldi	r27, 0x00	; 0
    298c:	eb e3       	ldi	r30, 0x3B	; 59
    298e:	f0 e0       	ldi	r31, 0x00	; 0
    2990:	80 81       	ld	r24, Z
    2992:	48 2f       	mov	r20, r24
    2994:	8a 81       	ldd	r24, Y+2	; 0x02
    2996:	28 2f       	mov	r18, r24
    2998:	30 e0       	ldi	r19, 0x00	; 0
    299a:	81 e0       	ldi	r24, 0x01	; 1
    299c:	90 e0       	ldi	r25, 0x00	; 0
    299e:	02 2e       	mov	r0, r18
    29a0:	02 c0       	rjmp	.+4      	; 0x29a6 <DIO_voidFlipChannel+0x6c>
    29a2:	88 0f       	add	r24, r24
    29a4:	99 1f       	adc	r25, r25
    29a6:	0a 94       	dec	r0
    29a8:	e2 f7       	brpl	.-8      	; 0x29a2 <DIO_voidFlipChannel+0x68>
    29aa:	84 27       	eor	r24, r20
    29ac:	8c 93       	st	X, r24
    29ae:	3b c0       	rjmp	.+118    	; 0x2a26 <DIO_voidFlipChannel+0xec>
		break;
	case DIO_PORTB:
		FLIP_BIT(DIO_PORTB_REG,pin);
    29b0:	a8 e3       	ldi	r26, 0x38	; 56
    29b2:	b0 e0       	ldi	r27, 0x00	; 0
    29b4:	e8 e3       	ldi	r30, 0x38	; 56
    29b6:	f0 e0       	ldi	r31, 0x00	; 0
    29b8:	80 81       	ld	r24, Z
    29ba:	48 2f       	mov	r20, r24
    29bc:	8a 81       	ldd	r24, Y+2	; 0x02
    29be:	28 2f       	mov	r18, r24
    29c0:	30 e0       	ldi	r19, 0x00	; 0
    29c2:	81 e0       	ldi	r24, 0x01	; 1
    29c4:	90 e0       	ldi	r25, 0x00	; 0
    29c6:	02 2e       	mov	r0, r18
    29c8:	02 c0       	rjmp	.+4      	; 0x29ce <DIO_voidFlipChannel+0x94>
    29ca:	88 0f       	add	r24, r24
    29cc:	99 1f       	adc	r25, r25
    29ce:	0a 94       	dec	r0
    29d0:	e2 f7       	brpl	.-8      	; 0x29ca <DIO_voidFlipChannel+0x90>
    29d2:	84 27       	eor	r24, r20
    29d4:	8c 93       	st	X, r24
    29d6:	27 c0       	rjmp	.+78     	; 0x2a26 <DIO_voidFlipChannel+0xec>
		break;
	case DIO_PORTC:
		FLIP_BIT(DIO_PORTC_REG,pin);
    29d8:	a5 e3       	ldi	r26, 0x35	; 53
    29da:	b0 e0       	ldi	r27, 0x00	; 0
    29dc:	e5 e3       	ldi	r30, 0x35	; 53
    29de:	f0 e0       	ldi	r31, 0x00	; 0
    29e0:	80 81       	ld	r24, Z
    29e2:	48 2f       	mov	r20, r24
    29e4:	8a 81       	ldd	r24, Y+2	; 0x02
    29e6:	28 2f       	mov	r18, r24
    29e8:	30 e0       	ldi	r19, 0x00	; 0
    29ea:	81 e0       	ldi	r24, 0x01	; 1
    29ec:	90 e0       	ldi	r25, 0x00	; 0
    29ee:	02 2e       	mov	r0, r18
    29f0:	02 c0       	rjmp	.+4      	; 0x29f6 <DIO_voidFlipChannel+0xbc>
    29f2:	88 0f       	add	r24, r24
    29f4:	99 1f       	adc	r25, r25
    29f6:	0a 94       	dec	r0
    29f8:	e2 f7       	brpl	.-8      	; 0x29f2 <DIO_voidFlipChannel+0xb8>
    29fa:	84 27       	eor	r24, r20
    29fc:	8c 93       	st	X, r24
    29fe:	13 c0       	rjmp	.+38     	; 0x2a26 <DIO_voidFlipChannel+0xec>
		break;
	case DIO_PORTD:
		FLIP_BIT(DIO_PORTD_REG,pin);
    2a00:	a2 e3       	ldi	r26, 0x32	; 50
    2a02:	b0 e0       	ldi	r27, 0x00	; 0
    2a04:	e2 e3       	ldi	r30, 0x32	; 50
    2a06:	f0 e0       	ldi	r31, 0x00	; 0
    2a08:	80 81       	ld	r24, Z
    2a0a:	48 2f       	mov	r20, r24
    2a0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a0e:	28 2f       	mov	r18, r24
    2a10:	30 e0       	ldi	r19, 0x00	; 0
    2a12:	81 e0       	ldi	r24, 0x01	; 1
    2a14:	90 e0       	ldi	r25, 0x00	; 0
    2a16:	02 2e       	mov	r0, r18
    2a18:	02 c0       	rjmp	.+4      	; 0x2a1e <DIO_voidFlipChannel+0xe4>
    2a1a:	88 0f       	add	r24, r24
    2a1c:	99 1f       	adc	r25, r25
    2a1e:	0a 94       	dec	r0
    2a20:	e2 f7       	brpl	.-8      	; 0x2a1a <DIO_voidFlipChannel+0xe0>
    2a22:	84 27       	eor	r24, r20
    2a24:	8c 93       	st	X, r24
		break;
	}
}
    2a26:	0f 90       	pop	r0
    2a28:	0f 90       	pop	r0
    2a2a:	0f 90       	pop	r0
    2a2c:	0f 90       	pop	r0
    2a2e:	cf 91       	pop	r28
    2a30:	df 91       	pop	r29
    2a32:	08 95       	ret

00002a34 <WakeUp_Call>:
void WakeUp_Call(void)
{
    2a34:	df 93       	push	r29
    2a36:	cf 93       	push	r28
    2a38:	cd b7       	in	r28, 0x3d	; 61
    2a3a:	de b7       	in	r29, 0x3e	; 62

	LCD_voidInit();
    2a3c:	0e 94 41 08 	call	0x1082	; 0x1082 <LCD_voidInit>
	ADC_voidInit(ADC_AVCC);
    2a40:	81 e0       	ldi	r24, 0x01	; 1
    2a42:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <ADC_voidInit>
}
    2a46:	cf 91       	pop	r28
    2a48:	df 91       	pop	r29
    2a4a:	08 95       	ret

00002a4c <ADC_voidInit>:
 */

#include "ADC.h"

void ADC_voidInit(ADC_Vref_t vrefMode)
{
    2a4c:	df 93       	push	r29
    2a4e:	cf 93       	push	r28
    2a50:	0f 92       	push	r0
    2a52:	cd b7       	in	r28, 0x3d	; 61
    2a54:	de b7       	in	r29, 0x3e	; 62
    2a56:	89 83       	std	Y+1, r24	; 0x01
	// Enable ADC
	SET_BIT(ADC_ADCSRA_REG,ADC_ENABLE_BIT);
    2a58:	a6 e2       	ldi	r26, 0x26	; 38
    2a5a:	b0 e0       	ldi	r27, 0x00	; 0
    2a5c:	e6 e2       	ldi	r30, 0x26	; 38
    2a5e:	f0 e0       	ldi	r31, 0x00	; 0
    2a60:	80 81       	ld	r24, Z
    2a62:	80 68       	ori	r24, 0x80	; 128
    2a64:	8c 93       	st	X, r24

	// configure VREF+
	ADC_ADMUX_REG = (ADC_ADMUX_REG & ADC_VREF_MASK) | (vrefMode << 6);
    2a66:	a7 e2       	ldi	r26, 0x27	; 39
    2a68:	b0 e0       	ldi	r27, 0x00	; 0
    2a6a:	e7 e2       	ldi	r30, 0x27	; 39
    2a6c:	f0 e0       	ldi	r31, 0x00	; 0
    2a6e:	80 81       	ld	r24, Z
    2a70:	28 2f       	mov	r18, r24
    2a72:	2f 73       	andi	r18, 0x3F	; 63
    2a74:	89 81       	ldd	r24, Y+1	; 0x01
    2a76:	88 2f       	mov	r24, r24
    2a78:	90 e0       	ldi	r25, 0x00	; 0
    2a7a:	00 24       	eor	r0, r0
    2a7c:	96 95       	lsr	r25
    2a7e:	87 95       	ror	r24
    2a80:	07 94       	ror	r0
    2a82:	96 95       	lsr	r25
    2a84:	87 95       	ror	r24
    2a86:	07 94       	ror	r0
    2a88:	98 2f       	mov	r25, r24
    2a8a:	80 2d       	mov	r24, r0
    2a8c:	82 2b       	or	r24, r18
    2a8e:	8c 93       	st	X, r24

	// Configure prescaler
	ADC_ADCSRA_REG = (ADC_ADCSRA_REG & ADC_PRESCALER_MASK) | (ADC_PRES_125KHZ << 0);
    2a90:	a6 e2       	ldi	r26, 0x26	; 38
    2a92:	b0 e0       	ldi	r27, 0x00	; 0
    2a94:	e6 e2       	ldi	r30, 0x26	; 38
    2a96:	f0 e0       	ldi	r31, 0x00	; 0
    2a98:	80 81       	ld	r24, Z
    2a9a:	87 60       	ori	r24, 0x07	; 7
    2a9c:	8c 93       	st	X, r24
}
    2a9e:	0f 90       	pop	r0
    2aa0:	cf 91       	pop	r28
    2aa2:	df 91       	pop	r29
    2aa4:	08 95       	ret

00002aa6 <ADC_u16ReadSteps>:

u16 ADC_u16ReadSteps(ADC_Channel_t channel)
{
    2aa6:	df 93       	push	r29
    2aa8:	cf 93       	push	r28
    2aaa:	00 d0       	rcall	.+0      	; 0x2aac <ADC_u16ReadSteps+0x6>
    2aac:	0f 92       	push	r0
    2aae:	cd b7       	in	r28, 0x3d	; 61
    2ab0:	de b7       	in	r29, 0x3e	; 62
    2ab2:	8b 83       	std	Y+3, r24	; 0x03
	u16 loc_steps;

	// Configure channel
	ADC_ADMUX_REG = (ADC_ADMUX_REG & ADC_CHANNEL_MASK) | (channel << 0);
    2ab4:	a7 e2       	ldi	r26, 0x27	; 39
    2ab6:	b0 e0       	ldi	r27, 0x00	; 0
    2ab8:	e7 e2       	ldi	r30, 0x27	; 39
    2aba:	f0 e0       	ldi	r31, 0x00	; 0
    2abc:	80 81       	ld	r24, Z
    2abe:	98 2f       	mov	r25, r24
    2ac0:	90 7e       	andi	r25, 0xE0	; 224
    2ac2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ac4:	89 2b       	or	r24, r25
    2ac6:	8c 93       	st	X, r24

	// Start conversion
	SET_BIT(ADC_ADCSRA_REG,ADC_CONVERSION_BIT);
    2ac8:	a6 e2       	ldi	r26, 0x26	; 38
    2aca:	b0 e0       	ldi	r27, 0x00	; 0
    2acc:	e6 e2       	ldi	r30, 0x26	; 38
    2ace:	f0 e0       	ldi	r31, 0x00	; 0
    2ad0:	80 81       	ld	r24, Z
    2ad2:	80 64       	ori	r24, 0x40	; 64
    2ad4:	8c 93       	st	X, r24

	// Wait for the ADIF and then clear it by writing 1 to it
	while( CHECK_BIT(ADC_ADCSRA_REG,ADC_ADIF_BIT) != 1 );
    2ad6:	e6 e2       	ldi	r30, 0x26	; 38
    2ad8:	f0 e0       	ldi	r31, 0x00	; 0
    2ada:	80 81       	ld	r24, Z
    2adc:	82 95       	swap	r24
    2ade:	8f 70       	andi	r24, 0x0F	; 15
    2ae0:	88 2f       	mov	r24, r24
    2ae2:	90 e0       	ldi	r25, 0x00	; 0
    2ae4:	81 70       	andi	r24, 0x01	; 1
    2ae6:	90 70       	andi	r25, 0x00	; 0
    2ae8:	00 97       	sbiw	r24, 0x00	; 0
    2aea:	a9 f3       	breq	.-22     	; 0x2ad6 <ADC_u16ReadSteps+0x30>

	//SET_BIT(ADC_ADIF_BIT, ADC_ADCSRA_REG);
	SET_BIT(ADC_ADCSRA_REG,ADC_ADIF_BIT);
    2aec:	a6 e2       	ldi	r26, 0x26	; 38
    2aee:	b0 e0       	ldi	r27, 0x00	; 0
    2af0:	e6 e2       	ldi	r30, 0x26	; 38
    2af2:	f0 e0       	ldi	r31, 0x00	; 0
    2af4:	80 81       	ld	r24, Z
    2af6:	80 61       	ori	r24, 0x10	; 16
    2af8:	8c 93       	st	X, r24

	loc_steps = ADC_ADCL_REG | (ADC_ADCH_REG << 8);
    2afa:	e4 e2       	ldi	r30, 0x24	; 36
    2afc:	f0 e0       	ldi	r31, 0x00	; 0
    2afe:	80 81       	ld	r24, Z
    2b00:	28 2f       	mov	r18, r24
    2b02:	30 e0       	ldi	r19, 0x00	; 0
    2b04:	e5 e2       	ldi	r30, 0x25	; 37
    2b06:	f0 e0       	ldi	r31, 0x00	; 0
    2b08:	80 81       	ld	r24, Z
    2b0a:	88 2f       	mov	r24, r24
    2b0c:	90 e0       	ldi	r25, 0x00	; 0
    2b0e:	98 2f       	mov	r25, r24
    2b10:	88 27       	eor	r24, r24
    2b12:	82 2b       	or	r24, r18
    2b14:	93 2b       	or	r25, r19
    2b16:	9a 83       	std	Y+2, r25	; 0x02
    2b18:	89 83       	std	Y+1, r24	; 0x01

	return loc_steps;
    2b1a:	89 81       	ldd	r24, Y+1	; 0x01
    2b1c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2b1e:	0f 90       	pop	r0
    2b20:	0f 90       	pop	r0
    2b22:	0f 90       	pop	r0
    2b24:	cf 91       	pop	r28
    2b26:	df 91       	pop	r29
    2b28:	08 95       	ret

00002b2a <ADC_f64ReadVolts_mv>:

f64 ADC_f64ReadVolts_mv(ADC_Channel_t channel)
{
    2b2a:	df 93       	push	r29
    2b2c:	cf 93       	push	r28
    2b2e:	cd b7       	in	r28, 0x3d	; 61
    2b30:	de b7       	in	r29, 0x3e	; 62
    2b32:	27 97       	sbiw	r28, 0x07	; 7
    2b34:	0f b6       	in	r0, 0x3f	; 63
    2b36:	f8 94       	cli
    2b38:	de bf       	out	0x3e, r29	; 62
    2b3a:	0f be       	out	0x3f, r0	; 63
    2b3c:	cd bf       	out	0x3d, r28	; 61
    2b3e:	8f 83       	std	Y+7, r24	; 0x07
	u16 loc_steps;
	f64 loc_volts;

	// Configure channel
	ADC_ADMUX_REG = (ADC_ADMUX_REG & ADC_CHANNEL_MASK) | (channel << 0);
    2b40:	a7 e2       	ldi	r26, 0x27	; 39
    2b42:	b0 e0       	ldi	r27, 0x00	; 0
    2b44:	e7 e2       	ldi	r30, 0x27	; 39
    2b46:	f0 e0       	ldi	r31, 0x00	; 0
    2b48:	80 81       	ld	r24, Z
    2b4a:	98 2f       	mov	r25, r24
    2b4c:	90 7e       	andi	r25, 0xE0	; 224
    2b4e:	8f 81       	ldd	r24, Y+7	; 0x07
    2b50:	89 2b       	or	r24, r25
    2b52:	8c 93       	st	X, r24

	// Start conversion
	SET_BIT(ADC_ADCSRA_REG,ADC_CONVERSION_BIT);
    2b54:	a6 e2       	ldi	r26, 0x26	; 38
    2b56:	b0 e0       	ldi	r27, 0x00	; 0
    2b58:	e6 e2       	ldi	r30, 0x26	; 38
    2b5a:	f0 e0       	ldi	r31, 0x00	; 0
    2b5c:	80 81       	ld	r24, Z
    2b5e:	80 64       	ori	r24, 0x40	; 64
    2b60:	8c 93       	st	X, r24

	// Wait for the ADIF and then clear it by writing 1 to it
	while( CHECK_BIT(ADC_ADCSRA_REG,ADC_ADIF_BIT) != 1 );
    2b62:	e6 e2       	ldi	r30, 0x26	; 38
    2b64:	f0 e0       	ldi	r31, 0x00	; 0
    2b66:	80 81       	ld	r24, Z
    2b68:	82 95       	swap	r24
    2b6a:	8f 70       	andi	r24, 0x0F	; 15
    2b6c:	88 2f       	mov	r24, r24
    2b6e:	90 e0       	ldi	r25, 0x00	; 0
    2b70:	81 70       	andi	r24, 0x01	; 1
    2b72:	90 70       	andi	r25, 0x00	; 0
    2b74:	00 97       	sbiw	r24, 0x00	; 0
    2b76:	a9 f3       	breq	.-22     	; 0x2b62 <ADC_f64ReadVolts_mv+0x38>

	SET_BIT(ADC_ADCSRA_REG,ADC_ADIF_BIT);
    2b78:	a6 e2       	ldi	r26, 0x26	; 38
    2b7a:	b0 e0       	ldi	r27, 0x00	; 0
    2b7c:	e6 e2       	ldi	r30, 0x26	; 38
    2b7e:	f0 e0       	ldi	r31, 0x00	; 0
    2b80:	80 81       	ld	r24, Z
    2b82:	80 61       	ori	r24, 0x10	; 16
    2b84:	8c 93       	st	X, r24

	loc_steps = ADC_ADCL_REG | (ADC_ADCH_REG << 8);
    2b86:	e4 e2       	ldi	r30, 0x24	; 36
    2b88:	f0 e0       	ldi	r31, 0x00	; 0
    2b8a:	80 81       	ld	r24, Z
    2b8c:	28 2f       	mov	r18, r24
    2b8e:	30 e0       	ldi	r19, 0x00	; 0
    2b90:	e5 e2       	ldi	r30, 0x25	; 37
    2b92:	f0 e0       	ldi	r31, 0x00	; 0
    2b94:	80 81       	ld	r24, Z
    2b96:	88 2f       	mov	r24, r24
    2b98:	90 e0       	ldi	r25, 0x00	; 0
    2b9a:	98 2f       	mov	r25, r24
    2b9c:	88 27       	eor	r24, r24
    2b9e:	82 2b       	or	r24, r18
    2ba0:	93 2b       	or	r25, r19
    2ba2:	9e 83       	std	Y+6, r25	; 0x06
    2ba4:	8d 83       	std	Y+5, r24	; 0x05
	loc_volts = loc_steps * ADC_STEP;
    2ba6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ba8:	9e 81       	ldd	r25, Y+6	; 0x06
    2baa:	cc 01       	movw	r24, r24
    2bac:	a0 e0       	ldi	r26, 0x00	; 0
    2bae:	b0 e0       	ldi	r27, 0x00	; 0
    2bb0:	bc 01       	movw	r22, r24
    2bb2:	cd 01       	movw	r24, r26
    2bb4:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    2bb8:	dc 01       	movw	r26, r24
    2bba:	cb 01       	movw	r24, r22
    2bbc:	bc 01       	movw	r22, r24
    2bbe:	cd 01       	movw	r24, r26
    2bc0:	2a e9       	ldi	r18, 0x9A	; 154
    2bc2:	39 e9       	ldi	r19, 0x99	; 153
    2bc4:	49 e9       	ldi	r20, 0x99	; 153
    2bc6:	50 e4       	ldi	r21, 0x40	; 64
    2bc8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2bcc:	dc 01       	movw	r26, r24
    2bce:	cb 01       	movw	r24, r22
    2bd0:	89 83       	std	Y+1, r24	; 0x01
    2bd2:	9a 83       	std	Y+2, r25	; 0x02
    2bd4:	ab 83       	std	Y+3, r26	; 0x03
    2bd6:	bc 83       	std	Y+4, r27	; 0x04

	return loc_volts;
    2bd8:	89 81       	ldd	r24, Y+1	; 0x01
    2bda:	9a 81       	ldd	r25, Y+2	; 0x02
    2bdc:	ab 81       	ldd	r26, Y+3	; 0x03
    2bde:	bc 81       	ldd	r27, Y+4	; 0x04
}
    2be0:	bc 01       	movw	r22, r24
    2be2:	cd 01       	movw	r24, r26
    2be4:	27 96       	adiw	r28, 0x07	; 7
    2be6:	0f b6       	in	r0, 0x3f	; 63
    2be8:	f8 94       	cli
    2bea:	de bf       	out	0x3e, r29	; 62
    2bec:	0f be       	out	0x3f, r0	; 63
    2bee:	cd bf       	out	0x3d, r28	; 61
    2bf0:	cf 91       	pop	r28
    2bf2:	df 91       	pop	r29
    2bf4:	08 95       	ret

00002bf6 <__udivmodsi4>:
    2bf6:	a1 e2       	ldi	r26, 0x21	; 33
    2bf8:	1a 2e       	mov	r1, r26
    2bfa:	aa 1b       	sub	r26, r26
    2bfc:	bb 1b       	sub	r27, r27
    2bfe:	fd 01       	movw	r30, r26
    2c00:	0d c0       	rjmp	.+26     	; 0x2c1c <__udivmodsi4_ep>

00002c02 <__udivmodsi4_loop>:
    2c02:	aa 1f       	adc	r26, r26
    2c04:	bb 1f       	adc	r27, r27
    2c06:	ee 1f       	adc	r30, r30
    2c08:	ff 1f       	adc	r31, r31
    2c0a:	a2 17       	cp	r26, r18
    2c0c:	b3 07       	cpc	r27, r19
    2c0e:	e4 07       	cpc	r30, r20
    2c10:	f5 07       	cpc	r31, r21
    2c12:	20 f0       	brcs	.+8      	; 0x2c1c <__udivmodsi4_ep>
    2c14:	a2 1b       	sub	r26, r18
    2c16:	b3 0b       	sbc	r27, r19
    2c18:	e4 0b       	sbc	r30, r20
    2c1a:	f5 0b       	sbc	r31, r21

00002c1c <__udivmodsi4_ep>:
    2c1c:	66 1f       	adc	r22, r22
    2c1e:	77 1f       	adc	r23, r23
    2c20:	88 1f       	adc	r24, r24
    2c22:	99 1f       	adc	r25, r25
    2c24:	1a 94       	dec	r1
    2c26:	69 f7       	brne	.-38     	; 0x2c02 <__udivmodsi4_loop>
    2c28:	60 95       	com	r22
    2c2a:	70 95       	com	r23
    2c2c:	80 95       	com	r24
    2c2e:	90 95       	com	r25
    2c30:	9b 01       	movw	r18, r22
    2c32:	ac 01       	movw	r20, r24
    2c34:	bd 01       	movw	r22, r26
    2c36:	cf 01       	movw	r24, r30
    2c38:	08 95       	ret

00002c3a <__prologue_saves__>:
    2c3a:	2f 92       	push	r2
    2c3c:	3f 92       	push	r3
    2c3e:	4f 92       	push	r4
    2c40:	5f 92       	push	r5
    2c42:	6f 92       	push	r6
    2c44:	7f 92       	push	r7
    2c46:	8f 92       	push	r8
    2c48:	9f 92       	push	r9
    2c4a:	af 92       	push	r10
    2c4c:	bf 92       	push	r11
    2c4e:	cf 92       	push	r12
    2c50:	df 92       	push	r13
    2c52:	ef 92       	push	r14
    2c54:	ff 92       	push	r15
    2c56:	0f 93       	push	r16
    2c58:	1f 93       	push	r17
    2c5a:	cf 93       	push	r28
    2c5c:	df 93       	push	r29
    2c5e:	cd b7       	in	r28, 0x3d	; 61
    2c60:	de b7       	in	r29, 0x3e	; 62
    2c62:	ca 1b       	sub	r28, r26
    2c64:	db 0b       	sbc	r29, r27
    2c66:	0f b6       	in	r0, 0x3f	; 63
    2c68:	f8 94       	cli
    2c6a:	de bf       	out	0x3e, r29	; 62
    2c6c:	0f be       	out	0x3f, r0	; 63
    2c6e:	cd bf       	out	0x3d, r28	; 61
    2c70:	09 94       	ijmp

00002c72 <__epilogue_restores__>:
    2c72:	2a 88       	ldd	r2, Y+18	; 0x12
    2c74:	39 88       	ldd	r3, Y+17	; 0x11
    2c76:	48 88       	ldd	r4, Y+16	; 0x10
    2c78:	5f 84       	ldd	r5, Y+15	; 0x0f
    2c7a:	6e 84       	ldd	r6, Y+14	; 0x0e
    2c7c:	7d 84       	ldd	r7, Y+13	; 0x0d
    2c7e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2c80:	9b 84       	ldd	r9, Y+11	; 0x0b
    2c82:	aa 84       	ldd	r10, Y+10	; 0x0a
    2c84:	b9 84       	ldd	r11, Y+9	; 0x09
    2c86:	c8 84       	ldd	r12, Y+8	; 0x08
    2c88:	df 80       	ldd	r13, Y+7	; 0x07
    2c8a:	ee 80       	ldd	r14, Y+6	; 0x06
    2c8c:	fd 80       	ldd	r15, Y+5	; 0x05
    2c8e:	0c 81       	ldd	r16, Y+4	; 0x04
    2c90:	1b 81       	ldd	r17, Y+3	; 0x03
    2c92:	aa 81       	ldd	r26, Y+2	; 0x02
    2c94:	b9 81       	ldd	r27, Y+1	; 0x01
    2c96:	ce 0f       	add	r28, r30
    2c98:	d1 1d       	adc	r29, r1
    2c9a:	0f b6       	in	r0, 0x3f	; 63
    2c9c:	f8 94       	cli
    2c9e:	de bf       	out	0x3e, r29	; 62
    2ca0:	0f be       	out	0x3f, r0	; 63
    2ca2:	cd bf       	out	0x3d, r28	; 61
    2ca4:	ed 01       	movw	r28, r26
    2ca6:	08 95       	ret

00002ca8 <sprintf>:
    2ca8:	ae e0       	ldi	r26, 0x0E	; 14
    2caa:	b0 e0       	ldi	r27, 0x00	; 0
    2cac:	ea e5       	ldi	r30, 0x5A	; 90
    2cae:	f6 e1       	ldi	r31, 0x16	; 22
    2cb0:	0c 94 2b 16 	jmp	0x2c56	; 0x2c56 <__prologue_saves__+0x1c>
    2cb4:	0d 89       	ldd	r16, Y+21	; 0x15
    2cb6:	1e 89       	ldd	r17, Y+22	; 0x16
    2cb8:	86 e0       	ldi	r24, 0x06	; 6
    2cba:	8c 83       	std	Y+4, r24	; 0x04
    2cbc:	1a 83       	std	Y+2, r17	; 0x02
    2cbe:	09 83       	std	Y+1, r16	; 0x01
    2cc0:	8f ef       	ldi	r24, 0xFF	; 255
    2cc2:	9f e7       	ldi	r25, 0x7F	; 127
    2cc4:	9e 83       	std	Y+6, r25	; 0x06
    2cc6:	8d 83       	std	Y+5, r24	; 0x05
    2cc8:	9e 01       	movw	r18, r28
    2cca:	27 5e       	subi	r18, 0xE7	; 231
    2ccc:	3f 4f       	sbci	r19, 0xFF	; 255
    2cce:	ce 01       	movw	r24, r28
    2cd0:	01 96       	adiw	r24, 0x01	; 1
    2cd2:	6f 89       	ldd	r22, Y+23	; 0x17
    2cd4:	78 8d       	ldd	r23, Y+24	; 0x18
    2cd6:	a9 01       	movw	r20, r18
    2cd8:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <vfprintf>
    2cdc:	2f 81       	ldd	r18, Y+7	; 0x07
    2cde:	38 85       	ldd	r19, Y+8	; 0x08
    2ce0:	02 0f       	add	r16, r18
    2ce2:	13 1f       	adc	r17, r19
    2ce4:	f8 01       	movw	r30, r16
    2ce6:	10 82       	st	Z, r1
    2ce8:	2e 96       	adiw	r28, 0x0e	; 14
    2cea:	e4 e0       	ldi	r30, 0x04	; 4
    2cec:	0c 94 47 16 	jmp	0x2c8e	; 0x2c8e <__epilogue_restores__+0x1c>

00002cf0 <vfprintf>:
    2cf0:	ab e0       	ldi	r26, 0x0B	; 11
    2cf2:	b0 e0       	ldi	r27, 0x00	; 0
    2cf4:	ee e7       	ldi	r30, 0x7E	; 126
    2cf6:	f6 e1       	ldi	r31, 0x16	; 22
    2cf8:	0c 94 1d 16 	jmp	0x2c3a	; 0x2c3a <__prologue_saves__>
    2cfc:	3c 01       	movw	r6, r24
    2cfe:	2b 01       	movw	r4, r22
    2d00:	5a 01       	movw	r10, r20
    2d02:	fc 01       	movw	r30, r24
    2d04:	17 82       	std	Z+7, r1	; 0x07
    2d06:	16 82       	std	Z+6, r1	; 0x06
    2d08:	83 81       	ldd	r24, Z+3	; 0x03
    2d0a:	81 fd       	sbrc	r24, 1
    2d0c:	03 c0       	rjmp	.+6      	; 0x2d14 <vfprintf+0x24>
    2d0e:	6f ef       	ldi	r22, 0xFF	; 255
    2d10:	7f ef       	ldi	r23, 0xFF	; 255
    2d12:	c6 c1       	rjmp	.+908    	; 0x30a0 <vfprintf+0x3b0>
    2d14:	9a e0       	ldi	r25, 0x0A	; 10
    2d16:	89 2e       	mov	r8, r25
    2d18:	1e 01       	movw	r2, r28
    2d1a:	08 94       	sec
    2d1c:	21 1c       	adc	r2, r1
    2d1e:	31 1c       	adc	r3, r1
    2d20:	f3 01       	movw	r30, r6
    2d22:	23 81       	ldd	r18, Z+3	; 0x03
    2d24:	f2 01       	movw	r30, r4
    2d26:	23 fd       	sbrc	r18, 3
    2d28:	85 91       	lpm	r24, Z+
    2d2a:	23 ff       	sbrs	r18, 3
    2d2c:	81 91       	ld	r24, Z+
    2d2e:	2f 01       	movw	r4, r30
    2d30:	88 23       	and	r24, r24
    2d32:	09 f4       	brne	.+2      	; 0x2d36 <vfprintf+0x46>
    2d34:	b2 c1       	rjmp	.+868    	; 0x309a <vfprintf+0x3aa>
    2d36:	85 32       	cpi	r24, 0x25	; 37
    2d38:	39 f4       	brne	.+14     	; 0x2d48 <vfprintf+0x58>
    2d3a:	23 fd       	sbrc	r18, 3
    2d3c:	85 91       	lpm	r24, Z+
    2d3e:	23 ff       	sbrs	r18, 3
    2d40:	81 91       	ld	r24, Z+
    2d42:	2f 01       	movw	r4, r30
    2d44:	85 32       	cpi	r24, 0x25	; 37
    2d46:	29 f4       	brne	.+10     	; 0x2d52 <vfprintf+0x62>
    2d48:	90 e0       	ldi	r25, 0x00	; 0
    2d4a:	b3 01       	movw	r22, r6
    2d4c:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <fputc>
    2d50:	e7 cf       	rjmp	.-50     	; 0x2d20 <vfprintf+0x30>
    2d52:	98 2f       	mov	r25, r24
    2d54:	ff 24       	eor	r15, r15
    2d56:	ee 24       	eor	r14, r14
    2d58:	99 24       	eor	r9, r9
    2d5a:	ff e1       	ldi	r31, 0x1F	; 31
    2d5c:	ff 15       	cp	r31, r15
    2d5e:	d0 f0       	brcs	.+52     	; 0x2d94 <vfprintf+0xa4>
    2d60:	9b 32       	cpi	r25, 0x2B	; 43
    2d62:	69 f0       	breq	.+26     	; 0x2d7e <vfprintf+0x8e>
    2d64:	9c 32       	cpi	r25, 0x2C	; 44
    2d66:	28 f4       	brcc	.+10     	; 0x2d72 <vfprintf+0x82>
    2d68:	90 32       	cpi	r25, 0x20	; 32
    2d6a:	59 f0       	breq	.+22     	; 0x2d82 <vfprintf+0x92>
    2d6c:	93 32       	cpi	r25, 0x23	; 35
    2d6e:	91 f4       	brne	.+36     	; 0x2d94 <vfprintf+0xa4>
    2d70:	0e c0       	rjmp	.+28     	; 0x2d8e <vfprintf+0x9e>
    2d72:	9d 32       	cpi	r25, 0x2D	; 45
    2d74:	49 f0       	breq	.+18     	; 0x2d88 <vfprintf+0x98>
    2d76:	90 33       	cpi	r25, 0x30	; 48
    2d78:	69 f4       	brne	.+26     	; 0x2d94 <vfprintf+0xa4>
    2d7a:	41 e0       	ldi	r20, 0x01	; 1
    2d7c:	24 c0       	rjmp	.+72     	; 0x2dc6 <vfprintf+0xd6>
    2d7e:	52 e0       	ldi	r21, 0x02	; 2
    2d80:	f5 2a       	or	r15, r21
    2d82:	84 e0       	ldi	r24, 0x04	; 4
    2d84:	f8 2a       	or	r15, r24
    2d86:	28 c0       	rjmp	.+80     	; 0x2dd8 <vfprintf+0xe8>
    2d88:	98 e0       	ldi	r25, 0x08	; 8
    2d8a:	f9 2a       	or	r15, r25
    2d8c:	25 c0       	rjmp	.+74     	; 0x2dd8 <vfprintf+0xe8>
    2d8e:	e0 e1       	ldi	r30, 0x10	; 16
    2d90:	fe 2a       	or	r15, r30
    2d92:	22 c0       	rjmp	.+68     	; 0x2dd8 <vfprintf+0xe8>
    2d94:	f7 fc       	sbrc	r15, 7
    2d96:	29 c0       	rjmp	.+82     	; 0x2dea <vfprintf+0xfa>
    2d98:	89 2f       	mov	r24, r25
    2d9a:	80 53       	subi	r24, 0x30	; 48
    2d9c:	8a 30       	cpi	r24, 0x0A	; 10
    2d9e:	70 f4       	brcc	.+28     	; 0x2dbc <vfprintf+0xcc>
    2da0:	f6 fe       	sbrs	r15, 6
    2da2:	05 c0       	rjmp	.+10     	; 0x2dae <vfprintf+0xbe>
    2da4:	98 9c       	mul	r9, r8
    2da6:	90 2c       	mov	r9, r0
    2da8:	11 24       	eor	r1, r1
    2daa:	98 0e       	add	r9, r24
    2dac:	15 c0       	rjmp	.+42     	; 0x2dd8 <vfprintf+0xe8>
    2dae:	e8 9c       	mul	r14, r8
    2db0:	e0 2c       	mov	r14, r0
    2db2:	11 24       	eor	r1, r1
    2db4:	e8 0e       	add	r14, r24
    2db6:	f0 e2       	ldi	r31, 0x20	; 32
    2db8:	ff 2a       	or	r15, r31
    2dba:	0e c0       	rjmp	.+28     	; 0x2dd8 <vfprintf+0xe8>
    2dbc:	9e 32       	cpi	r25, 0x2E	; 46
    2dbe:	29 f4       	brne	.+10     	; 0x2dca <vfprintf+0xda>
    2dc0:	f6 fc       	sbrc	r15, 6
    2dc2:	6b c1       	rjmp	.+726    	; 0x309a <vfprintf+0x3aa>
    2dc4:	40 e4       	ldi	r20, 0x40	; 64
    2dc6:	f4 2a       	or	r15, r20
    2dc8:	07 c0       	rjmp	.+14     	; 0x2dd8 <vfprintf+0xe8>
    2dca:	9c 36       	cpi	r25, 0x6C	; 108
    2dcc:	19 f4       	brne	.+6      	; 0x2dd4 <vfprintf+0xe4>
    2dce:	50 e8       	ldi	r21, 0x80	; 128
    2dd0:	f5 2a       	or	r15, r21
    2dd2:	02 c0       	rjmp	.+4      	; 0x2dd8 <vfprintf+0xe8>
    2dd4:	98 36       	cpi	r25, 0x68	; 104
    2dd6:	49 f4       	brne	.+18     	; 0x2dea <vfprintf+0xfa>
    2dd8:	f2 01       	movw	r30, r4
    2dda:	23 fd       	sbrc	r18, 3
    2ddc:	95 91       	lpm	r25, Z+
    2dde:	23 ff       	sbrs	r18, 3
    2de0:	91 91       	ld	r25, Z+
    2de2:	2f 01       	movw	r4, r30
    2de4:	99 23       	and	r25, r25
    2de6:	09 f0       	breq	.+2      	; 0x2dea <vfprintf+0xfa>
    2de8:	b8 cf       	rjmp	.-144    	; 0x2d5a <vfprintf+0x6a>
    2dea:	89 2f       	mov	r24, r25
    2dec:	85 54       	subi	r24, 0x45	; 69
    2dee:	83 30       	cpi	r24, 0x03	; 3
    2df0:	18 f0       	brcs	.+6      	; 0x2df8 <vfprintf+0x108>
    2df2:	80 52       	subi	r24, 0x20	; 32
    2df4:	83 30       	cpi	r24, 0x03	; 3
    2df6:	38 f4       	brcc	.+14     	; 0x2e06 <vfprintf+0x116>
    2df8:	44 e0       	ldi	r20, 0x04	; 4
    2dfa:	50 e0       	ldi	r21, 0x00	; 0
    2dfc:	a4 0e       	add	r10, r20
    2dfe:	b5 1e       	adc	r11, r21
    2e00:	5f e3       	ldi	r21, 0x3F	; 63
    2e02:	59 83       	std	Y+1, r21	; 0x01
    2e04:	0f c0       	rjmp	.+30     	; 0x2e24 <vfprintf+0x134>
    2e06:	93 36       	cpi	r25, 0x63	; 99
    2e08:	31 f0       	breq	.+12     	; 0x2e16 <vfprintf+0x126>
    2e0a:	93 37       	cpi	r25, 0x73	; 115
    2e0c:	79 f0       	breq	.+30     	; 0x2e2c <vfprintf+0x13c>
    2e0e:	93 35       	cpi	r25, 0x53	; 83
    2e10:	09 f0       	breq	.+2      	; 0x2e14 <vfprintf+0x124>
    2e12:	56 c0       	rjmp	.+172    	; 0x2ec0 <vfprintf+0x1d0>
    2e14:	20 c0       	rjmp	.+64     	; 0x2e56 <vfprintf+0x166>
    2e16:	f5 01       	movw	r30, r10
    2e18:	80 81       	ld	r24, Z
    2e1a:	89 83       	std	Y+1, r24	; 0x01
    2e1c:	42 e0       	ldi	r20, 0x02	; 2
    2e1e:	50 e0       	ldi	r21, 0x00	; 0
    2e20:	a4 0e       	add	r10, r20
    2e22:	b5 1e       	adc	r11, r21
    2e24:	61 01       	movw	r12, r2
    2e26:	01 e0       	ldi	r16, 0x01	; 1
    2e28:	10 e0       	ldi	r17, 0x00	; 0
    2e2a:	12 c0       	rjmp	.+36     	; 0x2e50 <vfprintf+0x160>
    2e2c:	f5 01       	movw	r30, r10
    2e2e:	c0 80       	ld	r12, Z
    2e30:	d1 80       	ldd	r13, Z+1	; 0x01
    2e32:	f6 fc       	sbrc	r15, 6
    2e34:	03 c0       	rjmp	.+6      	; 0x2e3c <vfprintf+0x14c>
    2e36:	6f ef       	ldi	r22, 0xFF	; 255
    2e38:	7f ef       	ldi	r23, 0xFF	; 255
    2e3a:	02 c0       	rjmp	.+4      	; 0x2e40 <vfprintf+0x150>
    2e3c:	69 2d       	mov	r22, r9
    2e3e:	70 e0       	ldi	r23, 0x00	; 0
    2e40:	42 e0       	ldi	r20, 0x02	; 2
    2e42:	50 e0       	ldi	r21, 0x00	; 0
    2e44:	a4 0e       	add	r10, r20
    2e46:	b5 1e       	adc	r11, r21
    2e48:	c6 01       	movw	r24, r12
    2e4a:	0e 94 60 18 	call	0x30c0	; 0x30c0 <strnlen>
    2e4e:	8c 01       	movw	r16, r24
    2e50:	5f e7       	ldi	r21, 0x7F	; 127
    2e52:	f5 22       	and	r15, r21
    2e54:	14 c0       	rjmp	.+40     	; 0x2e7e <vfprintf+0x18e>
    2e56:	f5 01       	movw	r30, r10
    2e58:	c0 80       	ld	r12, Z
    2e5a:	d1 80       	ldd	r13, Z+1	; 0x01
    2e5c:	f6 fc       	sbrc	r15, 6
    2e5e:	03 c0       	rjmp	.+6      	; 0x2e66 <vfprintf+0x176>
    2e60:	6f ef       	ldi	r22, 0xFF	; 255
    2e62:	7f ef       	ldi	r23, 0xFF	; 255
    2e64:	02 c0       	rjmp	.+4      	; 0x2e6a <vfprintf+0x17a>
    2e66:	69 2d       	mov	r22, r9
    2e68:	70 e0       	ldi	r23, 0x00	; 0
    2e6a:	42 e0       	ldi	r20, 0x02	; 2
    2e6c:	50 e0       	ldi	r21, 0x00	; 0
    2e6e:	a4 0e       	add	r10, r20
    2e70:	b5 1e       	adc	r11, r21
    2e72:	c6 01       	movw	r24, r12
    2e74:	0e 94 55 18 	call	0x30aa	; 0x30aa <strnlen_P>
    2e78:	8c 01       	movw	r16, r24
    2e7a:	50 e8       	ldi	r21, 0x80	; 128
    2e7c:	f5 2a       	or	r15, r21
    2e7e:	f3 fe       	sbrs	r15, 3
    2e80:	07 c0       	rjmp	.+14     	; 0x2e90 <vfprintf+0x1a0>
    2e82:	1a c0       	rjmp	.+52     	; 0x2eb8 <vfprintf+0x1c8>
    2e84:	80 e2       	ldi	r24, 0x20	; 32
    2e86:	90 e0       	ldi	r25, 0x00	; 0
    2e88:	b3 01       	movw	r22, r6
    2e8a:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <fputc>
    2e8e:	ea 94       	dec	r14
    2e90:	8e 2d       	mov	r24, r14
    2e92:	90 e0       	ldi	r25, 0x00	; 0
    2e94:	08 17       	cp	r16, r24
    2e96:	19 07       	cpc	r17, r25
    2e98:	a8 f3       	brcs	.-22     	; 0x2e84 <vfprintf+0x194>
    2e9a:	0e c0       	rjmp	.+28     	; 0x2eb8 <vfprintf+0x1c8>
    2e9c:	f6 01       	movw	r30, r12
    2e9e:	f7 fc       	sbrc	r15, 7
    2ea0:	85 91       	lpm	r24, Z+
    2ea2:	f7 fe       	sbrs	r15, 7
    2ea4:	81 91       	ld	r24, Z+
    2ea6:	6f 01       	movw	r12, r30
    2ea8:	90 e0       	ldi	r25, 0x00	; 0
    2eaa:	b3 01       	movw	r22, r6
    2eac:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <fputc>
    2eb0:	e1 10       	cpse	r14, r1
    2eb2:	ea 94       	dec	r14
    2eb4:	01 50       	subi	r16, 0x01	; 1
    2eb6:	10 40       	sbci	r17, 0x00	; 0
    2eb8:	01 15       	cp	r16, r1
    2eba:	11 05       	cpc	r17, r1
    2ebc:	79 f7       	brne	.-34     	; 0x2e9c <vfprintf+0x1ac>
    2ebe:	ea c0       	rjmp	.+468    	; 0x3094 <vfprintf+0x3a4>
    2ec0:	94 36       	cpi	r25, 0x64	; 100
    2ec2:	11 f0       	breq	.+4      	; 0x2ec8 <vfprintf+0x1d8>
    2ec4:	99 36       	cpi	r25, 0x69	; 105
    2ec6:	69 f5       	brne	.+90     	; 0x2f22 <vfprintf+0x232>
    2ec8:	f7 fe       	sbrs	r15, 7
    2eca:	08 c0       	rjmp	.+16     	; 0x2edc <vfprintf+0x1ec>
    2ecc:	f5 01       	movw	r30, r10
    2ece:	20 81       	ld	r18, Z
    2ed0:	31 81       	ldd	r19, Z+1	; 0x01
    2ed2:	42 81       	ldd	r20, Z+2	; 0x02
    2ed4:	53 81       	ldd	r21, Z+3	; 0x03
    2ed6:	84 e0       	ldi	r24, 0x04	; 4
    2ed8:	90 e0       	ldi	r25, 0x00	; 0
    2eda:	0a c0       	rjmp	.+20     	; 0x2ef0 <vfprintf+0x200>
    2edc:	f5 01       	movw	r30, r10
    2ede:	80 81       	ld	r24, Z
    2ee0:	91 81       	ldd	r25, Z+1	; 0x01
    2ee2:	9c 01       	movw	r18, r24
    2ee4:	44 27       	eor	r20, r20
    2ee6:	37 fd       	sbrc	r19, 7
    2ee8:	40 95       	com	r20
    2eea:	54 2f       	mov	r21, r20
    2eec:	82 e0       	ldi	r24, 0x02	; 2
    2eee:	90 e0       	ldi	r25, 0x00	; 0
    2ef0:	a8 0e       	add	r10, r24
    2ef2:	b9 1e       	adc	r11, r25
    2ef4:	9f e6       	ldi	r25, 0x6F	; 111
    2ef6:	f9 22       	and	r15, r25
    2ef8:	57 ff       	sbrs	r21, 7
    2efa:	09 c0       	rjmp	.+18     	; 0x2f0e <vfprintf+0x21e>
    2efc:	50 95       	com	r21
    2efe:	40 95       	com	r20
    2f00:	30 95       	com	r19
    2f02:	21 95       	neg	r18
    2f04:	3f 4f       	sbci	r19, 0xFF	; 255
    2f06:	4f 4f       	sbci	r20, 0xFF	; 255
    2f08:	5f 4f       	sbci	r21, 0xFF	; 255
    2f0a:	e0 e8       	ldi	r30, 0x80	; 128
    2f0c:	fe 2a       	or	r15, r30
    2f0e:	ca 01       	movw	r24, r20
    2f10:	b9 01       	movw	r22, r18
    2f12:	a1 01       	movw	r20, r2
    2f14:	2a e0       	ldi	r18, 0x0A	; 10
    2f16:	30 e0       	ldi	r19, 0x00	; 0
    2f18:	0e 94 97 18 	call	0x312e	; 0x312e <__ultoa_invert>
    2f1c:	d8 2e       	mov	r13, r24
    2f1e:	d2 18       	sub	r13, r2
    2f20:	40 c0       	rjmp	.+128    	; 0x2fa2 <vfprintf+0x2b2>
    2f22:	95 37       	cpi	r25, 0x75	; 117
    2f24:	29 f4       	brne	.+10     	; 0x2f30 <vfprintf+0x240>
    2f26:	1f 2d       	mov	r17, r15
    2f28:	1f 7e       	andi	r17, 0xEF	; 239
    2f2a:	2a e0       	ldi	r18, 0x0A	; 10
    2f2c:	30 e0       	ldi	r19, 0x00	; 0
    2f2e:	1d c0       	rjmp	.+58     	; 0x2f6a <vfprintf+0x27a>
    2f30:	1f 2d       	mov	r17, r15
    2f32:	19 7f       	andi	r17, 0xF9	; 249
    2f34:	9f 36       	cpi	r25, 0x6F	; 111
    2f36:	61 f0       	breq	.+24     	; 0x2f50 <vfprintf+0x260>
    2f38:	90 37       	cpi	r25, 0x70	; 112
    2f3a:	20 f4       	brcc	.+8      	; 0x2f44 <vfprintf+0x254>
    2f3c:	98 35       	cpi	r25, 0x58	; 88
    2f3e:	09 f0       	breq	.+2      	; 0x2f42 <vfprintf+0x252>
    2f40:	ac c0       	rjmp	.+344    	; 0x309a <vfprintf+0x3aa>
    2f42:	0f c0       	rjmp	.+30     	; 0x2f62 <vfprintf+0x272>
    2f44:	90 37       	cpi	r25, 0x70	; 112
    2f46:	39 f0       	breq	.+14     	; 0x2f56 <vfprintf+0x266>
    2f48:	98 37       	cpi	r25, 0x78	; 120
    2f4a:	09 f0       	breq	.+2      	; 0x2f4e <vfprintf+0x25e>
    2f4c:	a6 c0       	rjmp	.+332    	; 0x309a <vfprintf+0x3aa>
    2f4e:	04 c0       	rjmp	.+8      	; 0x2f58 <vfprintf+0x268>
    2f50:	28 e0       	ldi	r18, 0x08	; 8
    2f52:	30 e0       	ldi	r19, 0x00	; 0
    2f54:	0a c0       	rjmp	.+20     	; 0x2f6a <vfprintf+0x27a>
    2f56:	10 61       	ori	r17, 0x10	; 16
    2f58:	14 fd       	sbrc	r17, 4
    2f5a:	14 60       	ori	r17, 0x04	; 4
    2f5c:	20 e1       	ldi	r18, 0x10	; 16
    2f5e:	30 e0       	ldi	r19, 0x00	; 0
    2f60:	04 c0       	rjmp	.+8      	; 0x2f6a <vfprintf+0x27a>
    2f62:	14 fd       	sbrc	r17, 4
    2f64:	16 60       	ori	r17, 0x06	; 6
    2f66:	20 e1       	ldi	r18, 0x10	; 16
    2f68:	32 e0       	ldi	r19, 0x02	; 2
    2f6a:	17 ff       	sbrs	r17, 7
    2f6c:	08 c0       	rjmp	.+16     	; 0x2f7e <vfprintf+0x28e>
    2f6e:	f5 01       	movw	r30, r10
    2f70:	60 81       	ld	r22, Z
    2f72:	71 81       	ldd	r23, Z+1	; 0x01
    2f74:	82 81       	ldd	r24, Z+2	; 0x02
    2f76:	93 81       	ldd	r25, Z+3	; 0x03
    2f78:	44 e0       	ldi	r20, 0x04	; 4
    2f7a:	50 e0       	ldi	r21, 0x00	; 0
    2f7c:	08 c0       	rjmp	.+16     	; 0x2f8e <vfprintf+0x29e>
    2f7e:	f5 01       	movw	r30, r10
    2f80:	80 81       	ld	r24, Z
    2f82:	91 81       	ldd	r25, Z+1	; 0x01
    2f84:	bc 01       	movw	r22, r24
    2f86:	80 e0       	ldi	r24, 0x00	; 0
    2f88:	90 e0       	ldi	r25, 0x00	; 0
    2f8a:	42 e0       	ldi	r20, 0x02	; 2
    2f8c:	50 e0       	ldi	r21, 0x00	; 0
    2f8e:	a4 0e       	add	r10, r20
    2f90:	b5 1e       	adc	r11, r21
    2f92:	a1 01       	movw	r20, r2
    2f94:	0e 94 97 18 	call	0x312e	; 0x312e <__ultoa_invert>
    2f98:	d8 2e       	mov	r13, r24
    2f9a:	d2 18       	sub	r13, r2
    2f9c:	8f e7       	ldi	r24, 0x7F	; 127
    2f9e:	f8 2e       	mov	r15, r24
    2fa0:	f1 22       	and	r15, r17
    2fa2:	f6 fe       	sbrs	r15, 6
    2fa4:	0b c0       	rjmp	.+22     	; 0x2fbc <vfprintf+0x2cc>
    2fa6:	5e ef       	ldi	r21, 0xFE	; 254
    2fa8:	f5 22       	and	r15, r21
    2faa:	d9 14       	cp	r13, r9
    2fac:	38 f4       	brcc	.+14     	; 0x2fbc <vfprintf+0x2cc>
    2fae:	f4 fe       	sbrs	r15, 4
    2fb0:	07 c0       	rjmp	.+14     	; 0x2fc0 <vfprintf+0x2d0>
    2fb2:	f2 fc       	sbrc	r15, 2
    2fb4:	05 c0       	rjmp	.+10     	; 0x2fc0 <vfprintf+0x2d0>
    2fb6:	8f ee       	ldi	r24, 0xEF	; 239
    2fb8:	f8 22       	and	r15, r24
    2fba:	02 c0       	rjmp	.+4      	; 0x2fc0 <vfprintf+0x2d0>
    2fbc:	1d 2d       	mov	r17, r13
    2fbe:	01 c0       	rjmp	.+2      	; 0x2fc2 <vfprintf+0x2d2>
    2fc0:	19 2d       	mov	r17, r9
    2fc2:	f4 fe       	sbrs	r15, 4
    2fc4:	0d c0       	rjmp	.+26     	; 0x2fe0 <vfprintf+0x2f0>
    2fc6:	fe 01       	movw	r30, r28
    2fc8:	ed 0d       	add	r30, r13
    2fca:	f1 1d       	adc	r31, r1
    2fcc:	80 81       	ld	r24, Z
    2fce:	80 33       	cpi	r24, 0x30	; 48
    2fd0:	19 f4       	brne	.+6      	; 0x2fd8 <vfprintf+0x2e8>
    2fd2:	99 ee       	ldi	r25, 0xE9	; 233
    2fd4:	f9 22       	and	r15, r25
    2fd6:	08 c0       	rjmp	.+16     	; 0x2fe8 <vfprintf+0x2f8>
    2fd8:	1f 5f       	subi	r17, 0xFF	; 255
    2fda:	f2 fe       	sbrs	r15, 2
    2fdc:	05 c0       	rjmp	.+10     	; 0x2fe8 <vfprintf+0x2f8>
    2fde:	03 c0       	rjmp	.+6      	; 0x2fe6 <vfprintf+0x2f6>
    2fe0:	8f 2d       	mov	r24, r15
    2fe2:	86 78       	andi	r24, 0x86	; 134
    2fe4:	09 f0       	breq	.+2      	; 0x2fe8 <vfprintf+0x2f8>
    2fe6:	1f 5f       	subi	r17, 0xFF	; 255
    2fe8:	0f 2d       	mov	r16, r15
    2fea:	f3 fc       	sbrc	r15, 3
    2fec:	14 c0       	rjmp	.+40     	; 0x3016 <vfprintf+0x326>
    2fee:	f0 fe       	sbrs	r15, 0
    2ff0:	0f c0       	rjmp	.+30     	; 0x3010 <vfprintf+0x320>
    2ff2:	1e 15       	cp	r17, r14
    2ff4:	10 f0       	brcs	.+4      	; 0x2ffa <vfprintf+0x30a>
    2ff6:	9d 2c       	mov	r9, r13
    2ff8:	0b c0       	rjmp	.+22     	; 0x3010 <vfprintf+0x320>
    2ffa:	9d 2c       	mov	r9, r13
    2ffc:	9e 0c       	add	r9, r14
    2ffe:	91 1a       	sub	r9, r17
    3000:	1e 2d       	mov	r17, r14
    3002:	06 c0       	rjmp	.+12     	; 0x3010 <vfprintf+0x320>
    3004:	80 e2       	ldi	r24, 0x20	; 32
    3006:	90 e0       	ldi	r25, 0x00	; 0
    3008:	b3 01       	movw	r22, r6
    300a:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <fputc>
    300e:	1f 5f       	subi	r17, 0xFF	; 255
    3010:	1e 15       	cp	r17, r14
    3012:	c0 f3       	brcs	.-16     	; 0x3004 <vfprintf+0x314>
    3014:	04 c0       	rjmp	.+8      	; 0x301e <vfprintf+0x32e>
    3016:	1e 15       	cp	r17, r14
    3018:	10 f4       	brcc	.+4      	; 0x301e <vfprintf+0x32e>
    301a:	e1 1a       	sub	r14, r17
    301c:	01 c0       	rjmp	.+2      	; 0x3020 <vfprintf+0x330>
    301e:	ee 24       	eor	r14, r14
    3020:	04 ff       	sbrs	r16, 4
    3022:	0f c0       	rjmp	.+30     	; 0x3042 <vfprintf+0x352>
    3024:	80 e3       	ldi	r24, 0x30	; 48
    3026:	90 e0       	ldi	r25, 0x00	; 0
    3028:	b3 01       	movw	r22, r6
    302a:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <fputc>
    302e:	02 ff       	sbrs	r16, 2
    3030:	1d c0       	rjmp	.+58     	; 0x306c <vfprintf+0x37c>
    3032:	01 fd       	sbrc	r16, 1
    3034:	03 c0       	rjmp	.+6      	; 0x303c <vfprintf+0x34c>
    3036:	88 e7       	ldi	r24, 0x78	; 120
    3038:	90 e0       	ldi	r25, 0x00	; 0
    303a:	0e c0       	rjmp	.+28     	; 0x3058 <vfprintf+0x368>
    303c:	88 e5       	ldi	r24, 0x58	; 88
    303e:	90 e0       	ldi	r25, 0x00	; 0
    3040:	0b c0       	rjmp	.+22     	; 0x3058 <vfprintf+0x368>
    3042:	80 2f       	mov	r24, r16
    3044:	86 78       	andi	r24, 0x86	; 134
    3046:	91 f0       	breq	.+36     	; 0x306c <vfprintf+0x37c>
    3048:	01 ff       	sbrs	r16, 1
    304a:	02 c0       	rjmp	.+4      	; 0x3050 <vfprintf+0x360>
    304c:	8b e2       	ldi	r24, 0x2B	; 43
    304e:	01 c0       	rjmp	.+2      	; 0x3052 <vfprintf+0x362>
    3050:	80 e2       	ldi	r24, 0x20	; 32
    3052:	f7 fc       	sbrc	r15, 7
    3054:	8d e2       	ldi	r24, 0x2D	; 45
    3056:	90 e0       	ldi	r25, 0x00	; 0
    3058:	b3 01       	movw	r22, r6
    305a:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <fputc>
    305e:	06 c0       	rjmp	.+12     	; 0x306c <vfprintf+0x37c>
    3060:	80 e3       	ldi	r24, 0x30	; 48
    3062:	90 e0       	ldi	r25, 0x00	; 0
    3064:	b3 01       	movw	r22, r6
    3066:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <fputc>
    306a:	9a 94       	dec	r9
    306c:	d9 14       	cp	r13, r9
    306e:	c0 f3       	brcs	.-16     	; 0x3060 <vfprintf+0x370>
    3070:	da 94       	dec	r13
    3072:	f1 01       	movw	r30, r2
    3074:	ed 0d       	add	r30, r13
    3076:	f1 1d       	adc	r31, r1
    3078:	80 81       	ld	r24, Z
    307a:	90 e0       	ldi	r25, 0x00	; 0
    307c:	b3 01       	movw	r22, r6
    307e:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <fputc>
    3082:	dd 20       	and	r13, r13
    3084:	a9 f7       	brne	.-22     	; 0x3070 <vfprintf+0x380>
    3086:	06 c0       	rjmp	.+12     	; 0x3094 <vfprintf+0x3a4>
    3088:	80 e2       	ldi	r24, 0x20	; 32
    308a:	90 e0       	ldi	r25, 0x00	; 0
    308c:	b3 01       	movw	r22, r6
    308e:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <fputc>
    3092:	ea 94       	dec	r14
    3094:	ee 20       	and	r14, r14
    3096:	c1 f7       	brne	.-16     	; 0x3088 <vfprintf+0x398>
    3098:	43 ce       	rjmp	.-890    	; 0x2d20 <vfprintf+0x30>
    309a:	f3 01       	movw	r30, r6
    309c:	66 81       	ldd	r22, Z+6	; 0x06
    309e:	77 81       	ldd	r23, Z+7	; 0x07
    30a0:	cb 01       	movw	r24, r22
    30a2:	2b 96       	adiw	r28, 0x0b	; 11
    30a4:	e2 e1       	ldi	r30, 0x12	; 18
    30a6:	0c 94 39 16 	jmp	0x2c72	; 0x2c72 <__epilogue_restores__>

000030aa <strnlen_P>:
    30aa:	fc 01       	movw	r30, r24
    30ac:	05 90       	lpm	r0, Z+
    30ae:	61 50       	subi	r22, 0x01	; 1
    30b0:	70 40       	sbci	r23, 0x00	; 0
    30b2:	01 10       	cpse	r0, r1
    30b4:	d8 f7       	brcc	.-10     	; 0x30ac <strnlen_P+0x2>
    30b6:	80 95       	com	r24
    30b8:	90 95       	com	r25
    30ba:	8e 0f       	add	r24, r30
    30bc:	9f 1f       	adc	r25, r31
    30be:	08 95       	ret

000030c0 <strnlen>:
    30c0:	fc 01       	movw	r30, r24
    30c2:	61 50       	subi	r22, 0x01	; 1
    30c4:	70 40       	sbci	r23, 0x00	; 0
    30c6:	01 90       	ld	r0, Z+
    30c8:	01 10       	cpse	r0, r1
    30ca:	d8 f7       	brcc	.-10     	; 0x30c2 <strnlen+0x2>
    30cc:	80 95       	com	r24
    30ce:	90 95       	com	r25
    30d0:	8e 0f       	add	r24, r30
    30d2:	9f 1f       	adc	r25, r31
    30d4:	08 95       	ret

000030d6 <fputc>:
    30d6:	0f 93       	push	r16
    30d8:	1f 93       	push	r17
    30da:	cf 93       	push	r28
    30dc:	df 93       	push	r29
    30de:	8c 01       	movw	r16, r24
    30e0:	eb 01       	movw	r28, r22
    30e2:	8b 81       	ldd	r24, Y+3	; 0x03
    30e4:	81 ff       	sbrs	r24, 1
    30e6:	1b c0       	rjmp	.+54     	; 0x311e <fputc+0x48>
    30e8:	82 ff       	sbrs	r24, 2
    30ea:	0d c0       	rjmp	.+26     	; 0x3106 <fputc+0x30>
    30ec:	2e 81       	ldd	r18, Y+6	; 0x06
    30ee:	3f 81       	ldd	r19, Y+7	; 0x07
    30f0:	8c 81       	ldd	r24, Y+4	; 0x04
    30f2:	9d 81       	ldd	r25, Y+5	; 0x05
    30f4:	28 17       	cp	r18, r24
    30f6:	39 07       	cpc	r19, r25
    30f8:	64 f4       	brge	.+24     	; 0x3112 <fputc+0x3c>
    30fa:	e8 81       	ld	r30, Y
    30fc:	f9 81       	ldd	r31, Y+1	; 0x01
    30fe:	01 93       	st	Z+, r16
    3100:	f9 83       	std	Y+1, r31	; 0x01
    3102:	e8 83       	st	Y, r30
    3104:	06 c0       	rjmp	.+12     	; 0x3112 <fputc+0x3c>
    3106:	e8 85       	ldd	r30, Y+8	; 0x08
    3108:	f9 85       	ldd	r31, Y+9	; 0x09
    310a:	80 2f       	mov	r24, r16
    310c:	09 95       	icall
    310e:	89 2b       	or	r24, r25
    3110:	31 f4       	brne	.+12     	; 0x311e <fputc+0x48>
    3112:	8e 81       	ldd	r24, Y+6	; 0x06
    3114:	9f 81       	ldd	r25, Y+7	; 0x07
    3116:	01 96       	adiw	r24, 0x01	; 1
    3118:	9f 83       	std	Y+7, r25	; 0x07
    311a:	8e 83       	std	Y+6, r24	; 0x06
    311c:	02 c0       	rjmp	.+4      	; 0x3122 <fputc+0x4c>
    311e:	0f ef       	ldi	r16, 0xFF	; 255
    3120:	1f ef       	ldi	r17, 0xFF	; 255
    3122:	c8 01       	movw	r24, r16
    3124:	df 91       	pop	r29
    3126:	cf 91       	pop	r28
    3128:	1f 91       	pop	r17
    312a:	0f 91       	pop	r16
    312c:	08 95       	ret

0000312e <__ultoa_invert>:
    312e:	fa 01       	movw	r30, r20
    3130:	aa 27       	eor	r26, r26
    3132:	28 30       	cpi	r18, 0x08	; 8
    3134:	51 f1       	breq	.+84     	; 0x318a <__ultoa_invert+0x5c>
    3136:	20 31       	cpi	r18, 0x10	; 16
    3138:	81 f1       	breq	.+96     	; 0x319a <__ultoa_invert+0x6c>
    313a:	e8 94       	clt
    313c:	6f 93       	push	r22
    313e:	6e 7f       	andi	r22, 0xFE	; 254
    3140:	6e 5f       	subi	r22, 0xFE	; 254
    3142:	7f 4f       	sbci	r23, 0xFF	; 255
    3144:	8f 4f       	sbci	r24, 0xFF	; 255
    3146:	9f 4f       	sbci	r25, 0xFF	; 255
    3148:	af 4f       	sbci	r26, 0xFF	; 255
    314a:	b1 e0       	ldi	r27, 0x01	; 1
    314c:	3e d0       	rcall	.+124    	; 0x31ca <__ultoa_invert+0x9c>
    314e:	b4 e0       	ldi	r27, 0x04	; 4
    3150:	3c d0       	rcall	.+120    	; 0x31ca <__ultoa_invert+0x9c>
    3152:	67 0f       	add	r22, r23
    3154:	78 1f       	adc	r23, r24
    3156:	89 1f       	adc	r24, r25
    3158:	9a 1f       	adc	r25, r26
    315a:	a1 1d       	adc	r26, r1
    315c:	68 0f       	add	r22, r24
    315e:	79 1f       	adc	r23, r25
    3160:	8a 1f       	adc	r24, r26
    3162:	91 1d       	adc	r25, r1
    3164:	a1 1d       	adc	r26, r1
    3166:	6a 0f       	add	r22, r26
    3168:	71 1d       	adc	r23, r1
    316a:	81 1d       	adc	r24, r1
    316c:	91 1d       	adc	r25, r1
    316e:	a1 1d       	adc	r26, r1
    3170:	20 d0       	rcall	.+64     	; 0x31b2 <__ultoa_invert+0x84>
    3172:	09 f4       	brne	.+2      	; 0x3176 <__ultoa_invert+0x48>
    3174:	68 94       	set
    3176:	3f 91       	pop	r19
    3178:	2a e0       	ldi	r18, 0x0A	; 10
    317a:	26 9f       	mul	r18, r22
    317c:	11 24       	eor	r1, r1
    317e:	30 19       	sub	r19, r0
    3180:	30 5d       	subi	r19, 0xD0	; 208
    3182:	31 93       	st	Z+, r19
    3184:	de f6       	brtc	.-74     	; 0x313c <__ultoa_invert+0xe>
    3186:	cf 01       	movw	r24, r30
    3188:	08 95       	ret
    318a:	46 2f       	mov	r20, r22
    318c:	47 70       	andi	r20, 0x07	; 7
    318e:	40 5d       	subi	r20, 0xD0	; 208
    3190:	41 93       	st	Z+, r20
    3192:	b3 e0       	ldi	r27, 0x03	; 3
    3194:	0f d0       	rcall	.+30     	; 0x31b4 <__ultoa_invert+0x86>
    3196:	c9 f7       	brne	.-14     	; 0x318a <__ultoa_invert+0x5c>
    3198:	f6 cf       	rjmp	.-20     	; 0x3186 <__ultoa_invert+0x58>
    319a:	46 2f       	mov	r20, r22
    319c:	4f 70       	andi	r20, 0x0F	; 15
    319e:	40 5d       	subi	r20, 0xD0	; 208
    31a0:	4a 33       	cpi	r20, 0x3A	; 58
    31a2:	18 f0       	brcs	.+6      	; 0x31aa <__ultoa_invert+0x7c>
    31a4:	49 5d       	subi	r20, 0xD9	; 217
    31a6:	31 fd       	sbrc	r19, 1
    31a8:	40 52       	subi	r20, 0x20	; 32
    31aa:	41 93       	st	Z+, r20
    31ac:	02 d0       	rcall	.+4      	; 0x31b2 <__ultoa_invert+0x84>
    31ae:	a9 f7       	brne	.-22     	; 0x319a <__ultoa_invert+0x6c>
    31b0:	ea cf       	rjmp	.-44     	; 0x3186 <__ultoa_invert+0x58>
    31b2:	b4 e0       	ldi	r27, 0x04	; 4
    31b4:	a6 95       	lsr	r26
    31b6:	97 95       	ror	r25
    31b8:	87 95       	ror	r24
    31ba:	77 95       	ror	r23
    31bc:	67 95       	ror	r22
    31be:	ba 95       	dec	r27
    31c0:	c9 f7       	brne	.-14     	; 0x31b4 <__ultoa_invert+0x86>
    31c2:	00 97       	sbiw	r24, 0x00	; 0
    31c4:	61 05       	cpc	r22, r1
    31c6:	71 05       	cpc	r23, r1
    31c8:	08 95       	ret
    31ca:	9b 01       	movw	r18, r22
    31cc:	ac 01       	movw	r20, r24
    31ce:	0a 2e       	mov	r0, r26
    31d0:	06 94       	lsr	r0
    31d2:	57 95       	ror	r21
    31d4:	47 95       	ror	r20
    31d6:	37 95       	ror	r19
    31d8:	27 95       	ror	r18
    31da:	ba 95       	dec	r27
    31dc:	c9 f7       	brne	.-14     	; 0x31d0 <__ultoa_invert+0xa2>
    31de:	62 0f       	add	r22, r18
    31e0:	73 1f       	adc	r23, r19
    31e2:	84 1f       	adc	r24, r20
    31e4:	95 1f       	adc	r25, r21
    31e6:	a0 1d       	adc	r26, r0
    31e8:	08 95       	ret

000031ea <_exit>:
    31ea:	f8 94       	cli

000031ec <__stop_program>:
    31ec:	ff cf       	rjmp	.-2      	; 0x31ec <__stop_program>
